
L073RZ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e98  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000064e8  08008f58  08008f58  00018f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f440  0800f440  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800f440  0800f440  0001f440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f448  0800f448  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f448  0800f448  0001f448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f44c  0800f44c  0001f44c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800f450  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000378  2000007c  0800f4cc  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003f4  0800f4cc  000203f4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d8c7  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040a9  00000000  00000000  0003d96b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df8  00000000  00000000  00041a18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cf8  00000000  00000000  00042810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018126  00000000  00000000  00043508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000123ce  00000000  00000000  0005b62e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000855d1  00000000  00000000  0006d9fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f2fcd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003910  00000000  00000000  000f3020  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000007c 	.word	0x2000007c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08008f40 	.word	0x08008f40

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000080 	.word	0x20000080
 8000104:	08008f40 	.word	0x08008f40

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_uldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d111      	bne.n	800026c <__aeabi_uldivmod+0x28>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d10f      	bne.n	800026c <__aeabi_uldivmod+0x28>
 800024c:	2900      	cmp	r1, #0
 800024e:	d100      	bne.n	8000252 <__aeabi_uldivmod+0xe>
 8000250:	2800      	cmp	r0, #0
 8000252:	d002      	beq.n	800025a <__aeabi_uldivmod+0x16>
 8000254:	2100      	movs	r1, #0
 8000256:	43c9      	mvns	r1, r1
 8000258:	1c08      	adds	r0, r1, #0
 800025a:	b407      	push	{r0, r1, r2}
 800025c:	4802      	ldr	r0, [pc, #8]	; (8000268 <__aeabi_uldivmod+0x24>)
 800025e:	a102      	add	r1, pc, #8	; (adr r1, 8000268 <__aeabi_uldivmod+0x24>)
 8000260:	1840      	adds	r0, r0, r1
 8000262:	9002      	str	r0, [sp, #8]
 8000264:	bd03      	pop	{r0, r1, pc}
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	ffffffd9 	.word	0xffffffd9
 800026c:	b403      	push	{r0, r1}
 800026e:	4668      	mov	r0, sp
 8000270:	b501      	push	{r0, lr}
 8000272:	9802      	ldr	r0, [sp, #8]
 8000274:	f000 f82e 	bl	80002d4 <__udivmoddi4>
 8000278:	9b01      	ldr	r3, [sp, #4]
 800027a:	469e      	mov	lr, r3
 800027c:	b002      	add	sp, #8
 800027e:	bc0c      	pop	{r2, r3}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			; (mov r8, r8)

08000284 <__aeabi_lmul>:
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	0415      	lsls	r5, r2, #16
 8000288:	0c2d      	lsrs	r5, r5, #16
 800028a:	000f      	movs	r7, r1
 800028c:	0001      	movs	r1, r0
 800028e:	002e      	movs	r6, r5
 8000290:	46c6      	mov	lr, r8
 8000292:	4684      	mov	ip, r0
 8000294:	0400      	lsls	r0, r0, #16
 8000296:	0c14      	lsrs	r4, r2, #16
 8000298:	0c00      	lsrs	r0, r0, #16
 800029a:	0c09      	lsrs	r1, r1, #16
 800029c:	4346      	muls	r6, r0
 800029e:	434d      	muls	r5, r1
 80002a0:	4360      	muls	r0, r4
 80002a2:	4361      	muls	r1, r4
 80002a4:	1940      	adds	r0, r0, r5
 80002a6:	0c34      	lsrs	r4, r6, #16
 80002a8:	1824      	adds	r4, r4, r0
 80002aa:	b500      	push	{lr}
 80002ac:	42a5      	cmp	r5, r4
 80002ae:	d903      	bls.n	80002b8 <__aeabi_lmul+0x34>
 80002b0:	2080      	movs	r0, #128	; 0x80
 80002b2:	0240      	lsls	r0, r0, #9
 80002b4:	4680      	mov	r8, r0
 80002b6:	4441      	add	r1, r8
 80002b8:	0c25      	lsrs	r5, r4, #16
 80002ba:	186d      	adds	r5, r5, r1
 80002bc:	4661      	mov	r1, ip
 80002be:	4359      	muls	r1, r3
 80002c0:	437a      	muls	r2, r7
 80002c2:	0430      	lsls	r0, r6, #16
 80002c4:	1949      	adds	r1, r1, r5
 80002c6:	0424      	lsls	r4, r4, #16
 80002c8:	0c00      	lsrs	r0, r0, #16
 80002ca:	1820      	adds	r0, r4, r0
 80002cc:	1889      	adds	r1, r1, r2
 80002ce:	bc80      	pop	{r7}
 80002d0:	46b8      	mov	r8, r7
 80002d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002d4 <__udivmoddi4>:
 80002d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d6:	4657      	mov	r7, sl
 80002d8:	464e      	mov	r6, r9
 80002da:	4645      	mov	r5, r8
 80002dc:	46de      	mov	lr, fp
 80002de:	b5e0      	push	{r5, r6, r7, lr}
 80002e0:	0004      	movs	r4, r0
 80002e2:	000d      	movs	r5, r1
 80002e4:	4692      	mov	sl, r2
 80002e6:	4699      	mov	r9, r3
 80002e8:	b083      	sub	sp, #12
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d830      	bhi.n	8000350 <__udivmoddi4+0x7c>
 80002ee:	d02d      	beq.n	800034c <__udivmoddi4+0x78>
 80002f0:	4649      	mov	r1, r9
 80002f2:	4650      	mov	r0, sl
 80002f4:	f000 f8ba 	bl	800046c <__clzdi2>
 80002f8:	0029      	movs	r1, r5
 80002fa:	0006      	movs	r6, r0
 80002fc:	0020      	movs	r0, r4
 80002fe:	f000 f8b5 	bl	800046c <__clzdi2>
 8000302:	1a33      	subs	r3, r6, r0
 8000304:	4698      	mov	r8, r3
 8000306:	3b20      	subs	r3, #32
 8000308:	469b      	mov	fp, r3
 800030a:	d433      	bmi.n	8000374 <__udivmoddi4+0xa0>
 800030c:	465a      	mov	r2, fp
 800030e:	4653      	mov	r3, sl
 8000310:	4093      	lsls	r3, r2
 8000312:	4642      	mov	r2, r8
 8000314:	001f      	movs	r7, r3
 8000316:	4653      	mov	r3, sl
 8000318:	4093      	lsls	r3, r2
 800031a:	001e      	movs	r6, r3
 800031c:	42af      	cmp	r7, r5
 800031e:	d83a      	bhi.n	8000396 <__udivmoddi4+0xc2>
 8000320:	42af      	cmp	r7, r5
 8000322:	d100      	bne.n	8000326 <__udivmoddi4+0x52>
 8000324:	e078      	b.n	8000418 <__udivmoddi4+0x144>
 8000326:	465b      	mov	r3, fp
 8000328:	1ba4      	subs	r4, r4, r6
 800032a:	41bd      	sbcs	r5, r7
 800032c:	2b00      	cmp	r3, #0
 800032e:	da00      	bge.n	8000332 <__udivmoddi4+0x5e>
 8000330:	e075      	b.n	800041e <__udivmoddi4+0x14a>
 8000332:	2200      	movs	r2, #0
 8000334:	2300      	movs	r3, #0
 8000336:	9200      	str	r2, [sp, #0]
 8000338:	9301      	str	r3, [sp, #4]
 800033a:	2301      	movs	r3, #1
 800033c:	465a      	mov	r2, fp
 800033e:	4093      	lsls	r3, r2
 8000340:	9301      	str	r3, [sp, #4]
 8000342:	2301      	movs	r3, #1
 8000344:	4642      	mov	r2, r8
 8000346:	4093      	lsls	r3, r2
 8000348:	9300      	str	r3, [sp, #0]
 800034a:	e028      	b.n	800039e <__udivmoddi4+0xca>
 800034c:	4282      	cmp	r2, r0
 800034e:	d9cf      	bls.n	80002f0 <__udivmoddi4+0x1c>
 8000350:	2200      	movs	r2, #0
 8000352:	2300      	movs	r3, #0
 8000354:	9200      	str	r2, [sp, #0]
 8000356:	9301      	str	r3, [sp, #4]
 8000358:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <__udivmoddi4+0x8e>
 800035e:	601c      	str	r4, [r3, #0]
 8000360:	605d      	str	r5, [r3, #4]
 8000362:	9800      	ldr	r0, [sp, #0]
 8000364:	9901      	ldr	r1, [sp, #4]
 8000366:	b003      	add	sp, #12
 8000368:	bcf0      	pop	{r4, r5, r6, r7}
 800036a:	46bb      	mov	fp, r7
 800036c:	46b2      	mov	sl, r6
 800036e:	46a9      	mov	r9, r5
 8000370:	46a0      	mov	r8, r4
 8000372:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000374:	4642      	mov	r2, r8
 8000376:	2320      	movs	r3, #32
 8000378:	1a9b      	subs	r3, r3, r2
 800037a:	4652      	mov	r2, sl
 800037c:	40da      	lsrs	r2, r3
 800037e:	4641      	mov	r1, r8
 8000380:	0013      	movs	r3, r2
 8000382:	464a      	mov	r2, r9
 8000384:	408a      	lsls	r2, r1
 8000386:	0017      	movs	r7, r2
 8000388:	4642      	mov	r2, r8
 800038a:	431f      	orrs	r7, r3
 800038c:	4653      	mov	r3, sl
 800038e:	4093      	lsls	r3, r2
 8000390:	001e      	movs	r6, r3
 8000392:	42af      	cmp	r7, r5
 8000394:	d9c4      	bls.n	8000320 <__udivmoddi4+0x4c>
 8000396:	2200      	movs	r2, #0
 8000398:	2300      	movs	r3, #0
 800039a:	9200      	str	r2, [sp, #0]
 800039c:	9301      	str	r3, [sp, #4]
 800039e:	4643      	mov	r3, r8
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d0d9      	beq.n	8000358 <__udivmoddi4+0x84>
 80003a4:	07fb      	lsls	r3, r7, #31
 80003a6:	0872      	lsrs	r2, r6, #1
 80003a8:	431a      	orrs	r2, r3
 80003aa:	4646      	mov	r6, r8
 80003ac:	087b      	lsrs	r3, r7, #1
 80003ae:	e00e      	b.n	80003ce <__udivmoddi4+0xfa>
 80003b0:	42ab      	cmp	r3, r5
 80003b2:	d101      	bne.n	80003b8 <__udivmoddi4+0xe4>
 80003b4:	42a2      	cmp	r2, r4
 80003b6:	d80c      	bhi.n	80003d2 <__udivmoddi4+0xfe>
 80003b8:	1aa4      	subs	r4, r4, r2
 80003ba:	419d      	sbcs	r5, r3
 80003bc:	2001      	movs	r0, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2100      	movs	r1, #0
 80003c4:	3e01      	subs	r6, #1
 80003c6:	1824      	adds	r4, r4, r0
 80003c8:	414d      	adcs	r5, r1
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d006      	beq.n	80003dc <__udivmoddi4+0x108>
 80003ce:	42ab      	cmp	r3, r5
 80003d0:	d9ee      	bls.n	80003b0 <__udivmoddi4+0xdc>
 80003d2:	3e01      	subs	r6, #1
 80003d4:	1924      	adds	r4, r4, r4
 80003d6:	416d      	adcs	r5, r5
 80003d8:	2e00      	cmp	r6, #0
 80003da:	d1f8      	bne.n	80003ce <__udivmoddi4+0xfa>
 80003dc:	9800      	ldr	r0, [sp, #0]
 80003de:	9901      	ldr	r1, [sp, #4]
 80003e0:	465b      	mov	r3, fp
 80003e2:	1900      	adds	r0, r0, r4
 80003e4:	4169      	adcs	r1, r5
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db24      	blt.n	8000434 <__udivmoddi4+0x160>
 80003ea:	002b      	movs	r3, r5
 80003ec:	465a      	mov	r2, fp
 80003ee:	4644      	mov	r4, r8
 80003f0:	40d3      	lsrs	r3, r2
 80003f2:	002a      	movs	r2, r5
 80003f4:	40e2      	lsrs	r2, r4
 80003f6:	001c      	movs	r4, r3
 80003f8:	465b      	mov	r3, fp
 80003fa:	0015      	movs	r5, r2
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	db2a      	blt.n	8000456 <__udivmoddi4+0x182>
 8000400:	0026      	movs	r6, r4
 8000402:	409e      	lsls	r6, r3
 8000404:	0033      	movs	r3, r6
 8000406:	0026      	movs	r6, r4
 8000408:	4647      	mov	r7, r8
 800040a:	40be      	lsls	r6, r7
 800040c:	0032      	movs	r2, r6
 800040e:	1a80      	subs	r0, r0, r2
 8000410:	4199      	sbcs	r1, r3
 8000412:	9000      	str	r0, [sp, #0]
 8000414:	9101      	str	r1, [sp, #4]
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x84>
 8000418:	42a3      	cmp	r3, r4
 800041a:	d8bc      	bhi.n	8000396 <__udivmoddi4+0xc2>
 800041c:	e783      	b.n	8000326 <__udivmoddi4+0x52>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	2100      	movs	r1, #0
 8000424:	1a9b      	subs	r3, r3, r2
 8000426:	2200      	movs	r2, #0
 8000428:	9100      	str	r1, [sp, #0]
 800042a:	9201      	str	r2, [sp, #4]
 800042c:	2201      	movs	r2, #1
 800042e:	40da      	lsrs	r2, r3
 8000430:	9201      	str	r2, [sp, #4]
 8000432:	e786      	b.n	8000342 <__udivmoddi4+0x6e>
 8000434:	4642      	mov	r2, r8
 8000436:	2320      	movs	r3, #32
 8000438:	1a9b      	subs	r3, r3, r2
 800043a:	002a      	movs	r2, r5
 800043c:	4646      	mov	r6, r8
 800043e:	409a      	lsls	r2, r3
 8000440:	0023      	movs	r3, r4
 8000442:	40f3      	lsrs	r3, r6
 8000444:	4644      	mov	r4, r8
 8000446:	4313      	orrs	r3, r2
 8000448:	002a      	movs	r2, r5
 800044a:	40e2      	lsrs	r2, r4
 800044c:	001c      	movs	r4, r3
 800044e:	465b      	mov	r3, fp
 8000450:	0015      	movs	r5, r2
 8000452:	2b00      	cmp	r3, #0
 8000454:	dad4      	bge.n	8000400 <__udivmoddi4+0x12c>
 8000456:	4642      	mov	r2, r8
 8000458:	002f      	movs	r7, r5
 800045a:	2320      	movs	r3, #32
 800045c:	0026      	movs	r6, r4
 800045e:	4097      	lsls	r7, r2
 8000460:	1a9b      	subs	r3, r3, r2
 8000462:	40de      	lsrs	r6, r3
 8000464:	003b      	movs	r3, r7
 8000466:	4333      	orrs	r3, r6
 8000468:	e7cd      	b.n	8000406 <__udivmoddi4+0x132>
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzdi2>:
 800046c:	b510      	push	{r4, lr}
 800046e:	2900      	cmp	r1, #0
 8000470:	d103      	bne.n	800047a <__clzdi2+0xe>
 8000472:	f000 f807 	bl	8000484 <__clzsi2>
 8000476:	3020      	adds	r0, #32
 8000478:	e002      	b.n	8000480 <__clzdi2+0x14>
 800047a:	1c08      	adds	r0, r1, #0
 800047c:	f000 f802 	bl	8000484 <__clzsi2>
 8000480:	bd10      	pop	{r4, pc}
 8000482:	46c0      	nop			; (mov r8, r8)

08000484 <__clzsi2>:
 8000484:	211c      	movs	r1, #28
 8000486:	2301      	movs	r3, #1
 8000488:	041b      	lsls	r3, r3, #16
 800048a:	4298      	cmp	r0, r3
 800048c:	d301      	bcc.n	8000492 <__clzsi2+0xe>
 800048e:	0c00      	lsrs	r0, r0, #16
 8000490:	3910      	subs	r1, #16
 8000492:	0a1b      	lsrs	r3, r3, #8
 8000494:	4298      	cmp	r0, r3
 8000496:	d301      	bcc.n	800049c <__clzsi2+0x18>
 8000498:	0a00      	lsrs	r0, r0, #8
 800049a:	3908      	subs	r1, #8
 800049c:	091b      	lsrs	r3, r3, #4
 800049e:	4298      	cmp	r0, r3
 80004a0:	d301      	bcc.n	80004a6 <__clzsi2+0x22>
 80004a2:	0900      	lsrs	r0, r0, #4
 80004a4:	3904      	subs	r1, #4
 80004a6:	a202      	add	r2, pc, #8	; (adr r2, 80004b0 <__clzsi2+0x2c>)
 80004a8:	5c10      	ldrb	r0, [r2, r0]
 80004aa:	1840      	adds	r0, r0, r1
 80004ac:	4770      	bx	lr
 80004ae:	46c0      	nop			; (mov r8, r8)
 80004b0:	02020304 	.word	0x02020304
 80004b4:	01010101 	.word	0x01010101
	...

080004c0 <libswd_bin8_parity_even>:
* Data parity calculator, calculates even parity on char type.
* \param data source.
* \param *parity resulting data pointer.
* \return negative value on error, 0 or 1 as parity result.
*/
int libswd_bin8_parity_even(char data, char *parity){
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	0002      	movs	r2, r0
 80004c8:	6039      	str	r1, [r7, #0]
 80004ca:	1dfb      	adds	r3, r7, #7
 80004cc:	701a      	strb	r2, [r3, #0]
    char i;
    unsigned char test=data;
 80004ce:	230e      	movs	r3, #14
 80004d0:	18fb      	adds	r3, r7, r3
 80004d2:	1dfa      	adds	r2, r7, #7
 80004d4:	7812      	ldrb	r2, [r2, #0]
 80004d6:	701a      	strb	r2, [r3, #0]
    *parity=0;
 80004d8:	683b      	ldr	r3, [r7, #0]
 80004da:	2200      	movs	r2, #0
 80004dc:	701a      	strb	r2, [r3, #0]
    for (i=0;i<=8;i++) *parity ^= ((test>>i)&1);
 80004de:	230f      	movs	r3, #15
 80004e0:	18fb      	adds	r3, r7, r3
 80004e2:	2200      	movs	r2, #0
 80004e4:	701a      	strb	r2, [r3, #0]
 80004e6:	e018      	b.n	800051a <libswd_bin8_parity_even+0x5a>
 80004e8:	683b      	ldr	r3, [r7, #0]
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	b25a      	sxtb	r2, r3
 80004ee:	230e      	movs	r3, #14
 80004f0:	18fb      	adds	r3, r7, r3
 80004f2:	7819      	ldrb	r1, [r3, #0]
 80004f4:	200f      	movs	r0, #15
 80004f6:	183b      	adds	r3, r7, r0
 80004f8:	781b      	ldrb	r3, [r3, #0]
 80004fa:	4119      	asrs	r1, r3
 80004fc:	000b      	movs	r3, r1
 80004fe:	b25b      	sxtb	r3, r3
 8000500:	2101      	movs	r1, #1
 8000502:	400b      	ands	r3, r1
 8000504:	b25b      	sxtb	r3, r3
 8000506:	4053      	eors	r3, r2
 8000508:	b25b      	sxtb	r3, r3
 800050a:	b2da      	uxtb	r2, r3
 800050c:	683b      	ldr	r3, [r7, #0]
 800050e:	701a      	strb	r2, [r3, #0]
 8000510:	183b      	adds	r3, r7, r0
 8000512:	781a      	ldrb	r2, [r3, #0]
 8000514:	183b      	adds	r3, r7, r0
 8000516:	3201      	adds	r2, #1
 8000518:	701a      	strb	r2, [r3, #0]
 800051a:	230f      	movs	r3, #15
 800051c:	18fb      	adds	r3, r7, r3
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	2b08      	cmp	r3, #8
 8000522:	d9e1      	bls.n	80004e8 <libswd_bin8_parity_even+0x28>
    if (*parity<0 || *parity>1) return LIBSWD_ERROR_PARITY;
 8000524:	683b      	ldr	r3, [r7, #0]
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	2b01      	cmp	r3, #1
 800052a:	d902      	bls.n	8000532 <libswd_bin8_parity_even+0x72>
 800052c:	230f      	movs	r3, #15
 800052e:	425b      	negs	r3, r3
 8000530:	e001      	b.n	8000536 <libswd_bin8_parity_even+0x76>
    return (int)*parity;
 8000532:	683b      	ldr	r3, [r7, #0]
 8000534:	781b      	ldrb	r3, [r3, #0]
}
 8000536:	0018      	movs	r0, r3
 8000538:	46bd      	mov	sp, r7
 800053a:	b004      	add	sp, #16
 800053c:	bd80      	pop	{r7, pc}

0800053e <libswd_bin32_parity_even>:
* Data parity calculator, calculates even parity on integer type.
* \param data source.
* \param *parity resulting data pointer.
* \return negative value on error, 0 or 1 as parity result.
*/
int libswd_bin32_parity_even(int data, char *parity){
 800053e:	b580      	push	{r7, lr}
 8000540:	b084      	sub	sp, #16
 8000542:	af00      	add	r7, sp, #0
 8000544:	6078      	str	r0, [r7, #4]
 8000546:	6039      	str	r1, [r7, #0]
    int i;
    unsigned int test=data;
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	60bb      	str	r3, [r7, #8]
    *parity=0;
 800054c:	683b      	ldr	r3, [r7, #0]
 800054e:	2200      	movs	r2, #0
 8000550:	701a      	strb	r2, [r3, #0]
    for (i=0;i<32;i++) *parity ^= ((test>>i)&1);
 8000552:	2300      	movs	r3, #0
 8000554:	60fb      	str	r3, [r7, #12]
 8000556:	e010      	b.n	800057a <libswd_bin32_parity_even+0x3c>
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	781a      	ldrb	r2, [r3, #0]
 800055c:	68b9      	ldr	r1, [r7, #8]
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	40d9      	lsrs	r1, r3
 8000562:	000b      	movs	r3, r1
 8000564:	b2db      	uxtb	r3, r3
 8000566:	2101      	movs	r1, #1
 8000568:	400b      	ands	r3, r1
 800056a:	b2db      	uxtb	r3, r3
 800056c:	4053      	eors	r3, r2
 800056e:	b2da      	uxtb	r2, r3
 8000570:	683b      	ldr	r3, [r7, #0]
 8000572:	701a      	strb	r2, [r3, #0]
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	3301      	adds	r3, #1
 8000578:	60fb      	str	r3, [r7, #12]
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	2b1f      	cmp	r3, #31
 800057e:	ddeb      	ble.n	8000558 <libswd_bin32_parity_even+0x1a>
    if (*parity<0 || *parity>1) return LIBSWD_ERROR_PARITY;
 8000580:	683b      	ldr	r3, [r7, #0]
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b01      	cmp	r3, #1
 8000586:	d902      	bls.n	800058e <libswd_bin32_parity_even+0x50>
 8000588:	230f      	movs	r3, #15
 800058a:	425b      	negs	r3, r3
 800058c:	e001      	b.n	8000592 <libswd_bin32_parity_even+0x54>
    return (int)*parity;
 800058e:	683b      	ldr	r3, [r7, #0]
 8000590:	781b      	ldrb	r3, [r3, #0]
}
 8000592:	0018      	movs	r0, r3
 8000594:	46bd      	mov	sp, r7
 8000596:	b004      	add	sp, #16
 8000598:	bd80      	pop	{r7, pc}
	...

0800059c <libswd_bin8_string>:
/**
* Generates string containing binary data of a char value.
* \param data source.
* \return pointer to the resulting string.
*/
char *libswd_bin8_string(char data){
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	0002      	movs	r2, r0
 80005a4:	1dfb      	adds	r3, r7, #7
 80005a6:	701a      	strb	r2, [r3, #0]
    static char string[9]; string[8]=0;
 80005a8:	4b18      	ldr	r3, [pc, #96]	; (800060c <libswd_bin8_string+0x70>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	721a      	strb	r2, [r3, #8]
    unsigned char i, bits=data;
 80005ae:	230e      	movs	r3, #14
 80005b0:	18fb      	adds	r3, r7, r3
 80005b2:	1dfa      	adds	r2, r7, #7
 80005b4:	7812      	ldrb	r2, [r2, #0]
 80005b6:	701a      	strb	r2, [r3, #0]
    for (i=0;i<8;i++) string[7-i]=(bits&(1<<i))?'1':'0';
 80005b8:	230f      	movs	r3, #15
 80005ba:	18fb      	adds	r3, r7, r3
 80005bc:	2200      	movs	r2, #0
 80005be:	701a      	strb	r2, [r3, #0]
 80005c0:	e019      	b.n	80005f6 <libswd_bin8_string+0x5a>
 80005c2:	230e      	movs	r3, #14
 80005c4:	18fb      	adds	r3, r7, r3
 80005c6:	781a      	ldrb	r2, [r3, #0]
 80005c8:	230f      	movs	r3, #15
 80005ca:	18fb      	adds	r3, r7, r3
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	411a      	asrs	r2, r3
 80005d0:	0013      	movs	r3, r2
 80005d2:	2201      	movs	r2, #1
 80005d4:	4013      	ands	r3, r2
 80005d6:	d001      	beq.n	80005dc <libswd_bin8_string+0x40>
 80005d8:	2131      	movs	r1, #49	; 0x31
 80005da:	e000      	b.n	80005de <libswd_bin8_string+0x42>
 80005dc:	2130      	movs	r1, #48	; 0x30
 80005de:	200f      	movs	r0, #15
 80005e0:	183b      	adds	r3, r7, r0
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	2207      	movs	r2, #7
 80005e6:	1ad3      	subs	r3, r2, r3
 80005e8:	4a08      	ldr	r2, [pc, #32]	; (800060c <libswd_bin8_string+0x70>)
 80005ea:	54d1      	strb	r1, [r2, r3]
 80005ec:	183b      	adds	r3, r7, r0
 80005ee:	781a      	ldrb	r2, [r3, #0]
 80005f0:	183b      	adds	r3, r7, r0
 80005f2:	3201      	adds	r2, #1
 80005f4:	701a      	strb	r2, [r3, #0]
 80005f6:	230f      	movs	r3, #15
 80005f8:	18fb      	adds	r3, r7, r3
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	2b07      	cmp	r3, #7
 80005fe:	d9e0      	bls.n	80005c2 <libswd_bin8_string+0x26>
    return string;
 8000600:	4b02      	ldr	r3, [pc, #8]	; (800060c <libswd_bin8_string+0x70>)
}
 8000602:	0018      	movs	r0, r3
 8000604:	46bd      	mov	sp, r7
 8000606:	b004      	add	sp, #16
 8000608:	bd80      	pop	{r7, pc}
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	20000098 	.word	0x20000098

08000610 <libswd_bin32_string>:
/**
* Generates string containing binary data of an integer value.
* \param data source.
* \return pointer to the resulting string.
*/
char *libswd_bin32_string(int data){
 8000610:	b580      	push	{r7, lr}
 8000612:	b084      	sub	sp, #16
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
    static char string[33]; string[32]=0;
 8000618:	4b11      	ldr	r3, [pc, #68]	; (8000660 <libswd_bin32_string+0x50>)
 800061a:	2220      	movs	r2, #32
 800061c:	2100      	movs	r1, #0
 800061e:	5499      	strb	r1, [r3, r2]
    unsigned int i, bits=data;
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	60bb      	str	r3, [r7, #8]
    for (i=0;i<32;i++) string[31-i]=(bits&(1<<i))?'1':'0';
 8000624:	2300      	movs	r3, #0
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	e012      	b.n	8000650 <libswd_bin32_string+0x40>
 800062a:	2201      	movs	r2, #1
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	409a      	lsls	r2, r3
 8000630:	0013      	movs	r3, r2
 8000632:	001a      	movs	r2, r3
 8000634:	68bb      	ldr	r3, [r7, #8]
 8000636:	4013      	ands	r3, r2
 8000638:	d001      	beq.n	800063e <libswd_bin32_string+0x2e>
 800063a:	2131      	movs	r1, #49	; 0x31
 800063c:	e000      	b.n	8000640 <libswd_bin32_string+0x30>
 800063e:	2130      	movs	r1, #48	; 0x30
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	221f      	movs	r2, #31
 8000644:	1ad3      	subs	r3, r2, r3
 8000646:	4a06      	ldr	r2, [pc, #24]	; (8000660 <libswd_bin32_string+0x50>)
 8000648:	54d1      	strb	r1, [r2, r3]
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	3301      	adds	r3, #1
 800064e:	60fb      	str	r3, [r7, #12]
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	2b1f      	cmp	r3, #31
 8000654:	d9e9      	bls.n	800062a <libswd_bin32_string+0x1a>
    return string;
 8000656:	4b02      	ldr	r3, [pc, #8]	; (8000660 <libswd_bin32_string+0x50>)
}
 8000658:	0018      	movs	r0, r3
 800065a:	46bd      	mov	sp, r7
 800065c:	b004      	add	sp, #16
 800065e:	bd80      	pop	{r7, pc}
 8000660:	200000a4 	.word	0x200000a4

08000664 <libswd_bitgen8_request>:
* \param *RnW Read (high) or Write (low) operation type pointer.
* \param *addr target register address value pointer.
* \param *request pointer where to store resulting packet.
* \return number of generated packets (1), or LIBSWD_ERROR_CODE on failure.
*/
int libswd_bitgen8_request(libswd_ctx_t *libswdctx, char *APnDP, char *RnW, char *addr, char *request){
 8000664:	b580      	push	{r7, lr}
 8000666:	b088      	sub	sp, #32
 8000668:	af00      	add	r7, sp, #0
 800066a:	60f8      	str	r0, [r7, #12]
 800066c:	60b9      	str	r1, [r7, #8]
 800066e:	607a      	str	r2, [r7, #4]
 8000670:	603b      	str	r3, [r7, #0]
    /* Verify function parameters.*/
    if (libswdctx==NULL) return LIBSWD_ERROR_NULLCONTEXT;
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d102      	bne.n	800067e <libswd_bitgen8_request+0x1a>
 8000678:	230a      	movs	r3, #10
 800067a:	425b      	negs	r3, r3
 800067c:	e092      	b.n	80007a4 <libswd_bitgen8_request+0x140>
    if (*APnDP!=0 && *APnDP!=1) return LIBSWD_ERROR_APnDP;
 800067e:	68bb      	ldr	r3, [r7, #8]
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d006      	beq.n	8000694 <libswd_bitgen8_request+0x30>
 8000686:	68bb      	ldr	r3, [r7, #8]
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	2b01      	cmp	r3, #1
 800068c:	d002      	beq.n	8000694 <libswd_bitgen8_request+0x30>
 800068e:	230d      	movs	r3, #13
 8000690:	425b      	negs	r3, r3
 8000692:	e087      	b.n	80007a4 <libswd_bitgen8_request+0x140>
    if (*RnW!=0 && *RnW!=1) return LIBSWD_ERROR_RnW;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d006      	beq.n	80006aa <libswd_bitgen8_request+0x46>
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	2b01      	cmp	r3, #1
 80006a2:	d002      	beq.n	80006aa <libswd_bitgen8_request+0x46>
 80006a4:	230e      	movs	r3, #14
 80006a6:	425b      	negs	r3, r3
 80006a8:	e07c      	b.n	80007a4 <libswd_bitgen8_request+0x140>
    if (*addr<LIBSWD_ADDR_MINVAL && *addr>LIBSWD_ADDR_MAXVAL) return LIBSWD_ERROR_ADDR;
    
    /* Build request header content. */
    unsigned char reqhdr=0;
 80006aa:	211f      	movs	r1, #31
 80006ac:	187b      	adds	r3, r7, r1
 80006ae:	2200      	movs	r2, #0
 80006b0:	701a      	strb	r2, [r3, #0]
    char parity, req;
    int res;
    reqhdr|=(((*addr&(1<<2))?1:0)<<LIBSWD_REQUEST_A2_BITNUM);
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	109b      	asrs	r3, r3, #2
 80006b8:	00db      	lsls	r3, r3, #3
 80006ba:	b25b      	sxtb	r3, r3
 80006bc:	2208      	movs	r2, #8
 80006be:	4013      	ands	r3, r2
 80006c0:	b25a      	sxtb	r2, r3
 80006c2:	187b      	adds	r3, r7, r1
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	b25b      	sxtb	r3, r3
 80006c8:	4313      	orrs	r3, r2
 80006ca:	b25a      	sxtb	r2, r3
 80006cc:	187b      	adds	r3, r7, r1
 80006ce:	701a      	strb	r2, [r3, #0]
    reqhdr|=(((*addr&(1<<3))?1:0)<<LIBSWD_REQUEST_A3_BITNUM);
 80006d0:	683b      	ldr	r3, [r7, #0]
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	10db      	asrs	r3, r3, #3
 80006d6:	011b      	lsls	r3, r3, #4
 80006d8:	b25b      	sxtb	r3, r3
 80006da:	2210      	movs	r2, #16
 80006dc:	4013      	ands	r3, r2
 80006de:	b25a      	sxtb	r2, r3
 80006e0:	187b      	adds	r3, r7, r1
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	b25b      	sxtb	r3, r3
 80006e6:	4313      	orrs	r3, r2
 80006e8:	b25a      	sxtb	r2, r3
 80006ea:	187b      	adds	r3, r7, r1
 80006ec:	701a      	strb	r2, [r3, #0]
    reqhdr|=((*APnDP?1:0)<<LIBSWD_REQUEST_APnDP_BITNUM);
 80006ee:	68bb      	ldr	r3, [r7, #8]
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <libswd_bitgen8_request+0x96>
 80006f6:	2302      	movs	r3, #2
 80006f8:	e000      	b.n	80006fc <libswd_bitgen8_request+0x98>
 80006fa:	2300      	movs	r3, #0
 80006fc:	211f      	movs	r1, #31
 80006fe:	187a      	adds	r2, r7, r1
 8000700:	7812      	ldrb	r2, [r2, #0]
 8000702:	b252      	sxtb	r2, r2
 8000704:	4313      	orrs	r3, r2
 8000706:	b25a      	sxtb	r2, r3
 8000708:	187b      	adds	r3, r7, r1
 800070a:	701a      	strb	r2, [r3, #0]
    reqhdr|=(((*RnW?1:0)<<LIBSWD_REQUEST_RnW_BITNUM));
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <libswd_bitgen8_request+0xb4>
 8000714:	2304      	movs	r3, #4
 8000716:	e000      	b.n	800071a <libswd_bitgen8_request+0xb6>
 8000718:	2300      	movs	r3, #0
 800071a:	211f      	movs	r1, #31
 800071c:	187a      	adds	r2, r7, r1
 800071e:	7812      	ldrb	r2, [r2, #0]
 8000720:	b252      	sxtb	r2, r2
 8000722:	4313      	orrs	r3, r2
 8000724:	b25a      	sxtb	r2, r3
 8000726:	187b      	adds	r3, r7, r1
 8000728:	701a      	strb	r2, [r3, #0]
    req=reqhdr;
 800072a:	201e      	movs	r0, #30
 800072c:	183b      	adds	r3, r7, r0
 800072e:	187a      	adds	r2, r7, r1
 8000730:	7812      	ldrb	r2, [r2, #0]
 8000732:	701a      	strb	r2, [r3, #0]
    res=libswd_bin8_parity_even(req, &parity);
 8000734:	2317      	movs	r3, #23
 8000736:	18fa      	adds	r2, r7, r3
 8000738:	183b      	adds	r3, r7, r0
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	0011      	movs	r1, r2
 800073e:	0018      	movs	r0, r3
 8000740:	f7ff febe 	bl	80004c0 <libswd_bin8_parity_even>
 8000744:	0003      	movs	r3, r0
 8000746:	61bb      	str	r3, [r7, #24]
    if (res<0) return res;
 8000748:	69bb      	ldr	r3, [r7, #24]
 800074a:	2b00      	cmp	r3, #0
 800074c:	da01      	bge.n	8000752 <libswd_bitgen8_request+0xee>
 800074e:	69bb      	ldr	r3, [r7, #24]
 8000750:	e028      	b.n	80007a4 <libswd_bitgen8_request+0x140>
    if (parity<0 || parity>1) return LIBSWD_ERROR_PARITY;
 8000752:	2317      	movs	r3, #23
 8000754:	18fb      	adds	r3, r7, r3
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	2b01      	cmp	r3, #1
 800075a:	d902      	bls.n	8000762 <libswd_bitgen8_request+0xfe>
 800075c:	230f      	movs	r3, #15
 800075e:	425b      	negs	r3, r3
 8000760:	e020      	b.n	80007a4 <libswd_bitgen8_request+0x140>
    reqhdr|=(res<<LIBSWD_REQUEST_PARITY_BITNUM);
 8000762:	69bb      	ldr	r3, [r7, #24]
 8000764:	015b      	lsls	r3, r3, #5
 8000766:	b25a      	sxtb	r2, r3
 8000768:	201f      	movs	r0, #31
 800076a:	183b      	adds	r3, r7, r0
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	b25b      	sxtb	r3, r3
 8000770:	4313      	orrs	r3, r2
 8000772:	b25a      	sxtb	r2, r3
 8000774:	183b      	adds	r3, r7, r0
 8000776:	701a      	strb	r2, [r3, #0]
    reqhdr|=(LIBSWD_REQUEST_START_VAL<<LIBSWD_REQUEST_START_BITNUM);
 8000778:	183b      	adds	r3, r7, r0
 800077a:	183a      	adds	r2, r7, r0
 800077c:	7812      	ldrb	r2, [r2, #0]
 800077e:	2101      	movs	r1, #1
 8000780:	430a      	orrs	r2, r1
 8000782:	701a      	strb	r2, [r3, #0]
    reqhdr|=(LIBSWD_REQUEST_STOP_VAL<<LIBSWD_REQUEST_STOP_BITNUM);
 8000784:	183b      	adds	r3, r7, r0
 8000786:	183a      	adds	r2, r7, r0
 8000788:	7812      	ldrb	r2, [r2, #0]
 800078a:	701a      	strb	r2, [r3, #0]
    reqhdr|=(LIBSWD_REQUEST_PARK_VAL<<LIBSWD_REQUEST_PARK_BITNUM);
 800078c:	183b      	adds	r3, r7, r0
 800078e:	183a      	adds	r2, r7, r0
 8000790:	7812      	ldrb	r2, [r2, #0]
 8000792:	2180      	movs	r1, #128	; 0x80
 8000794:	4249      	negs	r1, r1
 8000796:	430a      	orrs	r2, r1
 8000798:	701a      	strb	r2, [r3, #0]
    
    *request=reqhdr;
 800079a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800079c:	183a      	adds	r2, r7, r0
 800079e:	7812      	ldrb	r2, [r2, #0]
 80007a0:	701a      	strb	r2, [r3, #0]
    return 1;
 80007a2:	2301      	movs	r3, #1
}
 80007a4:	0018      	movs	r0, r3
 80007a6:	46bd      	mov	sp, r7
 80007a8:	b008      	add	sp, #32
 80007aa:	bd80      	pop	{r7, pc}

080007ac <libswd_bus_setdir_mosi>:

/** Append command queue with TRN WRITE/MOSI, if previous command was READ/MISO.
* \param *libswdctx swd context pointer.
* \return number of elements appended, or LIBSWD_ERROR_CODE on failure.
*/
int libswd_bus_setdir_mosi(libswd_ctx_t *libswdctx){
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b086      	sub	sp, #24
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
    if (libswdctx==NULL) return LIBSWD_ERROR_NULLCONTEXT;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d102      	bne.n	80007c0 <libswd_bus_setdir_mosi+0x14>
 80007ba:	230a      	movs	r3, #10
 80007bc:	425b      	negs	r3, r3
 80007be:	e025      	b.n	800080c <libswd_bus_setdir_mosi+0x60>
    int res, cmdcnt=0;
 80007c0:	2300      	movs	r3, #0
 80007c2:	617b      	str	r3, [r7, #20]
    libswd_cmd_t *cmdqtail=libswd_cmdq_find_tail(libswdctx->cmdq);
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	0018      	movs	r0, r3
 80007ca:	f000 fec1 	bl	8001550 <libswd_cmdq_find_tail>
 80007ce:	0003      	movs	r3, r0
 80007d0:	613b      	str	r3, [r7, #16]
    if (cmdqtail==NULL) return LIBSWD_ERROR_QUEUE;
 80007d2:	693b      	ldr	r3, [r7, #16]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d102      	bne.n	80007de <libswd_bus_setdir_mosi+0x32>
 80007d8:	230b      	movs	r3, #11
 80007da:	425b      	negs	r3, r3
 80007dc:	e016      	b.n	800080c <libswd_bus_setdir_mosi+0x60>
    if ( cmdqtail->prev3==NULL || (cmdqtail->cmdtype*LIBSWD_CMDTYPE_MOSI<0) ) {
 80007de:	693b      	ldr	r3, [r7, #16]
 80007e0:	68db      	ldr	r3, [r3, #12]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d004      	beq.n	80007f0 <libswd_bus_setdir_mosi+0x44>
 80007e6:	693b      	ldr	r3, [r7, #16]
 80007e8:	7a5b      	ldrb	r3, [r3, #9]
 80007ea:	b25b      	sxtb	r3, r3
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	dd0c      	ble.n	800080a <libswd_bus_setdir_mosi+0x5e>
        res=libswd_cmd_enqueue_mosi_trn(libswdctx);
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	0018      	movs	r0, r3
 80007f4:	f000 fbb2 	bl	8000f5c <libswd_cmd_enqueue_mosi_trn>
 80007f8:	0003      	movs	r3, r0
 80007fa:	60fb      	str	r3, [r7, #12]
        if (res<1) return res;
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	dc01      	bgt.n	8000806 <libswd_bus_setdir_mosi+0x5a>
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	e002      	b.n	800080c <libswd_bus_setdir_mosi+0x60>
        cmdcnt=+res;
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	617b      	str	r3, [r7, #20]
    }
    return cmdcnt;
 800080a:	697b      	ldr	r3, [r7, #20]
}
 800080c:	0018      	movs	r0, r3
 800080e:	46bd      	mov	sp, r7
 8000810:	b006      	add	sp, #24
 8000812:	bd80      	pop	{r7, pc}

08000814 <libswd_bus_setdir_miso>:

/** Append command queue with TRN READ/MISO, if previous command was WRITE/MOSI.
* \param *libswdctx swd context pointer.
* \return number of elements appended, or LIBSWD_ERROR_CODE on failure.
*/
int libswd_bus_setdir_miso(libswd_ctx_t *libswdctx){
 8000814:	b580      	push	{r7, lr}
 8000816:	b086      	sub	sp, #24
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
    if (libswdctx==NULL) return LIBSWD_ERROR_NULLCONTEXT;
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d102      	bne.n	8000828 <libswd_bus_setdir_miso+0x14>
 8000822:	230a      	movs	r3, #10
 8000824:	425b      	negs	r3, r3
 8000826:	e025      	b.n	8000874 <libswd_bus_setdir_miso+0x60>
    int res, cmdcnt=0;
 8000828:	2300      	movs	r3, #0
 800082a:	617b      	str	r3, [r7, #20]
    libswd_cmd_t *cmdqtail=libswd_cmdq_find_tail(libswdctx->cmdq);
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	0018      	movs	r0, r3
 8000832:	f000 fe8d 	bl	8001550 <libswd_cmdq_find_tail>
 8000836:	0003      	movs	r3, r0
 8000838:	613b      	str	r3, [r7, #16]
    if (cmdqtail==NULL) return LIBSWD_ERROR_QUEUE;
 800083a:	693b      	ldr	r3, [r7, #16]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d102      	bne.n	8000846 <libswd_bus_setdir_miso+0x32>
 8000840:	230b      	movs	r3, #11
 8000842:	425b      	negs	r3, r3
 8000844:	e016      	b.n	8000874 <libswd_bus_setdir_miso+0x60>
    if (cmdqtail->prev3==NULL || (cmdqtail->cmdtype*LIBSWD_CMDTYPE_MISO<0) ) {
 8000846:	693b      	ldr	r3, [r7, #16]
 8000848:	68db      	ldr	r3, [r3, #12]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d004      	beq.n	8000858 <libswd_bus_setdir_miso+0x44>
 800084e:	693b      	ldr	r3, [r7, #16]
 8000850:	7a5b      	ldrb	r3, [r3, #9]
 8000852:	b25b      	sxtb	r3, r3
 8000854:	2b00      	cmp	r3, #0
 8000856:	da0c      	bge.n	8000872 <libswd_bus_setdir_miso+0x5e>
        res=libswd_cmd_enqueue_miso_trn(libswdctx);
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	0018      	movs	r0, r3
 800085c:	f000 fba5 	bl	8000faa <libswd_cmd_enqueue_miso_trn>
 8000860:	0003      	movs	r3, r0
 8000862:	60fb      	str	r3, [r7, #12]
        if (res<0) return res;
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	2b00      	cmp	r3, #0
 8000868:	da01      	bge.n	800086e <libswd_bus_setdir_miso+0x5a>
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	e002      	b.n	8000874 <libswd_bus_setdir_miso+0x60>
        cmdcnt=+res;
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	617b      	str	r3, [r7, #20]
    }
    return cmdcnt;
 8000872:	697b      	ldr	r3, [r7, #20]
}
 8000874:	0018      	movs	r0, r3
 8000876:	46bd      	mov	sp, r7
 8000878:	b006      	add	sp, #24
 800087a:	bd80      	pop	{r7, pc}

0800087c <libswd_bus_write_request_raw>:
* \param operation type of action to perform with generated request.
* \param *request request packet raw data
* \return number of commands processed, or LIBSWD_ERROR_CODE on failure.
*/
int libswd_bus_write_request_raw
(libswd_ctx_t *libswdctx, libswd_operation_t operation, char request){
 800087c:	b580      	push	{r7, lr}
 800087e:	b086      	sub	sp, #24
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
 8000884:	0008      	movs	r0, r1
 8000886:	0011      	movs	r1, r2
 8000888:	1cfb      	adds	r3, r7, #3
 800088a:	1c02      	adds	r2, r0, #0
 800088c:	701a      	strb	r2, [r3, #0]
 800088e:	1cbb      	adds	r3, r7, #2
 8000890:	1c0a      	adds	r2, r1, #0
 8000892:	701a      	strb	r2, [r3, #0]
    /* Verify function parameters.*/
    if (libswdctx==NULL) return LIBSWD_ERROR_NULLCONTEXT;
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d102      	bne.n	80008a0 <libswd_bus_write_request_raw+0x24>
 800089a:	230a      	movs	r3, #10
 800089c:	425b      	negs	r3, r3
 800089e:	e054      	b.n	800094a <libswd_bus_write_request_raw+0xce>
    if (request==NULL) return LIBSWD_ERROR_NULLPOINTER;
 80008a0:	1cbb      	adds	r3, r7, #2
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d102      	bne.n	80008ae <libswd_bus_write_request_raw+0x32>
 80008a8:	2302      	movs	r3, #2
 80008aa:	425b      	negs	r3, r3
 80008ac:	e04d      	b.n	800094a <libswd_bus_write_request_raw+0xce>
    if (operation!=LIBSWD_OPERATION_ENQUEUE && operation!=LIBSWD_OPERATION_EXECUTE)
 80008ae:	1cfb      	adds	r3, r7, #3
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	2b01      	cmp	r3, #1
 80008b4:	d006      	beq.n	80008c4 <libswd_bus_write_request_raw+0x48>
 80008b6:	1cfb      	adds	r3, r7, #3
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	2b02      	cmp	r3, #2
 80008bc:	d002      	beq.n	80008c4 <libswd_bus_write_request_raw+0x48>
        return LIBSWD_ERROR_BADOPCODE;
 80008be:	2318      	movs	r3, #24
 80008c0:	425b      	negs	r3, r3
 80008c2:	e042      	b.n	800094a <libswd_bus_write_request_raw+0xce>
    
    int res, qcmdcnt=0, tcmdcnt=0;
 80008c4:	2300      	movs	r3, #0
 80008c6:	617b      	str	r3, [r7, #20]
 80008c8:	2300      	movs	r3, #0
 80008ca:	613b      	str	r3, [r7, #16]
    
    /* Bus direction must be MOSI. */
    res=libswd_bus_setdir_mosi(libswdctx);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	0018      	movs	r0, r3
 80008d0:	f7ff ff6c 	bl	80007ac <libswd_bus_setdir_mosi>
 80008d4:	0003      	movs	r3, r0
 80008d6:	60fb      	str	r3, [r7, #12]
    if (res<0) return res;
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	da01      	bge.n	80008e2 <libswd_bus_write_request_raw+0x66>
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	e033      	b.n	800094a <libswd_bus_write_request_raw+0xce>
    qcmdcnt=+res;
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	617b      	str	r3, [r7, #20]
    
    /* Append request command to the queue. */
    res=libswd_cmd_enqueue_mosi_request(libswdctx, request);
 80008e6:	1cbb      	adds	r3, r7, #2
 80008e8:	781a      	ldrb	r2, [r3, #0]
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	0011      	movs	r1, r2
 80008ee:	0018      	movs	r0, r3
 80008f0:	f000 fb0a 	bl	8000f08 <libswd_cmd_enqueue_mosi_request>
 80008f4:	0003      	movs	r3, r0
 80008f6:	60fb      	str	r3, [r7, #12]
    if (res<0) return res;
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	da01      	bge.n	8000902 <libswd_bus_write_request_raw+0x86>
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	e023      	b.n	800094a <libswd_bus_write_request_raw+0xce>
    qcmdcnt+=res;
 8000902:	697a      	ldr	r2, [r7, #20]
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	18d3      	adds	r3, r2, r3
 8000908:	617b      	str	r3, [r7, #20]
    
    if (operation==LIBSWD_OPERATION_ENQUEUE){
 800090a:	1cfb      	adds	r3, r7, #3
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	2b01      	cmp	r3, #1
 8000910:	d101      	bne.n	8000916 <libswd_bus_write_request_raw+0x9a>
        return qcmdcnt;
 8000912:	697b      	ldr	r3, [r7, #20]
 8000914:	e019      	b.n	800094a <libswd_bus_write_request_raw+0xce>
    } else if (operation==LIBSWD_OPERATION_EXECUTE){
 8000916:	1cfb      	adds	r3, r7, #3
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	2b02      	cmp	r3, #2
 800091c:	d113      	bne.n	8000946 <libswd_bus_write_request_raw+0xca>
        res=libswd_cmdq_flush(libswdctx, &libswdctx->cmdq, operation);
 800091e:	6879      	ldr	r1, [r7, #4]
 8000920:	1cfb      	adds	r3, r7, #3
 8000922:	781a      	ldrb	r2, [r3, #0]
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	0018      	movs	r0, r3
 8000928:	f000 ff86 	bl	8001838 <libswd_cmdq_flush>
 800092c:	0003      	movs	r3, r0
 800092e:	60fb      	str	r3, [r7, #12]
        if (res<0) return res;
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	2b00      	cmp	r3, #0
 8000934:	da01      	bge.n	800093a <libswd_bus_write_request_raw+0xbe>
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	e007      	b.n	800094a <libswd_bus_write_request_raw+0xce>
        tcmdcnt=+res;
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	613b      	str	r3, [r7, #16]
        return qcmdcnt+tcmdcnt;
 800093e:	697a      	ldr	r2, [r7, #20]
 8000940:	693b      	ldr	r3, [r7, #16]
 8000942:	18d3      	adds	r3, r2, r3
 8000944:	e001      	b.n	800094a <libswd_bus_write_request_raw+0xce>
    } else return LIBSWD_ERROR_BADOPCODE;
 8000946:	2318      	movs	r3, #24
 8000948:	425b      	negs	r3, r3
}
 800094a:	0018      	movs	r0, r3
 800094c:	46bd      	mov	sp, r7
 800094e:	b006      	add	sp, #24
 8000950:	bd80      	pop	{r7, pc}

08000952 <libswd_bus_write_request>:
* \param *RnW Read (high) or Write (low) access value pointer.
* \param *addr target register address value pointer.
* \return number of commands processed, or LIBSWD_ERROR_CODE on failure.
*/
int libswd_bus_write_request
(libswd_ctx_t *libswdctx, libswd_operation_t operation, char *APnDP, char *RnW, char *addr){
 8000952:	b590      	push	{r4, r7, lr}
 8000954:	b08b      	sub	sp, #44	; 0x2c
 8000956:	af02      	add	r7, sp, #8
 8000958:	60f8      	str	r0, [r7, #12]
 800095a:	607a      	str	r2, [r7, #4]
 800095c:	603b      	str	r3, [r7, #0]
 800095e:	230b      	movs	r3, #11
 8000960:	18fb      	adds	r3, r7, r3
 8000962:	1c0a      	adds	r2, r1, #0
 8000964:	701a      	strb	r2, [r3, #0]
    /* Verify function parameters.*/
    if (libswdctx==NULL) return LIBSWD_ERROR_NULLCONTEXT;
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d102      	bne.n	8000972 <libswd_bus_write_request+0x20>
 800096c:	230a      	movs	r3, #10
 800096e:	425b      	negs	r3, r3
 8000970:	e07f      	b.n	8000a72 <libswd_bus_write_request+0x120>
    if (*APnDP!=0 && *APnDP!=1) return LIBSWD_ERROR_APnDP;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d006      	beq.n	8000988 <libswd_bus_write_request+0x36>
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	2b01      	cmp	r3, #1
 8000980:	d002      	beq.n	8000988 <libswd_bus_write_request+0x36>
 8000982:	230d      	movs	r3, #13
 8000984:	425b      	negs	r3, r3
 8000986:	e074      	b.n	8000a72 <libswd_bus_write_request+0x120>
    if (*RnW!=0 && *RnW!=1) return LIBSWD_ERROR_RnW;
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d006      	beq.n	800099e <libswd_bus_write_request+0x4c>
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	2b01      	cmp	r3, #1
 8000996:	d002      	beq.n	800099e <libswd_bus_write_request+0x4c>
 8000998:	230e      	movs	r3, #14
 800099a:	425b      	negs	r3, r3
 800099c:	e069      	b.n	8000a72 <libswd_bus_write_request+0x120>
    if (*addr<LIBSWD_ADDR_MINVAL || *addr>LIBSWD_ADDR_MAXVAL) return LIBSWD_ERROR_ADDR;
 800099e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	2b0c      	cmp	r3, #12
 80009a4:	d902      	bls.n	80009ac <libswd_bus_write_request+0x5a>
 80009a6:	230c      	movs	r3, #12
 80009a8:	425b      	negs	r3, r3
 80009aa:	e062      	b.n	8000a72 <libswd_bus_write_request+0x120>
    if (operation!=LIBSWD_OPERATION_ENQUEUE && operation!=LIBSWD_OPERATION_EXECUTE)
 80009ac:	220b      	movs	r2, #11
 80009ae:	18bb      	adds	r3, r7, r2
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	2b01      	cmp	r3, #1
 80009b4:	d006      	beq.n	80009c4 <libswd_bus_write_request+0x72>
 80009b6:	18bb      	adds	r3, r7, r2
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	2b02      	cmp	r3, #2
 80009bc:	d002      	beq.n	80009c4 <libswd_bus_write_request+0x72>
        return LIBSWD_ERROR_BADOPCODE;
 80009be:	2318      	movs	r3, #24
 80009c0:	425b      	negs	r3, r3
 80009c2:	e056      	b.n	8000a72 <libswd_bus_write_request+0x120>
    
    int res, qcmdcnt=0, tcmdcnt=0;
 80009c4:	2300      	movs	r3, #0
 80009c6:	61fb      	str	r3, [r7, #28]
 80009c8:	2300      	movs	r3, #0
 80009ca:	61bb      	str	r3, [r7, #24]
    char request;
    
    /* Generate request bitstream. */
    res=libswd_bitgen8_request(libswdctx, APnDP, RnW, addr, &request);
 80009cc:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 80009ce:	683a      	ldr	r2, [r7, #0]
 80009d0:	6879      	ldr	r1, [r7, #4]
 80009d2:	68f8      	ldr	r0, [r7, #12]
 80009d4:	2313      	movs	r3, #19
 80009d6:	18fb      	adds	r3, r7, r3
 80009d8:	9300      	str	r3, [sp, #0]
 80009da:	0023      	movs	r3, r4
 80009dc:	f7ff fe42 	bl	8000664 <libswd_bitgen8_request>
 80009e0:	0003      	movs	r3, r0
 80009e2:	617b      	str	r3, [r7, #20]
    if (res<0) return res;
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	da01      	bge.n	80009ee <libswd_bus_write_request+0x9c>
 80009ea:	697b      	ldr	r3, [r7, #20]
 80009ec:	e041      	b.n	8000a72 <libswd_bus_write_request+0x120>
    
    /* Bus direction must be MOSI. */
    res=libswd_bus_setdir_mosi(libswdctx);
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	0018      	movs	r0, r3
 80009f2:	f7ff fedb 	bl	80007ac <libswd_bus_setdir_mosi>
 80009f6:	0003      	movs	r3, r0
 80009f8:	617b      	str	r3, [r7, #20]
    if (res<0) return res;
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	da01      	bge.n	8000a04 <libswd_bus_write_request+0xb2>
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	e036      	b.n	8000a72 <libswd_bus_write_request+0x120>
    qcmdcnt=+res;
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	61fb      	str	r3, [r7, #28]
    
    /* Append request command to the queue. */
    res=libswd_cmd_enqueue_mosi_request(libswdctx, request);
 8000a08:	2313      	movs	r3, #19
 8000a0a:	18fb      	adds	r3, r7, r3
 8000a0c:	781a      	ldrb	r2, [r3, #0]
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	0011      	movs	r1, r2
 8000a12:	0018      	movs	r0, r3
 8000a14:	f000 fa78 	bl	8000f08 <libswd_cmd_enqueue_mosi_request>
 8000a18:	0003      	movs	r3, r0
 8000a1a:	617b      	str	r3, [r7, #20]
    if (res<0) return res;
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	da01      	bge.n	8000a26 <libswd_bus_write_request+0xd4>
 8000a22:	697b      	ldr	r3, [r7, #20]
 8000a24:	e025      	b.n	8000a72 <libswd_bus_write_request+0x120>
    qcmdcnt+=res;
 8000a26:	69fa      	ldr	r2, [r7, #28]
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	18d3      	adds	r3, r2, r3
 8000a2c:	61fb      	str	r3, [r7, #28]
    
    if (operation==LIBSWD_OPERATION_ENQUEUE){
 8000a2e:	230b      	movs	r3, #11
 8000a30:	18fb      	adds	r3, r7, r3
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	2b01      	cmp	r3, #1
 8000a36:	d101      	bne.n	8000a3c <libswd_bus_write_request+0xea>
        return qcmdcnt;
 8000a38:	69fb      	ldr	r3, [r7, #28]
 8000a3a:	e01a      	b.n	8000a72 <libswd_bus_write_request+0x120>
    } else if (operation==LIBSWD_OPERATION_EXECUTE){
 8000a3c:	220b      	movs	r2, #11
 8000a3e:	18bb      	adds	r3, r7, r2
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	2b02      	cmp	r3, #2
 8000a44:	d113      	bne.n	8000a6e <libswd_bus_write_request+0x11c>
        res=libswd_cmdq_flush(libswdctx, &libswdctx->cmdq, operation);
 8000a46:	68f9      	ldr	r1, [r7, #12]
 8000a48:	18bb      	adds	r3, r7, r2
 8000a4a:	781a      	ldrb	r2, [r3, #0]
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	0018      	movs	r0, r3
 8000a50:	f000 fef2 	bl	8001838 <libswd_cmdq_flush>
 8000a54:	0003      	movs	r3, r0
 8000a56:	617b      	str	r3, [r7, #20]
        if (res<0) return res;
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	da01      	bge.n	8000a62 <libswd_bus_write_request+0x110>
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	e007      	b.n	8000a72 <libswd_bus_write_request+0x120>
        tcmdcnt=+res;
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	61bb      	str	r3, [r7, #24]
        return qcmdcnt+tcmdcnt;
 8000a66:	69fa      	ldr	r2, [r7, #28]
 8000a68:	69bb      	ldr	r3, [r7, #24]
 8000a6a:	18d3      	adds	r3, r2, r3
 8000a6c:	e001      	b.n	8000a72 <libswd_bus_write_request+0x120>
    } else return LIBSWD_ERROR_BADOPCODE;
 8000a6e:	2318      	movs	r3, #24
 8000a70:	425b      	negs	r3, r3
}
 8000a72:	0018      	movs	r0, r3
 8000a74:	46bd      	mov	sp, r7
 8000a76:	b009      	add	sp, #36	; 0x24
 8000a78:	bd90      	pop	{r4, r7, pc}

08000a7a <libswd_bus_read_ack>:
* \param *libswdctx swd context pointer.
* \param operation type of action to perform with generated request.
* \param *ack pointer to the result location.
* \return number of commands processed, or LIBSWD_ERROR_CODE on failure.
*/
int libswd_bus_read_ack(libswd_ctx_t *libswdctx, libswd_operation_t operation, char *ack){
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	b08a      	sub	sp, #40	; 0x28
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	60f8      	str	r0, [r7, #12]
 8000a82:	607a      	str	r2, [r7, #4]
 8000a84:	230b      	movs	r3, #11
 8000a86:	18fb      	adds	r3, r7, r3
 8000a88:	1c0a      	adds	r2, r1, #0
 8000a8a:	701a      	strb	r2, [r3, #0]
    if (libswdctx==NULL) return LIBSWD_ERROR_NULLCONTEXT;
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d102      	bne.n	8000a98 <libswd_bus_read_ack+0x1e>
 8000a92:	230a      	movs	r3, #10
 8000a94:	425b      	negs	r3, r3
 8000a96:	e0a3      	b.n	8000be0 <libswd_bus_read_ack+0x166>
    if (ack==NULL) return LIBSWD_ERROR_NULLPOINTER;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d102      	bne.n	8000aa4 <libswd_bus_read_ack+0x2a>
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	425b      	negs	r3, r3
 8000aa2:	e09d      	b.n	8000be0 <libswd_bus_read_ack+0x166>
    if (operation!=LIBSWD_OPERATION_ENQUEUE && operation!=LIBSWD_OPERATION_EXECUTE)
 8000aa4:	220b      	movs	r2, #11
 8000aa6:	18bb      	adds	r3, r7, r2
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	2b01      	cmp	r3, #1
 8000aac:	d006      	beq.n	8000abc <libswd_bus_read_ack+0x42>
 8000aae:	18bb      	adds	r3, r7, r2
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	2b02      	cmp	r3, #2
 8000ab4:	d002      	beq.n	8000abc <libswd_bus_read_ack+0x42>
        return LIBSWD_ERROR_BADOPCODE;
 8000ab6:	2318      	movs	r3, #24
 8000ab8:	425b      	negs	r3, r3
 8000aba:	e091      	b.n	8000be0 <libswd_bus_read_ack+0x166>
    
    int res, qcmdcnt=0, tcmdcnt=0;
 8000abc:	2300      	movs	r3, #0
 8000abe:	623b      	str	r3, [r7, #32]
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	61fb      	str	r3, [r7, #28]
    libswd_cmd_t *tmpcmdq, *cmdqtail;
    
    /* ACK can only show after REQ_MOSI,TRN_MISO sequence. */
    cmdqtail=libswd_cmdq_find_tail(libswdctx->cmdq);
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	0018      	movs	r0, r3
 8000aca:	f000 fd41 	bl	8001550 <libswd_cmdq_find_tail>
 8000ace:	0003      	movs	r3, r0
 8000ad0:	61bb      	str	r3, [r7, #24]
    if (cmdqtail==NULL) return LIBSWD_ERROR_QUEUE;
 8000ad2:	69bb      	ldr	r3, [r7, #24]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d102      	bne.n	8000ade <libswd_bus_read_ack+0x64>
 8000ad8:	230b      	movs	r3, #11
 8000ada:	425b      	negs	r3, r3
 8000adc:	e080      	b.n	8000be0 <libswd_bus_read_ack+0x166>
    if (cmdqtail->prev3==NULL) return LIBSWD_ERROR_ACKORDER;
 8000ade:	69bb      	ldr	r3, [r7, #24]
 8000ae0:	68db      	ldr	r3, [r3, #12]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d102      	bne.n	8000aec <libswd_bus_read_ack+0x72>
 8000ae6:	2317      	movs	r3, #23
 8000ae8:	425b      	negs	r3, r3
 8000aea:	e079      	b.n	8000be0 <libswd_bus_read_ack+0x166>
    /* Check if there is REQ->TRN sequence at the command queue tail. */
    if (cmdqtail->prev3->cmdtype!=LIBSWD_CMDTYPE_MOSI_REQUEST
 8000aec:	69bb      	ldr	r3, [r7, #24]
 8000aee:	68db      	ldr	r3, [r3, #12]
 8000af0:	7a5b      	ldrb	r3, [r3, #9]
 8000af2:	b25b      	sxtb	r3, r3
 8000af4:	3306      	adds	r3, #6
 8000af6:	d019      	beq.n	8000b2c <libswd_bus_read_ack+0xb2>
        && cmdqtail->cmdtype!=LIBSWD_CMDTYPE_MISO_TRN){
 8000af8:	69bb      	ldr	r3, [r7, #24]
 8000afa:	7a5b      	ldrb	r3, [r3, #9]
 8000afc:	b25b      	sxtb	r3, r3
 8000afe:	2b05      	cmp	r3, #5
 8000b00:	d014      	beq.n	8000b2c <libswd_bus_read_ack+0xb2>
            /* If not, there should be at least REQ. */
            if (cmdqtail->cmdtype!=LIBSWD_CMDTYPE_MOSI_REQUEST){
 8000b02:	69bb      	ldr	r3, [r7, #24]
 8000b04:	7a5b      	ldrb	r3, [r3, #9]
 8000b06:	b25b      	sxtb	r3, r3
 8000b08:	3306      	adds	r3, #6
 8000b0a:	d002      	beq.n	8000b12 <libswd_bus_read_ack+0x98>
                return LIBSWD_ERROR_ACKORDER;
 8000b0c:	2317      	movs	r3, #23
 8000b0e:	425b      	negs	r3, r3
 8000b10:	e066      	b.n	8000be0 <libswd_bus_read_ack+0x166>
            } else {
                /* TRN was found at queue tail, so we need to append TRN_MISO command. */
                res=libswd_bus_setdir_miso(libswdctx);
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	0018      	movs	r0, r3
 8000b16:	f7ff fe7d 	bl	8000814 <libswd_bus_setdir_miso>
 8000b1a:	0003      	movs	r3, r0
 8000b1c:	617b      	str	r3, [r7, #20]
                if (res<0) return res;
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	da01      	bge.n	8000b28 <libswd_bus_read_ack+0xae>
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	e05b      	b.n	8000be0 <libswd_bus_read_ack+0x166>
                qcmdcnt=+res;
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	623b      	str	r3, [r7, #32]
            }
        }
    
    res=libswd_cmd_enqueue_miso_ack(libswdctx, ack);
 8000b2c:	687a      	ldr	r2, [r7, #4]
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	0011      	movs	r1, r2
 8000b32:	0018      	movs	r0, r3
 8000b34:	f000 fbb2 	bl	800129c <libswd_cmd_enqueue_miso_ack>
 8000b38:	0003      	movs	r3, r0
 8000b3a:	617b      	str	r3, [r7, #20]
    if (res<0) return res;
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	da01      	bge.n	8000b46 <libswd_bus_read_ack+0xcc>
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	e04c      	b.n	8000be0 <libswd_bus_read_ack+0x166>
    qcmdcnt=+res;
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	623b      	str	r3, [r7, #32]
    
    if (operation==LIBSWD_OPERATION_ENQUEUE){
 8000b4a:	230b      	movs	r3, #11
 8000b4c:	18fb      	adds	r3, r7, r3
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	2b01      	cmp	r3, #1
 8000b52:	d101      	bne.n	8000b58 <libswd_bus_read_ack+0xde>
        return qcmdcnt;
 8000b54:	6a3b      	ldr	r3, [r7, #32]
 8000b56:	e043      	b.n	8000be0 <libswd_bus_read_ack+0x166>
    } else if (operation==LIBSWD_OPERATION_EXECUTE){
 8000b58:	220b      	movs	r2, #11
 8000b5a:	18bb      	adds	r3, r7, r2
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	2b02      	cmp	r3, #2
 8000b60:	d115      	bne.n	8000b8e <libswd_bus_read_ack+0x114>
        res=libswd_cmdq_flush(libswdctx, &libswdctx->cmdq, operation);
 8000b62:	68f9      	ldr	r1, [r7, #12]
 8000b64:	18bb      	adds	r3, r7, r2
 8000b66:	781a      	ldrb	r2, [r3, #0]
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	0018      	movs	r0, r3
 8000b6c:	f000 fe64 	bl	8001838 <libswd_cmdq_flush>
 8000b70:	0003      	movs	r3, r0
 8000b72:	617b      	str	r3, [r7, #20]
        if (res<0) return res;
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	da01      	bge.n	8000b7e <libswd_bus_read_ack+0x104>
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	e030      	b.n	8000be0 <libswd_bus_read_ack+0x166>
        tcmdcnt+=res;
 8000b7e:	69fa      	ldr	r2, [r7, #28]
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	18d3      	adds	r3, r2, r3
 8000b84:	61fb      	str	r3, [r7, #28]
    } else return LIBSWD_ERROR_BADOPCODE;
    
    /* Now verify the read result and return/pass error code if necessary. */
    
    /* Use temporary queue pointer for context queue operations.*/
    tmpcmdq=libswdctx->cmdq;
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	627b      	str	r3, [r7, #36]	; 0x24
    /* Search backward for ACK command on the queue (ack we have just appended). */
    while (tmpcmdq->cmdtype!=LIBSWD_CMDTYPE_MISO_ACK){
 8000b8c:	e00c      	b.n	8000ba8 <libswd_bus_read_ack+0x12e>
    } else return LIBSWD_ERROR_BADOPCODE;
 8000b8e:	2318      	movs	r3, #24
 8000b90:	425b      	negs	r3, r3
 8000b92:	e025      	b.n	8000be0 <libswd_bus_read_ack+0x166>
        if (tmpcmdq->prev3==NULL) return LIBSWD_ERROR_ACKMISSING;
 8000b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b96:	68db      	ldr	r3, [r3, #12]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d102      	bne.n	8000ba2 <libswd_bus_read_ack+0x128>
 8000b9c:	2315      	movs	r3, #21
 8000b9e:	425b      	negs	r3, r3
 8000ba0:	e01e      	b.n	8000be0 <libswd_bus_read_ack+0x166>
        tmpcmdq=tmpcmdq->prev3;
 8000ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ba4:	68db      	ldr	r3, [r3, #12]
 8000ba6:	627b      	str	r3, [r7, #36]	; 0x24
    while (tmpcmdq->cmdtype!=LIBSWD_CMDTYPE_MISO_ACK){
 8000ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000baa:	7a5b      	ldrb	r3, [r3, #9]
 8000bac:	b25b      	sxtb	r3, r3
 8000bae:	2b02      	cmp	r3, #2
 8000bb0:	d1f0      	bne.n	8000b94 <libswd_bus_read_ack+0x11a>
    }
    /* If command was found and executed, read received ACK code, or error code. */
    if (tmpcmdq->cmdtype==LIBSWD_CMDTYPE_MISO_ACK && tmpcmdq->done){
 8000bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb4:	7a5b      	ldrb	r3, [r3, #9]
 8000bb6:	b25b      	sxtb	r3, r3
 8000bb8:	2b02      	cmp	r3, #2
 8000bba:	d10f      	bne.n	8000bdc <libswd_bus_read_ack+0x162>
 8000bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bbe:	7a9b      	ldrb	r3, [r3, #10]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d00b      	beq.n	8000bdc <libswd_bus_read_ack+0x162>
        /* Verify data address found on the queue, with pointer selected before run.*/
        if (tmpcmdq->ack_p!=ack) return LIBSWD_ERROR_ACKMISMATCH;
 8000bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	687a      	ldr	r2, [r7, #4]
 8000bca:	429a      	cmp	r2, r3
 8000bcc:	d002      	beq.n	8000bd4 <libswd_bus_read_ack+0x15a>
 8000bce:	2316      	movs	r3, #22
 8000bd0:	425b      	negs	r3, r3
 8000bd2:	e005      	b.n	8000be0 <libswd_bus_read_ack+0x166>
        return qcmdcnt+tcmdcnt;
 8000bd4:	6a3a      	ldr	r2, [r7, #32]
 8000bd6:	69fb      	ldr	r3, [r7, #28]
 8000bd8:	18d3      	adds	r3, r2, r3
 8000bda:	e001      	b.n	8000be0 <libswd_bus_read_ack+0x166>
    } else return LIBSWD_ERROR_ACKNOTDONE;
 8000bdc:	2314      	movs	r3, #20
 8000bde:	425b      	negs	r3, r3
}
 8000be0:	0018      	movs	r0, r3
 8000be2:	46bd      	mov	sp, r7
 8000be4:	b00a      	add	sp, #40	; 0x28
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <libswd_bus_write_data_p>:
* \param *data payload value pointer.
* \param *parity payload parity value pointer.
* \return number of elements processed, or LIBSWD_ERROR_CODE on failure.
*/
int libswd_bus_write_data_p
(libswd_ctx_t *libswdctx, libswd_operation_t operation, int data, char parity){
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b088      	sub	sp, #32
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	60f8      	str	r0, [r7, #12]
 8000bf0:	0008      	movs	r0, r1
 8000bf2:	607a      	str	r2, [r7, #4]
 8000bf4:	0019      	movs	r1, r3
 8000bf6:	230b      	movs	r3, #11
 8000bf8:	18fb      	adds	r3, r7, r3
 8000bfa:	1c02      	adds	r2, r0, #0
 8000bfc:	701a      	strb	r2, [r3, #0]
 8000bfe:	230a      	movs	r3, #10
 8000c00:	18fb      	adds	r3, r7, r3
 8000c02:	1c0a      	adds	r2, r1, #0
 8000c04:	701a      	strb	r2, [r3, #0]
    if (libswdctx==NULL) return LIBSWD_ERROR_NULLCONTEXT;
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d102      	bne.n	8000c12 <libswd_bus_write_data_p+0x2a>
 8000c0c:	230a      	movs	r3, #10
 8000c0e:	425b      	negs	r3, r3
 8000c10:	e04f      	b.n	8000cb2 <libswd_bus_write_data_p+0xca>
    if (operation!=LIBSWD_OPERATION_ENQUEUE && operation!=LIBSWD_OPERATION_EXECUTE)
 8000c12:	220b      	movs	r2, #11
 8000c14:	18bb      	adds	r3, r7, r2
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d006      	beq.n	8000c2a <libswd_bus_write_data_p+0x42>
 8000c1c:	18bb      	adds	r3, r7, r2
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	2b02      	cmp	r3, #2
 8000c22:	d002      	beq.n	8000c2a <libswd_bus_write_data_p+0x42>
        return LIBSWD_ERROR_BADOPCODE;
 8000c24:	2318      	movs	r3, #24
 8000c26:	425b      	negs	r3, r3
 8000c28:	e043      	b.n	8000cb2 <libswd_bus_write_data_p+0xca>
    
    int res, qcmdcnt=0, tcmdcnt=0;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61fb      	str	r3, [r7, #28]
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61bb      	str	r3, [r7, #24]
    
    res=libswd_bus_setdir_mosi(libswdctx);
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	0018      	movs	r0, r3
 8000c36:	f7ff fdb9 	bl	80007ac <libswd_bus_setdir_mosi>
 8000c3a:	0003      	movs	r3, r0
 8000c3c:	617b      	str	r3, [r7, #20]
    if (res<0) return res;
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	da01      	bge.n	8000c48 <libswd_bus_write_data_p+0x60>
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	e034      	b.n	8000cb2 <libswd_bus_write_data_p+0xca>
    qcmdcnt=+res;
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	61fb      	str	r3, [r7, #28]
    
    res=libswd_cmd_enqueue_mosi_data_p(libswdctx, data, parity);
 8000c4c:	230a      	movs	r3, #10
 8000c4e:	18fb      	adds	r3, r7, r3
 8000c50:	781a      	ldrb	r2, [r3, #0]
 8000c52:	6879      	ldr	r1, [r7, #4]
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	0018      	movs	r0, r3
 8000c58:	f000 faed 	bl	8001236 <libswd_cmd_enqueue_mosi_data_p>
 8000c5c:	0003      	movs	r3, r0
 8000c5e:	617b      	str	r3, [r7, #20]
    if (res<0) return res;
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	da01      	bge.n	8000c6a <libswd_bus_write_data_p+0x82>
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	e023      	b.n	8000cb2 <libswd_bus_write_data_p+0xca>
    qcmdcnt=+res;
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	61fb      	str	r3, [r7, #28]
    
    if (operation==LIBSWD_OPERATION_ENQUEUE){
 8000c6e:	230b      	movs	r3, #11
 8000c70:	18fb      	adds	r3, r7, r3
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	d101      	bne.n	8000c7c <libswd_bus_write_data_p+0x94>
        return qcmdcnt;
 8000c78:	69fb      	ldr	r3, [r7, #28]
 8000c7a:	e01a      	b.n	8000cb2 <libswd_bus_write_data_p+0xca>
    } else if (operation==LIBSWD_OPERATION_EXECUTE){
 8000c7c:	220b      	movs	r2, #11
 8000c7e:	18bb      	adds	r3, r7, r2
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	2b02      	cmp	r3, #2
 8000c84:	d113      	bne.n	8000cae <libswd_bus_write_data_p+0xc6>
        res=libswd_cmdq_flush(libswdctx, &libswdctx->cmdq, operation);
 8000c86:	68f9      	ldr	r1, [r7, #12]
 8000c88:	18bb      	adds	r3, r7, r2
 8000c8a:	781a      	ldrb	r2, [r3, #0]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	0018      	movs	r0, r3
 8000c90:	f000 fdd2 	bl	8001838 <libswd_cmdq_flush>
 8000c94:	0003      	movs	r3, r0
 8000c96:	617b      	str	r3, [r7, #20]
        if (res<0) return res;
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	da01      	bge.n	8000ca2 <libswd_bus_write_data_p+0xba>
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	e007      	b.n	8000cb2 <libswd_bus_write_data_p+0xca>
        tcmdcnt=+res;
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	61bb      	str	r3, [r7, #24]
        return qcmdcnt+tcmdcnt;
 8000ca6:	69fa      	ldr	r2, [r7, #28]
 8000ca8:	69bb      	ldr	r3, [r7, #24]
 8000caa:	18d3      	adds	r3, r2, r3
 8000cac:	e001      	b.n	8000cb2 <libswd_bus_write_data_p+0xca>
    } else return LIBSWD_ERROR_BADOPCODE;
 8000cae:	2318      	movs	r3, #24
 8000cb0:	425b      	negs	r3, r3
}
 8000cb2:	0018      	movs	r0, r3
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	b008      	add	sp, #32
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <libswd_bus_write_data_ap>:
* \param *libswdctx swd context pointer.
* \param operation type of action to perform on generated command.
* \param *data payload value pointer.
* \return number of elements processed, or LIBSWD_ERROR_CODE on failure.
*/
int libswd_bus_write_data_ap(libswd_ctx_t *libswdctx, libswd_operation_t operation, int data){
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b088      	sub	sp, #32
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	60f8      	str	r0, [r7, #12]
 8000cc2:	607a      	str	r2, [r7, #4]
 8000cc4:	230b      	movs	r3, #11
 8000cc6:	18fb      	adds	r3, r7, r3
 8000cc8:	1c0a      	adds	r2, r1, #0
 8000cca:	701a      	strb	r2, [r3, #0]
    if (libswdctx==NULL) return LIBSWD_ERROR_NULLCONTEXT;
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d102      	bne.n	8000cd8 <libswd_bus_write_data_ap+0x1e>
 8000cd2:	230a      	movs	r3, #10
 8000cd4:	425b      	negs	r3, r3
 8000cd6:	e04d      	b.n	8000d74 <libswd_bus_write_data_ap+0xba>
    if (operation!=LIBSWD_OPERATION_ENQUEUE && operation!=LIBSWD_OPERATION_EXECUTE)
 8000cd8:	220b      	movs	r2, #11
 8000cda:	18bb      	adds	r3, r7, r2
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d006      	beq.n	8000cf0 <libswd_bus_write_data_ap+0x36>
 8000ce2:	18bb      	adds	r3, r7, r2
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	2b02      	cmp	r3, #2
 8000ce8:	d002      	beq.n	8000cf0 <libswd_bus_write_data_ap+0x36>
        return LIBSWD_ERROR_BADOPCODE;
 8000cea:	2318      	movs	r3, #24
 8000cec:	425b      	negs	r3, r3
 8000cee:	e041      	b.n	8000d74 <libswd_bus_write_data_ap+0xba>
    
    int res, qcmdcnt=0, tcmdcnt=0;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	61fb      	str	r3, [r7, #28]
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	61bb      	str	r3, [r7, #24]
    
    res=libswd_bus_setdir_mosi(libswdctx);
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	f7ff fd56 	bl	80007ac <libswd_bus_setdir_mosi>
 8000d00:	0003      	movs	r3, r0
 8000d02:	617b      	str	r3, [r7, #20]
    if (res<0) return res;
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	da01      	bge.n	8000d0e <libswd_bus_write_data_ap+0x54>
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	e032      	b.n	8000d74 <libswd_bus_write_data_ap+0xba>
    qcmdcnt=+res;
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	61fb      	str	r3, [r7, #28]
    
    res=libswd_cmd_enqueue_mosi_data_ap(libswdctx, data);
 8000d12:	687a      	ldr	r2, [r7, #4]
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	0011      	movs	r1, r2
 8000d18:	0018      	movs	r0, r3
 8000d1a:	f000 fa4c 	bl	80011b6 <libswd_cmd_enqueue_mosi_data_ap>
 8000d1e:	0003      	movs	r3, r0
 8000d20:	617b      	str	r3, [r7, #20]
    if (res<0) return res;
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	da01      	bge.n	8000d2c <libswd_bus_write_data_ap+0x72>
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	e023      	b.n	8000d74 <libswd_bus_write_data_ap+0xba>
    qcmdcnt=+res;
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	61fb      	str	r3, [r7, #28]
    
    if (operation==LIBSWD_OPERATION_ENQUEUE){
 8000d30:	230b      	movs	r3, #11
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d101      	bne.n	8000d3e <libswd_bus_write_data_ap+0x84>
        return qcmdcnt;
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	e01a      	b.n	8000d74 <libswd_bus_write_data_ap+0xba>
    } else if (operation==LIBSWD_OPERATION_EXECUTE) {
 8000d3e:	220b      	movs	r2, #11
 8000d40:	18bb      	adds	r3, r7, r2
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	2b02      	cmp	r3, #2
 8000d46:	d113      	bne.n	8000d70 <libswd_bus_write_data_ap+0xb6>
        res=libswd_cmdq_flush(libswdctx, &libswdctx->cmdq, operation);
 8000d48:	68f9      	ldr	r1, [r7, #12]
 8000d4a:	18bb      	adds	r3, r7, r2
 8000d4c:	781a      	ldrb	r2, [r3, #0]
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	0018      	movs	r0, r3
 8000d52:	f000 fd71 	bl	8001838 <libswd_cmdq_flush>
 8000d56:	0003      	movs	r3, r0
 8000d58:	617b      	str	r3, [r7, #20]
        if (res<0) return res;
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	da01      	bge.n	8000d64 <libswd_bus_write_data_ap+0xaa>
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	e007      	b.n	8000d74 <libswd_bus_write_data_ap+0xba>
        tcmdcnt=+res;
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	61bb      	str	r3, [r7, #24]
        return qcmdcnt+tcmdcnt;
 8000d68:	69fa      	ldr	r2, [r7, #28]
 8000d6a:	69bb      	ldr	r3, [r7, #24]
 8000d6c:	18d3      	adds	r3, r2, r3
 8000d6e:	e001      	b.n	8000d74 <libswd_bus_write_data_ap+0xba>
    } else return LIBSWD_ERROR_BADOPCODE;
 8000d70:	2318      	movs	r3, #24
 8000d72:	425b      	negs	r3, r3
}
 8000d74:	0018      	movs	r0, r3
 8000d76:	46bd      	mov	sp, r7
 8000d78:	b008      	add	sp, #32
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <libswd_bus_read_data_p>:
* \param operation type of action to perform on generated command.
* \param *data payload value pointer.
* \param *parity payload parity value pointer.
* \return number of elements processed, or LIBSWD_ERROR_CODE on failure.
*/
int libswd_bus_read_data_p(libswd_ctx_t *libswdctx, libswd_operation_t operation, int *data, char *parity){
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b088      	sub	sp, #32
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	60f8      	str	r0, [r7, #12]
 8000d84:	607a      	str	r2, [r7, #4]
 8000d86:	603b      	str	r3, [r7, #0]
 8000d88:	230b      	movs	r3, #11
 8000d8a:	18fb      	adds	r3, r7, r3
 8000d8c:	1c0a      	adds	r2, r1, #0
 8000d8e:	701a      	strb	r2, [r3, #0]
    if (libswdctx==NULL) return LIBSWD_ERROR_NULLCONTEXT;
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d102      	bne.n	8000d9c <libswd_bus_read_data_p+0x20>
 8000d96:	230a      	movs	r3, #10
 8000d98:	425b      	negs	r3, r3
 8000d9a:	e095      	b.n	8000ec8 <libswd_bus_read_data_p+0x14c>
    if (operation!=LIBSWD_OPERATION_ENQUEUE && operation!=LIBSWD_OPERATION_EXECUTE)
 8000d9c:	220b      	movs	r2, #11
 8000d9e:	18bb      	adds	r3, r7, r2
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d006      	beq.n	8000db4 <libswd_bus_read_data_p+0x38>
 8000da6:	18bb      	adds	r3, r7, r2
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	2b02      	cmp	r3, #2
 8000dac:	d002      	beq.n	8000db4 <libswd_bus_read_data_p+0x38>
        return LIBSWD_ERROR_BADOPCODE;
 8000dae:	2318      	movs	r3, #24
 8000db0:	425b      	negs	r3, r3
 8000db2:	e089      	b.n	8000ec8 <libswd_bus_read_data_p+0x14c>
    
    int res, qcmdcnt=0, tcmdcnt=0;
 8000db4:	2300      	movs	r3, #0
 8000db6:	61bb      	str	r3, [r7, #24]
 8000db8:	2300      	movs	r3, #0
 8000dba:	617b      	str	r3, [r7, #20]
    libswd_cmd_t *tmpcmdq;
    
    res=libswd_bus_setdir_miso(libswdctx);
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	0018      	movs	r0, r3
 8000dc0:	f7ff fd28 	bl	8000814 <libswd_bus_setdir_miso>
 8000dc4:	0003      	movs	r3, r0
 8000dc6:	613b      	str	r3, [r7, #16]
    if (res<0) return res;
 8000dc8:	693b      	ldr	r3, [r7, #16]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	da01      	bge.n	8000dd2 <libswd_bus_read_data_p+0x56>
 8000dce:	693b      	ldr	r3, [r7, #16]
 8000dd0:	e07a      	b.n	8000ec8 <libswd_bus_read_data_p+0x14c>
    qcmdcnt=+res;
 8000dd2:	693b      	ldr	r3, [r7, #16]
 8000dd4:	61bb      	str	r3, [r7, #24]
    
    res=libswd_cmd_enqueue_miso_data_p(libswdctx, data, parity);
 8000dd6:	683a      	ldr	r2, [r7, #0]
 8000dd8:	6879      	ldr	r1, [r7, #4]
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	0018      	movs	r0, r3
 8000dde:	f000 f98e 	bl	80010fe <libswd_cmd_enqueue_miso_data_p>
 8000de2:	0003      	movs	r3, r0
 8000de4:	613b      	str	r3, [r7, #16]
    if (res<0) return res;
 8000de6:	693b      	ldr	r3, [r7, #16]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	da01      	bge.n	8000df0 <libswd_bus_read_data_p+0x74>
 8000dec:	693b      	ldr	r3, [r7, #16]
 8000dee:	e06b      	b.n	8000ec8 <libswd_bus_read_data_p+0x14c>
    qcmdcnt=+res;
 8000df0:	693b      	ldr	r3, [r7, #16]
 8000df2:	61bb      	str	r3, [r7, #24]
    
    if (operation==LIBSWD_OPERATION_ENQUEUE){
 8000df4:	230b      	movs	r3, #11
 8000df6:	18fb      	adds	r3, r7, r3
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d101      	bne.n	8000e02 <libswd_bus_read_data_p+0x86>
        return qcmdcnt;
 8000dfe:	69bb      	ldr	r3, [r7, #24]
 8000e00:	e062      	b.n	8000ec8 <libswd_bus_read_data_p+0x14c>
    } else if (operation==LIBSWD_OPERATION_EXECUTE){
 8000e02:	220b      	movs	r2, #11
 8000e04:	18bb      	adds	r3, r7, r2
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	2b02      	cmp	r3, #2
 8000e0a:	d115      	bne.n	8000e38 <libswd_bus_read_data_p+0xbc>
        res=libswd_cmdq_flush(libswdctx, &libswdctx->cmdq, operation);
 8000e0c:	68f9      	ldr	r1, [r7, #12]
 8000e0e:	18bb      	adds	r3, r7, r2
 8000e10:	781a      	ldrb	r2, [r3, #0]
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	0018      	movs	r0, r3
 8000e16:	f000 fd0f 	bl	8001838 <libswd_cmdq_flush>
 8000e1a:	0003      	movs	r3, r0
 8000e1c:	613b      	str	r3, [r7, #16]
        if (res<2) return res;
 8000e1e:	693b      	ldr	r3, [r7, #16]
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	dc01      	bgt.n	8000e28 <libswd_bus_read_data_p+0xac>
 8000e24:	693b      	ldr	r3, [r7, #16]
 8000e26:	e04f      	b.n	8000ec8 <libswd_bus_read_data_p+0x14c>
        tcmdcnt+=res;
 8000e28:	697a      	ldr	r2, [r7, #20]
 8000e2a:	693b      	ldr	r3, [r7, #16]
 8000e2c:	18d3      	adds	r3, r2, r3
 8000e2e:	617b      	str	r3, [r7, #20]
    
    /* Now verify the read result and return error if necessary.
    * Maybe iterative approach should be applied, not only last elemnt found..? */
    
    /* Use temporary queue pointer for context queue operations.*/
    tmpcmdq=libswdctx->cmdq;
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	61fb      	str	r3, [r7, #28]
    /* Search backward for our MISO_DATA command on the queue. */
    while (tmpcmdq->cmdtype!=LIBSWD_CMDTYPE_MISO_DATA){
 8000e36:	e00c      	b.n	8000e52 <libswd_bus_read_data_p+0xd6>
    } else return LIBSWD_ERROR_BADOPCODE;
 8000e38:	2318      	movs	r3, #24
 8000e3a:	425b      	negs	r3, r3
 8000e3c:	e044      	b.n	8000ec8 <libswd_bus_read_data_p+0x14c>
        if (tmpcmdq->prev3==NULL) return LIBSWD_ERROR_NODATACMD;
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	68db      	ldr	r3, [r3, #12]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d102      	bne.n	8000e4c <libswd_bus_read_data_p+0xd0>
 8000e46:	2319      	movs	r3, #25
 8000e48:	425b      	negs	r3, r3
 8000e4a:	e03d      	b.n	8000ec8 <libswd_bus_read_data_p+0x14c>
        tmpcmdq=tmpcmdq->prev3;
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	61fb      	str	r3, [r7, #28]
    while (tmpcmdq->cmdtype!=LIBSWD_CMDTYPE_MISO_DATA){
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	7a5b      	ldrb	r3, [r3, #9]
 8000e56:	b25b      	sxtb	r3, r3
 8000e58:	2b06      	cmp	r3, #6
 8000e5a:	d1f0      	bne.n	8000e3e <libswd_bus_read_data_p+0xc2>
    }
    /* There should be parity bit (command) just after data (command). */
    if (tmpcmdq->next3->cmdtype!=LIBSWD_CMDTYPE_MISO_PARITY)
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	691b      	ldr	r3, [r3, #16]
 8000e60:	7a5b      	ldrb	r3, [r3, #9]
 8000e62:	b25b      	sxtb	r3, r3
 8000e64:	2b04      	cmp	r3, #4
 8000e66:	d002      	beq.n	8000e6e <libswd_bus_read_data_p+0xf2>
        return LIBSWD_ERROR_NOPARITYCMD;
 8000e68:	231b      	movs	r3, #27
 8000e6a:	425b      	negs	r3, r3
 8000e6c:	e02c      	b.n	8000ec8 <libswd_bus_read_data_p+0x14c>
    /* If command found and executed, verify if data points to correct address. */
    if (tmpcmdq->cmdtype==LIBSWD_CMDTYPE_MISO_DATA && tmpcmdq->done){
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	7a5b      	ldrb	r3, [r3, #9]
 8000e72:	b25b      	sxtb	r3, r3
 8000e74:	2b06      	cmp	r3, #6
 8000e76:	d126      	bne.n	8000ec6 <libswd_bus_read_data_p+0x14a>
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	7a9b      	ldrb	r3, [r3, #10]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d022      	beq.n	8000ec6 <libswd_bus_read_data_p+0x14a>
        if (tmpcmdq->next3->cmdtype==LIBSWD_CMDTYPE_MISO_PARITY && tmpcmdq->next3->done){
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	691b      	ldr	r3, [r3, #16]
 8000e84:	7a5b      	ldrb	r3, [r3, #9]
 8000e86:	b25b      	sxtb	r3, r3
 8000e88:	2b04      	cmp	r3, #4
 8000e8a:	d119      	bne.n	8000ec0 <libswd_bus_read_data_p+0x144>
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	691b      	ldr	r3, [r3, #16]
 8000e90:	7a9b      	ldrb	r3, [r3, #10]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d014      	beq.n	8000ec0 <libswd_bus_read_data_p+0x144>
            if (data!=tmpcmdq->misodata_p) return LIBSWD_ERROR_DATAPTR;
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	687a      	ldr	r2, [r7, #4]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	d002      	beq.n	8000ea6 <libswd_bus_read_data_p+0x12a>
 8000ea0:	231a      	movs	r3, #26
 8000ea2:	425b      	negs	r3, r3
 8000ea4:	e010      	b.n	8000ec8 <libswd_bus_read_data_p+0x14c>
            if (parity!=tmpcmdq->next3->misoparity_p) return LIBSWD_ERROR_PARITYPTR;
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	691b      	ldr	r3, [r3, #16]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	683a      	ldr	r2, [r7, #0]
 8000eae:	429a      	cmp	r2, r3
 8000eb0:	d002      	beq.n	8000eb8 <libswd_bus_read_data_p+0x13c>
 8000eb2:	231c      	movs	r3, #28
 8000eb4:	425b      	negs	r3, r3
 8000eb6:	e007      	b.n	8000ec8 <libswd_bus_read_data_p+0x14c>
            return qcmdcnt+tcmdcnt;
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	18d3      	adds	r3, r2, r3
 8000ebe:	e003      	b.n	8000ec8 <libswd_bus_read_data_p+0x14c>
        } else return LIBSWD_ERROR_NOTDONE;
 8000ec0:	231d      	movs	r3, #29
 8000ec2:	425b      	negs	r3, r3
 8000ec4:	e000      	b.n	8000ec8 <libswd_bus_read_data_p+0x14c>
    }
    return LIBSWD_OK;
 8000ec6:	2300      	movs	r3, #0
}
 8000ec8:	0018      	movs	r0, r3
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	b008      	add	sp, #32
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <libswd_cmd_enqueue>:
* \param *libswdctx swd context pointer containing the command queue.
* \param *cmd command to be appended to the context's command queue.
* \return number of elements appended or LIBSWD_ERROR_CODE on failure.
*/
int libswd_cmd_enqueue(libswd_ctx_t *libswdctx, libswd_cmd_t *cmd)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	6039      	str	r1, [r7, #0]
    if (libswdctx == NULL || cmd == NULL) 
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d002      	beq.n	8000ee6 <libswd_cmd_enqueue+0x16>
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d102      	bne.n	8000eec <libswd_cmd_enqueue+0x1c>
    {
        return LIBSWD_ERROR_NULLPOINTER;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	425b      	negs	r3, r3
 8000eea:	e009      	b.n	8000f00 <libswd_cmd_enqueue+0x30>
    }
    int res=libswd_cmdq_append(libswdctx->cmdq, cmd);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	683a      	ldr	r2, [r7, #0]
 8000ef2:	0011      	movs	r1, r2
 8000ef4:	0018      	movs	r0, r3
 8000ef6:	f000 fbdb 	bl	80016b0 <libswd_cmdq_append>
 8000efa:	0003      	movs	r3, r0
 8000efc:	60fb      	str	r3, [r7, #12]
    return res;
 8000efe:	68fb      	ldr	r3, [r7, #12]
}
 8000f00:	0018      	movs	r0, r3
 8000f02:	46bd      	mov	sp, r7
 8000f04:	b004      	add	sp, #16
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <libswd_cmd_enqueue_mosi_request>:
* \param *libswdctx swd context pointer.
* \param *request pointer to the 8-bit request payload.
* \return return number elements appended (1), or LIBSWD_ERROR_CODE on failure.
*/
int libswd_cmd_enqueue_mosi_request(libswd_ctx_t *libswdctx, char request)
{
 8000f08:	b590      	push	{r4, r7, lr}
 8000f0a:	b089      	sub	sp, #36	; 0x24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	000a      	movs	r2, r1
 8000f12:	1cfb      	adds	r3, r7, #3
 8000f14:	701a      	strb	r2, [r3, #0]
    if (libswdctx == NULL)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d102      	bne.n	8000f22 <libswd_cmd_enqueue_mosi_request+0x1a>
    {
        return LIBSWD_ERROR_NULLCONTEXT;
 8000f1c:	230a      	movs	r3, #10
 8000f1e:	425b      	negs	r3, r3
 8000f20:	e018      	b.n	8000f54 <libswd_cmd_enqueue_mosi_request+0x4c>
    }
        
    libswd_cmd_t cmd;
    memset(&cmd, 0, sizeof(libswd_cmd_t));
 8000f22:	240c      	movs	r4, #12
 8000f24:	193b      	adds	r3, r7, r4
 8000f26:	2214      	movs	r2, #20
 8000f28:	2100      	movs	r1, #0
 8000f2a:	0018      	movs	r0, r3
 8000f2c:	f006 ffdd 	bl	8007eea <memset>
    
    cmd.request = request;
 8000f30:	0021      	movs	r1, r4
 8000f32:	187b      	adds	r3, r7, r1
 8000f34:	1cfa      	adds	r2, r7, #3
 8000f36:	7812      	ldrb	r2, [r2, #0]
 8000f38:	701a      	strb	r2, [r3, #0]
    cmd.bits = LIBSWD_REQUEST_BITLEN;
 8000f3a:	187b      	adds	r3, r7, r1
 8000f3c:	2208      	movs	r2, #8
 8000f3e:	721a      	strb	r2, [r3, #8]
    cmd.cmdtype = LIBSWD_CMDTYPE_MOSI_REQUEST;
 8000f40:	187b      	adds	r3, r7, r1
 8000f42:	22fa      	movs	r2, #250	; 0xfa
 8000f44:	725a      	strb	r2, [r3, #9]
    return libswd_cmd_enqueue(libswdctx, &cmd);
 8000f46:	187a      	adds	r2, r7, r1
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	0011      	movs	r1, r2
 8000f4c:	0018      	movs	r0, r3
 8000f4e:	f7ff ffbf 	bl	8000ed0 <libswd_cmd_enqueue>
 8000f52:	0003      	movs	r3, r0
}
 8000f54:	0018      	movs	r0, r3
 8000f56:	46bd      	mov	sp, r7
 8000f58:	b009      	add	sp, #36	; 0x24
 8000f5a:	bd90      	pop	{r4, r7, pc}

08000f5c <libswd_cmd_enqueue_mosi_trn>:
/** Append command queue with Turnaround activating MOSI mode.
* \param *libswdctx swd context pointer.
* \return return number elements appended (1), or LIBSWD_ERROR_CODE on failure.
*/
int libswd_cmd_enqueue_mosi_trn(libswd_ctx_t *libswdctx)
{
 8000f5c:	b590      	push	{r4, r7, lr}
 8000f5e:	b089      	sub	sp, #36	; 0x24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
    if (libswdctx == NULL)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d102      	bne.n	8000f70 <libswd_cmd_enqueue_mosi_trn+0x14>
    {
        return LIBSWD_ERROR_NULLCONTEXT;
 8000f6a:	230a      	movs	r3, #10
 8000f6c:	425b      	negs	r3, r3
 8000f6e:	e018      	b.n	8000fa2 <libswd_cmd_enqueue_mosi_trn+0x46>
    }
    
    libswd_cmd_t cmd;
    memset(&cmd, 0, sizeof(libswd_cmd_t));
 8000f70:	240c      	movs	r4, #12
 8000f72:	193b      	adds	r3, r7, r4
 8000f74:	2214      	movs	r2, #20
 8000f76:	2100      	movs	r1, #0
 8000f78:	0018      	movs	r0, r3
 8000f7a:	f006 ffb6 	bl	8007eea <memset>
    
    cmd.TRNnMOSI = 0;
 8000f7e:	0021      	movs	r1, r4
 8000f80:	187b      	adds	r3, r7, r1
 8000f82:	2200      	movs	r2, #0
 8000f84:	701a      	strb	r2, [r3, #0]
    cmd.bits = libswdctx->config.trnlen;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	795a      	ldrb	r2, [r3, #5]
 8000f8a:	187b      	adds	r3, r7, r1
 8000f8c:	721a      	strb	r2, [r3, #8]
    cmd.cmdtype = LIBSWD_CMDTYPE_MOSI_TRN;
 8000f8e:	187b      	adds	r3, r7, r1
 8000f90:	22fb      	movs	r2, #251	; 0xfb
 8000f92:	725a      	strb	r2, [r3, #9]
    return libswd_cmd_enqueue(libswdctx, &cmd);
 8000f94:	187a      	adds	r2, r7, r1
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	0011      	movs	r1, r2
 8000f9a:	0018      	movs	r0, r3
 8000f9c:	f7ff ff98 	bl	8000ed0 <libswd_cmd_enqueue>
 8000fa0:	0003      	movs	r3, r0
}
 8000fa2:	0018      	movs	r0, r3
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	b009      	add	sp, #36	; 0x24
 8000fa8:	bd90      	pop	{r4, r7, pc}

08000faa <libswd_cmd_enqueue_miso_trn>:
/** Append command queue with Turnaround activating MISO mode.
* \param *libswdctx swd context pointer.
* \return return number of elements appended (1), or LIBSWD_ERROR_CODE on failure.
*/
int libswd_cmd_enqueue_miso_trn(libswd_ctx_t *libswdctx)
{
 8000faa:	b590      	push	{r4, r7, lr}
 8000fac:	b089      	sub	sp, #36	; 0x24
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
    if (libswdctx == NULL)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d102      	bne.n	8000fbe <libswd_cmd_enqueue_miso_trn+0x14>
    {
        return LIBSWD_ERROR_NULLCONTEXT;
 8000fb8:	230a      	movs	r3, #10
 8000fba:	425b      	negs	r3, r3
 8000fbc:	e018      	b.n	8000ff0 <libswd_cmd_enqueue_miso_trn+0x46>
    }
    
    libswd_cmd_t cmd;
    memset(&cmd, 0, sizeof(libswd_cmd_t));
 8000fbe:	240c      	movs	r4, #12
 8000fc0:	193b      	adds	r3, r7, r4
 8000fc2:	2214      	movs	r2, #20
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	0018      	movs	r0, r3
 8000fc8:	f006 ff8f 	bl	8007eea <memset>
    
    cmd.TRNnMOSI = 1;
 8000fcc:	0021      	movs	r1, r4
 8000fce:	187b      	adds	r3, r7, r1
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	701a      	strb	r2, [r3, #0]
    cmd.bits = libswdctx->config.trnlen;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	795a      	ldrb	r2, [r3, #5]
 8000fd8:	187b      	adds	r3, r7, r1
 8000fda:	721a      	strb	r2, [r3, #8]
    cmd.cmdtype = LIBSWD_CMDTYPE_MISO_TRN;
 8000fdc:	187b      	adds	r3, r7, r1
 8000fde:	2205      	movs	r2, #5
 8000fe0:	725a      	strb	r2, [r3, #9]
    return libswd_cmd_enqueue(libswdctx, &cmd);
 8000fe2:	187a      	adds	r2, r7, r1
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	0011      	movs	r1, r2
 8000fe8:	0018      	movs	r0, r3
 8000fea:	f7ff ff71 	bl	8000ed0 <libswd_cmd_enqueue>
 8000fee:	0003      	movs	r3, r0
}
 8000ff0:	0018      	movs	r0, r3
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	b009      	add	sp, #36	; 0x24
 8000ff6:	bd90      	pop	{r4, r7, pc}

08000ff8 <libswd_cmd_enqueue_mosi_parity>:
* \param *libswdctx swd context pointer.
* \param *parity parity value pointer.
* \return number of elements appended (1), or LIBSWD_ERROR_CODE on failure.
*/
int libswd_cmd_enqueue_mosi_parity(libswd_ctx_t *libswdctx, char parity)
{
 8000ff8:	b590      	push	{r4, r7, lr}
 8000ffa:	b089      	sub	sp, #36	; 0x24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	000a      	movs	r2, r1
 8001002:	1cfb      	adds	r3, r7, #3
 8001004:	701a      	strb	r2, [r3, #0]
    if (libswdctx == NULL)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d102      	bne.n	8001012 <libswd_cmd_enqueue_mosi_parity+0x1a>
    {
        return LIBSWD_ERROR_NULLCONTEXT;
 800100c:	230a      	movs	r3, #10
 800100e:	425b      	negs	r3, r3
 8001010:	e023      	b.n	800105a <libswd_cmd_enqueue_mosi_parity+0x62>
    }
    if (parity != 0 && parity != 1) 
 8001012:	1cfb      	adds	r3, r7, #3
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d006      	beq.n	8001028 <libswd_cmd_enqueue_mosi_parity+0x30>
 800101a:	1cfb      	adds	r3, r7, #3
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	2b01      	cmp	r3, #1
 8001020:	d002      	beq.n	8001028 <libswd_cmd_enqueue_mosi_parity+0x30>
    {
        return LIBSWD_ERROR_PARAM;
 8001022:	2305      	movs	r3, #5
 8001024:	425b      	negs	r3, r3
 8001026:	e018      	b.n	800105a <libswd_cmd_enqueue_mosi_parity+0x62>
    }
        
    libswd_cmd_t cmd;
    memset(&cmd, 0, sizeof(libswd_cmd_t));
 8001028:	240c      	movs	r4, #12
 800102a:	193b      	adds	r3, r7, r4
 800102c:	2214      	movs	r2, #20
 800102e:	2100      	movs	r1, #0
 8001030:	0018      	movs	r0, r3
 8001032:	f006 ff5a 	bl	8007eea <memset>
    
    cmd.mosiparity = parity;
 8001036:	0021      	movs	r1, r4
 8001038:	187b      	adds	r3, r7, r1
 800103a:	1cfa      	adds	r2, r7, #3
 800103c:	7812      	ldrb	r2, [r2, #0]
 800103e:	701a      	strb	r2, [r3, #0]
    cmd.bits = 1;
 8001040:	187b      	adds	r3, r7, r1
 8001042:	2201      	movs	r2, #1
 8001044:	721a      	strb	r2, [r3, #8]
    cmd.cmdtype = LIBSWD_CMDTYPE_MOSI_PARITY;
 8001046:	187b      	adds	r3, r7, r1
 8001048:	22fc      	movs	r2, #252	; 0xfc
 800104a:	725a      	strb	r2, [r3, #9]
    return libswd_cmd_enqueue(libswdctx, &cmd);
 800104c:	187a      	adds	r2, r7, r1
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	0011      	movs	r1, r2
 8001052:	0018      	movs	r0, r3
 8001054:	f7ff ff3c 	bl	8000ed0 <libswd_cmd_enqueue>
 8001058:	0003      	movs	r3, r0
}
 800105a:	0018      	movs	r0, r3
 800105c:	46bd      	mov	sp, r7
 800105e:	b009      	add	sp, #36	; 0x24
 8001060:	bd90      	pop	{r4, r7, pc}

08001062 <libswd_cmd_enqueue_miso_parity>:
* \param *libswdctx swd context pointer.
* \param *parity parity value pointer.
* \return number of elements appended (1), or LIBSWD_ERROR_CODE on failure.
*/
int libswd_cmd_enqueue_miso_parity(libswd_ctx_t *libswdctx, char *parity)
{
 8001062:	b590      	push	{r4, r7, lr}
 8001064:	b089      	sub	sp, #36	; 0x24
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
 800106a:	6039      	str	r1, [r7, #0]
    if (libswdctx == NULL)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d102      	bne.n	8001078 <libswd_cmd_enqueue_miso_parity+0x16>
    {
        return LIBSWD_ERROR_NULLCONTEXT;
 8001072:	230a      	movs	r3, #10
 8001074:	425b      	negs	r3, r3
 8001076:	e017      	b.n	80010a8 <libswd_cmd_enqueue_miso_parity+0x46>
    }
    libswd_cmd_t cmd;
    memset(&cmd, 0, sizeof(libswd_cmd_t));
 8001078:	240c      	movs	r4, #12
 800107a:	193b      	adds	r3, r7, r4
 800107c:	2214      	movs	r2, #20
 800107e:	2100      	movs	r1, #0
 8001080:	0018      	movs	r0, r3
 8001082:	f006 ff32 	bl	8007eea <memset>
    
    cmd.misoparity_p = parity;
 8001086:	0021      	movs	r1, r4
 8001088:	187b      	adds	r3, r7, r1
 800108a:	683a      	ldr	r2, [r7, #0]
 800108c:	605a      	str	r2, [r3, #4]
    cmd.bits = 1;
 800108e:	187b      	adds	r3, r7, r1
 8001090:	2201      	movs	r2, #1
 8001092:	721a      	strb	r2, [r3, #8]
    cmd.cmdtype = LIBSWD_CMDTYPE_MISO_PARITY;
 8001094:	187b      	adds	r3, r7, r1
 8001096:	2204      	movs	r2, #4
 8001098:	725a      	strb	r2, [r3, #9]
    return libswd_cmd_enqueue(libswdctx, &cmd);
 800109a:	187a      	adds	r2, r7, r1
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	0011      	movs	r1, r2
 80010a0:	0018      	movs	r0, r3
 80010a2:	f7ff ff15 	bl	8000ed0 <libswd_cmd_enqueue>
 80010a6:	0003      	movs	r3, r0
}
 80010a8:	0018      	movs	r0, r3
 80010aa:	46bd      	mov	sp, r7
 80010ac:	b009      	add	sp, #36	; 0x24
 80010ae:	bd90      	pop	{r4, r7, pc}

080010b0 <libswd_cmd_enqueue_miso_data>:
* \param *libswdctx swd context pointer.
* \param *data data pointer.
* \return of elements appended (1), or LIBSWD_ERROR_CODE on failure.
*/
int libswd_cmd_enqueue_miso_data(libswd_ctx_t *libswdctx, int *data)
{
 80010b0:	b590      	push	{r4, r7, lr}
 80010b2:	b089      	sub	sp, #36	; 0x24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]
    if (libswdctx == NULL)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d102      	bne.n	80010c6 <libswd_cmd_enqueue_miso_data+0x16>
    {
        return LIBSWD_ERROR_NULLCONTEXT;
 80010c0:	230a      	movs	r3, #10
 80010c2:	425b      	negs	r3, r3
 80010c4:	e017      	b.n	80010f6 <libswd_cmd_enqueue_miso_data+0x46>
    }
    libswd_cmd_t cmd;
    memset(&cmd, 0, sizeof(libswd_cmd_t));
 80010c6:	240c      	movs	r4, #12
 80010c8:	193b      	adds	r3, r7, r4
 80010ca:	2214      	movs	r2, #20
 80010cc:	2100      	movs	r1, #0
 80010ce:	0018      	movs	r0, r3
 80010d0:	f006 ff0b 	bl	8007eea <memset>
    
    cmd.misodata_p = data;
 80010d4:	0021      	movs	r1, r4
 80010d6:	187b      	adds	r3, r7, r1
 80010d8:	683a      	ldr	r2, [r7, #0]
 80010da:	605a      	str	r2, [r3, #4]
    cmd.bits = 32;
 80010dc:	187b      	adds	r3, r7, r1
 80010de:	2220      	movs	r2, #32
 80010e0:	721a      	strb	r2, [r3, #8]
    cmd.cmdtype = LIBSWD_CMDTYPE_MISO_DATA;
 80010e2:	187b      	adds	r3, r7, r1
 80010e4:	2206      	movs	r2, #6
 80010e6:	725a      	strb	r2, [r3, #9]
    return libswd_cmd_enqueue(libswdctx, &cmd); // should be 1 on success
 80010e8:	187a      	adds	r2, r7, r1
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	0011      	movs	r1, r2
 80010ee:	0018      	movs	r0, r3
 80010f0:	f7ff feee 	bl	8000ed0 <libswd_cmd_enqueue>
 80010f4:	0003      	movs	r3, r0
}
 80010f6:	0018      	movs	r0, r3
 80010f8:	46bd      	mov	sp, r7
 80010fa:	b009      	add	sp, #36	; 0x24
 80010fc:	bd90      	pop	{r4, r7, pc}

080010fe <libswd_cmd_enqueue_miso_data_p>:
* \param *data data value pointer.
* \param *parity parity value pointer.
* \return number of elements appended (2), or LIBSWD_ERROR_CODE on failure.
*/
int libswd_cmd_enqueue_miso_data_p(libswd_ctx_t *libswdctx, int *data, char *parity)
{
 80010fe:	b580      	push	{r7, lr}
 8001100:	b086      	sub	sp, #24
 8001102:	af00      	add	r7, sp, #0
 8001104:	60f8      	str	r0, [r7, #12]
 8001106:	60b9      	str	r1, [r7, #8]
 8001108:	607a      	str	r2, [r7, #4]
    if (libswdctx==NULL) 
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d102      	bne.n	8001116 <libswd_cmd_enqueue_miso_data_p+0x18>
    {
        return LIBSWD_ERROR_NULLCONTEXT;
 8001110:	230a      	movs	r3, #10
 8001112:	425b      	negs	r3, r3
 8001114:	e024      	b.n	8001160 <libswd_cmd_enqueue_miso_data_p+0x62>
    }
    int cmdcnt = 0;
 8001116:	2300      	movs	r3, #0
 8001118:	617b      	str	r3, [r7, #20]
    int res = libswd_cmd_enqueue_miso_data(libswdctx, data);
 800111a:	68ba      	ldr	r2, [r7, #8]
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	0011      	movs	r1, r2
 8001120:	0018      	movs	r0, r3
 8001122:	f7ff ffc5 	bl	80010b0 <libswd_cmd_enqueue_miso_data>
 8001126:	0003      	movs	r3, r0
 8001128:	613b      	str	r3, [r7, #16]
    if (res < 1) 
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	2b00      	cmp	r3, #0
 800112e:	dc01      	bgt.n	8001134 <libswd_cmd_enqueue_miso_data_p+0x36>
    {
        return res;
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	e015      	b.n	8001160 <libswd_cmd_enqueue_miso_data_p+0x62>
    }
    cmdcnt += res;
 8001134:	697a      	ldr	r2, [r7, #20]
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	18d3      	adds	r3, r2, r3
 800113a:	617b      	str	r3, [r7, #20]
    res = libswd_cmd_enqueue_miso_parity(libswdctx, parity);
 800113c:	687a      	ldr	r2, [r7, #4]
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	0011      	movs	r1, r2
 8001142:	0018      	movs	r0, r3
 8001144:	f7ff ff8d 	bl	8001062 <libswd_cmd_enqueue_miso_parity>
 8001148:	0003      	movs	r3, r0
 800114a:	613b      	str	r3, [r7, #16]
    if (res < 1)
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	2b00      	cmp	r3, #0
 8001150:	dc01      	bgt.n	8001156 <libswd_cmd_enqueue_miso_data_p+0x58>
    {
        return res;
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	e004      	b.n	8001160 <libswd_cmd_enqueue_miso_data_p+0x62>
    }
    cmdcnt += res;
 8001156:	697a      	ldr	r2, [r7, #20]
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	18d3      	adds	r3, r2, r3
 800115c:	617b      	str	r3, [r7, #20]
    return cmdcnt; // should be 2 or 3(+trn) on success
 800115e:	697b      	ldr	r3, [r7, #20]
}
 8001160:	0018      	movs	r0, r3
 8001162:	46bd      	mov	sp, r7
 8001164:	b006      	add	sp, #24
 8001166:	bd80      	pop	{r7, pc}

08001168 <libswd_cmd_enqueue_mosi_data>:
* \param *libswdctx swd context pointer.
* \param *data data value pointer.
* \return number of elements appended (1), or LIBSWD_ERROR_CODE on failure.
*/
int libswd_cmd_enqueue_mosi_data(libswd_ctx_t *libswdctx, int data)
{
 8001168:	b590      	push	{r4, r7, lr}
 800116a:	b089      	sub	sp, #36	; 0x24
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	6039      	str	r1, [r7, #0]
    if (libswdctx == NULL)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d102      	bne.n	800117e <libswd_cmd_enqueue_mosi_data+0x16>
    {
        return LIBSWD_ERROR_NULLCONTEXT;
 8001178:	230a      	movs	r3, #10
 800117a:	425b      	negs	r3, r3
 800117c:	e017      	b.n	80011ae <libswd_cmd_enqueue_mosi_data+0x46>
    }
    libswd_cmd_t cmd;
    memset(&cmd, 0, sizeof(libswd_cmd_t));
 800117e:	240c      	movs	r4, #12
 8001180:	193b      	adds	r3, r7, r4
 8001182:	2214      	movs	r2, #20
 8001184:	2100      	movs	r1, #0
 8001186:	0018      	movs	r0, r3
 8001188:	f006 feaf 	bl	8007eea <memset>
    
    cmd.mosidata = data;
 800118c:	0021      	movs	r1, r4
 800118e:	187b      	adds	r3, r7, r1
 8001190:	683a      	ldr	r2, [r7, #0]
 8001192:	601a      	str	r2, [r3, #0]
    cmd.bits = 32;
 8001194:	187b      	adds	r3, r7, r1
 8001196:	2220      	movs	r2, #32
 8001198:	721a      	strb	r2, [r3, #8]
    cmd.cmdtype = LIBSWD_CMDTYPE_MOSI_DATA;
 800119a:	187b      	adds	r3, r7, r1
 800119c:	22f9      	movs	r2, #249	; 0xf9
 800119e:	725a      	strb	r2, [r3, #9]
    return libswd_cmd_enqueue(libswdctx, &cmd); // should be 1 or 2 on success
 80011a0:	187a      	adds	r2, r7, r1
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	0011      	movs	r1, r2
 80011a6:	0018      	movs	r0, r3
 80011a8:	f7ff fe92 	bl	8000ed0 <libswd_cmd_enqueue>
 80011ac:	0003      	movs	r3, r0
}
 80011ae:	0018      	movs	r0, r3
 80011b0:	46bd      	mov	sp, r7
 80011b2:	b009      	add	sp, #36	; 0x24
 80011b4:	bd90      	pop	{r4, r7, pc}

080011b6 <libswd_cmd_enqueue_mosi_data_ap>:
* \param *libswdctx swd context pointer.
* \param *data data value pointer.
* \return number of elements appended (2), or LIBSWD_ERROR_CODE on failure.
*/
int libswd_cmd_enqueue_mosi_data_ap(libswd_ctx_t *libswdctx, int data)
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b086      	sub	sp, #24
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
 80011be:	6039      	str	r1, [r7, #0]
    if (libswdctx==NULL)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d102      	bne.n	80011cc <libswd_cmd_enqueue_mosi_data_ap+0x16>
    {
        return LIBSWD_ERROR_NULLCONTEXT;
 80011c6:	230a      	movs	r3, #10
 80011c8:	425b      	negs	r3, r3
 80011ca:	e030      	b.n	800122e <libswd_cmd_enqueue_mosi_data_ap+0x78>
    }
    
    int cmdcnt = 0;
 80011cc:	2300      	movs	r3, #0
 80011ce:	617b      	str	r3, [r7, #20]
    int res = libswd_cmd_enqueue_mosi_data(libswdctx, data);
 80011d0:	683a      	ldr	r2, [r7, #0]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	0011      	movs	r1, r2
 80011d6:	0018      	movs	r0, r3
 80011d8:	f7ff ffc6 	bl	8001168 <libswd_cmd_enqueue_mosi_data>
 80011dc:	0003      	movs	r3, r0
 80011de:	613b      	str	r3, [r7, #16]
    if (res < 1)
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	dc01      	bgt.n	80011ea <libswd_cmd_enqueue_mosi_data_ap+0x34>
    {
        return res;
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	e021      	b.n	800122e <libswd_cmd_enqueue_mosi_data_ap+0x78>
    }
    cmdcnt =+ res;  // TBD PW
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	617b      	str	r3, [r7, #20]
    
    char parity;
    res = libswd_bin32_parity_even(data, &parity);
 80011ee:	230f      	movs	r3, #15
 80011f0:	18fa      	adds	r2, r7, r3
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	0011      	movs	r1, r2
 80011f6:	0018      	movs	r0, r3
 80011f8:	f7ff f9a1 	bl	800053e <libswd_bin32_parity_even>
 80011fc:	0003      	movs	r3, r0
 80011fe:	613b      	str	r3, [r7, #16]
    if (res < 0) 
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	2b00      	cmp	r3, #0
 8001204:	da01      	bge.n	800120a <libswd_cmd_enqueue_mosi_data_ap+0x54>
    {
        return res;
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	e011      	b.n	800122e <libswd_cmd_enqueue_mosi_data_ap+0x78>
    }
    res = libswd_cmd_enqueue_mosi_parity(libswdctx, parity);
 800120a:	230f      	movs	r3, #15
 800120c:	18fb      	adds	r3, r7, r3
 800120e:	781a      	ldrb	r2, [r3, #0]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	0011      	movs	r1, r2
 8001214:	0018      	movs	r0, r3
 8001216:	f7ff feef 	bl	8000ff8 <libswd_cmd_enqueue_mosi_parity>
 800121a:	0003      	movs	r3, r0
 800121c:	613b      	str	r3, [r7, #16]
    if (res < 1) 
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	2b00      	cmp	r3, #0
 8001222:	dc01      	bgt.n	8001228 <libswd_cmd_enqueue_mosi_data_ap+0x72>
    {
        return res;
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	e002      	b.n	800122e <libswd_cmd_enqueue_mosi_data_ap+0x78>
    }
    cmdcnt =+ res;  // TBD PW
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	617b      	str	r3, [r7, #20]
    return cmdcnt; // should be 2 or 3 on success
 800122c:	697b      	ldr	r3, [r7, #20]
}
 800122e:	0018      	movs	r0, r3
 8001230:	46bd      	mov	sp, r7
 8001232:	b006      	add	sp, #24
 8001234:	bd80      	pop	{r7, pc}

08001236 <libswd_cmd_enqueue_mosi_data_p>:
* \param *data data value pointer.
* \param *parity parity value pointer.
* \return number of elements appended (2), or LIBSWD_ERROR_CODE on failure.
*/
int libswd_cmd_enqueue_mosi_data_p(libswd_ctx_t *libswdctx, int data, char parity)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b086      	sub	sp, #24
 800123a:	af00      	add	r7, sp, #0
 800123c:	60f8      	str	r0, [r7, #12]
 800123e:	60b9      	str	r1, [r7, #8]
 8001240:	1dfb      	adds	r3, r7, #7
 8001242:	701a      	strb	r2, [r3, #0]
    if (libswdctx == NULL)
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d102      	bne.n	8001250 <libswd_cmd_enqueue_mosi_data_p+0x1a>
    {
        return LIBSWD_ERROR_NULLCONTEXT;
 800124a:	230a      	movs	r3, #10
 800124c:	425b      	negs	r3, r3
 800124e:	e021      	b.n	8001294 <libswd_cmd_enqueue_mosi_data_p+0x5e>
    }
    
    int cmdcnt = 0;
 8001250:	2300      	movs	r3, #0
 8001252:	617b      	str	r3, [r7, #20]
    int res = libswd_cmd_enqueue_mosi_data(libswdctx, data);
 8001254:	68ba      	ldr	r2, [r7, #8]
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	0011      	movs	r1, r2
 800125a:	0018      	movs	r0, r3
 800125c:	f7ff ff84 	bl	8001168 <libswd_cmd_enqueue_mosi_data>
 8001260:	0003      	movs	r3, r0
 8001262:	613b      	str	r3, [r7, #16]
    if (res < 1) 
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	2b00      	cmp	r3, #0
 8001268:	dc01      	bgt.n	800126e <libswd_cmd_enqueue_mosi_data_p+0x38>
    {
        return res;
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	e012      	b.n	8001294 <libswd_cmd_enqueue_mosi_data_p+0x5e>
    }
    cmdcnt =+ res;  // TBD PW
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	617b      	str	r3, [r7, #20]
    res = libswd_cmd_enqueue_mosi_parity(libswdctx, parity);
 8001272:	1dfb      	adds	r3, r7, #7
 8001274:	781a      	ldrb	r2, [r3, #0]
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	0011      	movs	r1, r2
 800127a:	0018      	movs	r0, r3
 800127c:	f7ff febc 	bl	8000ff8 <libswd_cmd_enqueue_mosi_parity>
 8001280:	0003      	movs	r3, r0
 8001282:	613b      	str	r3, [r7, #16]
    if (res < 1) 
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	2b00      	cmp	r3, #0
 8001288:	dc01      	bgt.n	800128e <libswd_cmd_enqueue_mosi_data_p+0x58>
    {
        return res;
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	e002      	b.n	8001294 <libswd_cmd_enqueue_mosi_data_p+0x5e>
    }
    cmdcnt =+ res;  // TBD PW
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	617b      	str	r3, [r7, #20]
    return cmdcnt; // should be 2 or 3 on success
 8001292:	697b      	ldr	r3, [r7, #20]
}
 8001294:	0018      	movs	r0, r3
 8001296:	46bd      	mov	sp, r7
 8001298:	b006      	add	sp, #24
 800129a:	bd80      	pop	{r7, pc}

0800129c <libswd_cmd_enqueue_miso_ack>:
* \param *libswdctx swd context pointer.
* \param *ack packet value pointer.
* \return number of elements appended (1), or LIBSWD_ERROR_CODE on failure.
*/
int libswd_cmd_enqueue_miso_ack(libswd_ctx_t *libswdctx, char *ack)
{
 800129c:	b590      	push	{r4, r7, lr}
 800129e:	b089      	sub	sp, #36	; 0x24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	6039      	str	r1, [r7, #0]
    if (libswdctx == NULL)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d102      	bne.n	80012b2 <libswd_cmd_enqueue_miso_ack+0x16>
    {
        return LIBSWD_ERROR_NULLCONTEXT;
 80012ac:	230a      	movs	r3, #10
 80012ae:	425b      	negs	r3, r3
 80012b0:	e017      	b.n	80012e2 <libswd_cmd_enqueue_miso_ack+0x46>
    }
    libswd_cmd_t cmd;
    memset(&cmd, 0, sizeof(libswd_cmd_t));
 80012b2:	240c      	movs	r4, #12
 80012b4:	193b      	adds	r3, r7, r4
 80012b6:	2214      	movs	r2, #20
 80012b8:	2100      	movs	r1, #0
 80012ba:	0018      	movs	r0, r3
 80012bc:	f006 fe15 	bl	8007eea <memset>
    
    cmd.ack_p = ack;
 80012c0:	0021      	movs	r1, r4
 80012c2:	187b      	adds	r3, r7, r1
 80012c4:	683a      	ldr	r2, [r7, #0]
 80012c6:	605a      	str	r2, [r3, #4]
    cmd.bits = LIBSWD_ACK_BITLEN;
 80012c8:	187b      	adds	r3, r7, r1
 80012ca:	2203      	movs	r2, #3
 80012cc:	721a      	strb	r2, [r3, #8]
    cmd.cmdtype = LIBSWD_CMDTYPE_MISO_ACK;
 80012ce:	187b      	adds	r3, r7, r1
 80012d0:	2202      	movs	r2, #2
 80012d2:	725a      	strb	r2, [r3, #9]
    return libswd_cmd_enqueue(libswdctx, &cmd); //should be 1 on success
 80012d4:	187a      	adds	r2, r7, r1
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	0011      	movs	r1, r2
 80012da:	0018      	movs	r0, r3
 80012dc:	f7ff fdf8 	bl	8000ed0 <libswd_cmd_enqueue>
 80012e0:	0003      	movs	r3, r0
}
 80012e2:	0018      	movs	r0, r3
 80012e4:	46bd      	mov	sp, r7
 80012e6:	b009      	add	sp, #36	; 0x24
 80012e8:	bd90      	pop	{r4, r7, pc}

080012ea <libswd_cmd_enqueue_mosi_control>:
* \param *ctlmsg control message array pointer.
* \param len number of elements to send from *ctlmsg.
* \return number of elements appended (len), or LIBSWD_ERROR_CODE on failure.
*/
int libswd_cmd_enqueue_mosi_control(libswd_ctx_t *libswdctx, char *ctlmsg, int len)
{
 80012ea:	b590      	push	{r4, r7, lr}
 80012ec:	b08f      	sub	sp, #60	; 0x3c
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	60f8      	str	r0, [r7, #12]
 80012f2:	60b9      	str	r1, [r7, #8]
 80012f4:	607a      	str	r2, [r7, #4]
    if (libswdctx == NULL) 
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d102      	bne.n	8001302 <libswd_cmd_enqueue_mosi_control+0x18>
    {
        return LIBSWD_ERROR_NULLCONTEXT;
 80012fc:	230a      	movs	r3, #10
 80012fe:	425b      	negs	r3, r3
 8001300:	e050      	b.n	80013a4 <libswd_cmd_enqueue_mosi_control+0xba>
    }
    if (ctlmsg == NULL) 
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d102      	bne.n	800130e <libswd_cmd_enqueue_mosi_control+0x24>
    {
        return LIBSWD_ERROR_NULLPOINTER;
 8001308:	2302      	movs	r3, #2
 800130a:	425b      	negs	r3, r3
 800130c:	e04a      	b.n	80013a4 <libswd_cmd_enqueue_mosi_control+0xba>
    }
    if (len <= 0)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2b00      	cmp	r3, #0
 8001312:	dc02      	bgt.n	800131a <libswd_cmd_enqueue_mosi_control+0x30>
    {
        return LIBSWD_ERROR_PARAM;
 8001314:	2305      	movs	r3, #5
 8001316:	425b      	negs	r3, r3
 8001318:	e044      	b.n	80013a4 <libswd_cmd_enqueue_mosi_control+0xba>
    }
    int res, cmdcnt = 0;
 800131a:	2300      	movs	r3, #0
 800131c:	633b      	str	r3, [r7, #48]	; 0x30
    libswd_cmd_t cmd;
    libswd_cmd_t *oldcmdq=libswdctx->cmdq;
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int elm=0;elm<len;elm++)
 8001324:	2300      	movs	r3, #0
 8001326:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001328:	e022      	b.n	8001370 <libswd_cmd_enqueue_mosi_control+0x86>
    {
        memset(&cmd, 0, sizeof(libswd_cmd_t));
 800132a:	2410      	movs	r4, #16
 800132c:	193b      	adds	r3, r7, r4
 800132e:	2214      	movs	r2, #20
 8001330:	2100      	movs	r1, #0
 8001332:	0018      	movs	r0, r3
 8001334:	f006 fdd9 	bl	8007eea <memset>
        cmd.control = ctlmsg[elm];
 8001338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800133a:	68ba      	ldr	r2, [r7, #8]
 800133c:	18d3      	adds	r3, r2, r3
 800133e:	781a      	ldrb	r2, [r3, #0]
 8001340:	193b      	adds	r3, r7, r4
 8001342:	701a      	strb	r2, [r3, #0]
        cmd.cmdtype = LIBSWD_CMDTYPE_MOSI_CONTROL;
 8001344:	193b      	adds	r3, r7, r4
 8001346:	22fe      	movs	r2, #254	; 0xfe
 8001348:	725a      	strb	r2, [r3, #9]
        cmd.bits = sizeof(ctlmsg[elm]) * LIBSWD_DATA_BYTESIZE;
 800134a:	193b      	adds	r3, r7, r4
 800134c:	2208      	movs	r2, #8
 800134e:	721a      	strb	r2, [r3, #8]
        res = libswd_cmd_enqueue(libswdctx, &cmd);
 8001350:	193a      	adds	r2, r7, r4
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	0011      	movs	r1, r2
 8001356:	0018      	movs	r0, r3
 8001358:	f7ff fdba 	bl	8000ed0 <libswd_cmd_enqueue>
 800135c:	0003      	movs	r3, r0
 800135e:	637b      	str	r3, [r7, #52]	; 0x34
        if (res < 1)
 8001360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001362:	2b00      	cmp	r3, #0
 8001364:	dd09      	ble.n	800137a <libswd_cmd_enqueue_mosi_control+0x90>
        {
            break;
        }
        cmdcnt =+ res;  // TBD PW
 8001366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001368:	633b      	str	r3, [r7, #48]	; 0x30
    for (int elm=0;elm<len;elm++)
 800136a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800136c:	3301      	adds	r3, #1
 800136e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001370:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	429a      	cmp	r2, r3
 8001376:	dbd8      	blt.n	800132a <libswd_cmd_enqueue_mosi_control+0x40>
 8001378:	e000      	b.n	800137c <libswd_cmd_enqueue_mosi_control+0x92>
            break;
 800137a:	46c0      	nop			; (mov r8, r8)
    }
    //If there was problem enqueueing elements, rollback changes on queue.
    if (res < 1)
 800137c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800137e:	2b00      	cmp	r3, #0
 8001380:	dc0f      	bgt.n	80013a2 <libswd_cmd_enqueue_mosi_control+0xb8>
    {
        int res2 = libswd_cmdq_free_tail(oldcmdq);
 8001382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001384:	0018      	movs	r0, r3
 8001386:	f000 fa1e 	bl	80017c6 <libswd_cmdq_free_tail>
 800138a:	0003      	movs	r3, r0
 800138c:	627b      	str	r3, [r7, #36]	; 0x24
        if (res2 < 0) 
 800138e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001390:	2b00      	cmp	r3, #0
 8001392:	da01      	bge.n	8001398 <libswd_cmd_enqueue_mosi_control+0xae>
        {
            return res2;
 8001394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001396:	e005      	b.n	80013a4 <libswd_cmd_enqueue_mosi_control+0xba>
        }
        libswdctx->cmdq = oldcmdq;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800139c:	601a      	str	r2, [r3, #0]
        return res;
 800139e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013a0:	e000      	b.n	80013a4 <libswd_cmd_enqueue_mosi_control+0xba>
    } 
    return cmdcnt;
 80013a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80013a4:	0018      	movs	r0, r3
 80013a6:	46bd      	mov	sp, r7
 80013a8:	b00f      	add	sp, #60	; 0x3c
 80013aa:	bd90      	pop	{r4, r7, pc}

080013ac <libswd_cmd_enqueue_mosi_dap_reset>:

/** Append command queue with SW-DP-RESET sequence.
* \param *libswdctx swd context pointer.
* \return number of elements appended, or LIBSWD_ERROR_CODE on failure.
*/
int libswd_cmd_enqueue_mosi_dap_reset(libswd_ctx_t *libswdctx){
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
    return libswd_cmd_enqueue_mosi_control(libswdctx, (char *)LIBSWD_CMD_SWDPRESET, sizeof(LIBSWD_CMD_SWDPRESET));
 80013b4:	4905      	ldr	r1, [pc, #20]	; (80013cc <libswd_cmd_enqueue_mosi_dap_reset+0x20>)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2209      	movs	r2, #9
 80013ba:	0018      	movs	r0, r3
 80013bc:	f7ff ff95 	bl	80012ea <libswd_cmd_enqueue_mosi_control>
 80013c0:	0003      	movs	r3, r0
}
 80013c2:	0018      	movs	r0, r3
 80013c4:	46bd      	mov	sp, r7
 80013c6:	b002      	add	sp, #8
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	46c0      	nop			; (mov r8, r8)
 80013cc:	0800bdec 	.word	0x0800bdec

080013d0 <libswd_cmd_enqueue_mosi_jtag2swd>:

/** Append command queue with JTAG-TO-SWD DAP-switch sequence.
* \param *libswdctx swd context pointer.
* \return number of elements appended, or LIBSWD_ERROR_CODE on failure.
*/
int libswd_cmd_enqueue_mosi_jtag2swd(libswd_ctx_t *libswdctx){
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
    return libswd_cmd_enqueue_mosi_control(libswdctx, (char *)LIBSWD_CMD_JTAG2SWD, sizeof(LIBSWD_CMD_JTAG2SWD));
 80013d8:	4905      	ldr	r1, [pc, #20]	; (80013f0 <libswd_cmd_enqueue_mosi_jtag2swd+0x20>)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	220a      	movs	r2, #10
 80013de:	0018      	movs	r0, r3
 80013e0:	f7ff ff83 	bl	80012ea <libswd_cmd_enqueue_mosi_control>
 80013e4:	0003      	movs	r3, r0
}
 80013e6:	0018      	movs	r0, r3
 80013e8:	46bd      	mov	sp, r7
 80013ea:	b002      	add	sp, #8
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	46c0      	nop			; (mov r8, r8)
 80013f0:	0800bdf8 	.word	0x0800bdf8

080013f4 <libswd_cmd_string_cmdtype>:

/** Return human readable command type string of *cmd.
* \param *cmd command the name is to be printed.
* \return string containing human readable command name, or NULL on failure.
*/
char *libswd_cmd_string_cmdtype(libswd_cmd_t *cmd){
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
    if (cmd==NULL) return NULL;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d101      	bne.n	8001406 <libswd_cmd_string_cmdtype+0x12>
 8001402:	2300      	movs	r3, #0
 8001404:	e027      	b.n	8001456 <libswd_cmd_string_cmdtype+0x62>
    switch (cmd->cmdtype){
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	7a5b      	ldrb	r3, [r3, #9]
 800140a:	b25b      	sxtb	r3, r3
 800140c:	3307      	adds	r3, #7
 800140e:	2b0d      	cmp	r3, #13
 8001410:	d820      	bhi.n	8001454 <libswd_cmd_string_cmdtype+0x60>
 8001412:	009a      	lsls	r2, r3, #2
 8001414:	4b12      	ldr	r3, [pc, #72]	; (8001460 <libswd_cmd_string_cmdtype+0x6c>)
 8001416:	18d3      	adds	r3, r2, r3
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	469f      	mov	pc, r3
    case LIBSWD_CMDTYPE_MOSI_DATA:    return "MOSI_DATA";
 800141c:	4b11      	ldr	r3, [pc, #68]	; (8001464 <libswd_cmd_string_cmdtype+0x70>)
 800141e:	e01a      	b.n	8001456 <libswd_cmd_string_cmdtype+0x62>
    case LIBSWD_CMDTYPE_MOSI_REQUEST: return "MOSI_REQUEST";
 8001420:	4b11      	ldr	r3, [pc, #68]	; (8001468 <libswd_cmd_string_cmdtype+0x74>)
 8001422:	e018      	b.n	8001456 <libswd_cmd_string_cmdtype+0x62>
    case LIBSWD_CMDTYPE_MOSI_TRN:     return "MOSI_TRN";
 8001424:	4b11      	ldr	r3, [pc, #68]	; (800146c <libswd_cmd_string_cmdtype+0x78>)
 8001426:	e016      	b.n	8001456 <libswd_cmd_string_cmdtype+0x62>
    case LIBSWD_CMDTYPE_MOSI_PARITY:  return "MOSI_PARITY";
 8001428:	4b11      	ldr	r3, [pc, #68]	; (8001470 <libswd_cmd_string_cmdtype+0x7c>)
 800142a:	e014      	b.n	8001456 <libswd_cmd_string_cmdtype+0x62>
    case LIBSWD_CMDTYPE_MOSI_BITBANG: return "MOSI_BITBANG";
 800142c:	4b11      	ldr	r3, [pc, #68]	; (8001474 <libswd_cmd_string_cmdtype+0x80>)
 800142e:	e012      	b.n	8001456 <libswd_cmd_string_cmdtype+0x62>
    case LIBSWD_CMDTYPE_MOSI_CONTROL: return "MOSI_CONTROL";
 8001430:	4b11      	ldr	r3, [pc, #68]	; (8001478 <libswd_cmd_string_cmdtype+0x84>)
 8001432:	e010      	b.n	8001456 <libswd_cmd_string_cmdtype+0x62>
    case LIBSWD_CMDTYPE_MOSI:         return "MOSI";
 8001434:	4b11      	ldr	r3, [pc, #68]	; (800147c <libswd_cmd_string_cmdtype+0x88>)
 8001436:	e00e      	b.n	8001456 <libswd_cmd_string_cmdtype+0x62>
    case LIBSWD_CMDTYPE_UNDEFINED:    return "UNDEFINED";
 8001438:	4b11      	ldr	r3, [pc, #68]	; (8001480 <libswd_cmd_string_cmdtype+0x8c>)
 800143a:	e00c      	b.n	8001456 <libswd_cmd_string_cmdtype+0x62>
    case LIBSWD_CMDTYPE_MISO:         return "MISO";
 800143c:	4b11      	ldr	r3, [pc, #68]	; (8001484 <libswd_cmd_string_cmdtype+0x90>)
 800143e:	e00a      	b.n	8001456 <libswd_cmd_string_cmdtype+0x62>
    case LIBSWD_CMDTYPE_MISO_ACK:     return "MISO_ACK";
 8001440:	4b11      	ldr	r3, [pc, #68]	; (8001488 <libswd_cmd_string_cmdtype+0x94>)
 8001442:	e008      	b.n	8001456 <libswd_cmd_string_cmdtype+0x62>
    case LIBSWD_CMDTYPE_MISO_BITBANG: return "MISO_BITBANG";
 8001444:	4b11      	ldr	r3, [pc, #68]	; (800148c <libswd_cmd_string_cmdtype+0x98>)
 8001446:	e006      	b.n	8001456 <libswd_cmd_string_cmdtype+0x62>
    case LIBSWD_CMDTYPE_MISO_PARITY:  return "MISO_PARITY";
 8001448:	4b11      	ldr	r3, [pc, #68]	; (8001490 <libswd_cmd_string_cmdtype+0x9c>)
 800144a:	e004      	b.n	8001456 <libswd_cmd_string_cmdtype+0x62>
    case LIBSWD_CMDTYPE_MISO_TRN:     return "MISO_TRN";
 800144c:	4b11      	ldr	r3, [pc, #68]	; (8001494 <libswd_cmd_string_cmdtype+0xa0>)
 800144e:	e002      	b.n	8001456 <libswd_cmd_string_cmdtype+0x62>
    case LIBSWD_CMDTYPE_MISO_DATA:    return "MISO_DATA";
 8001450:	4b11      	ldr	r3, [pc, #68]	; (8001498 <libswd_cmd_string_cmdtype+0xa4>)
 8001452:	e000      	b.n	8001456 <libswd_cmd_string_cmdtype+0x62>
    default: return "Unknown command type!";
 8001454:	4b11      	ldr	r3, [pc, #68]	; (800149c <libswd_cmd_string_cmdtype+0xa8>)
    }
}
 8001456:	0018      	movs	r0, r3
 8001458:	46bd      	mov	sp, r7
 800145a:	b002      	add	sp, #8
 800145c:	bd80      	pop	{r7, pc}
 800145e:	46c0      	nop			; (mov r8, r8)
 8001460:	0800be04 	.word	0x0800be04
 8001464:	08008f58 	.word	0x08008f58
 8001468:	08008f64 	.word	0x08008f64
 800146c:	08008f74 	.word	0x08008f74
 8001470:	08008f80 	.word	0x08008f80
 8001474:	08008f8c 	.word	0x08008f8c
 8001478:	08008f9c 	.word	0x08008f9c
 800147c:	08008fac 	.word	0x08008fac
 8001480:	08008fb4 	.word	0x08008fb4
 8001484:	08008fc0 	.word	0x08008fc0
 8001488:	08008fc8 	.word	0x08008fc8
 800148c:	08008fd4 	.word	0x08008fd4
 8001490:	08008fe4 	.word	0x08008fe4
 8001494:	08008ff0 	.word	0x08008ff0
 8001498:	08008ffc 	.word	0x08008ffc
 800149c:	08009008 	.word	0x08009008

080014a0 <libswd_cmdq_init_main>:
/** Initialize new queue element in memory that becomes a queue root.
* \param *cmdq pointer to the command queue element of type libswd_cmd_t
* \return LIBSWD_OK on success, LIBSWD_ERROR_CODE code on failure
*/
int libswd_cmdq_init_main(libswd_cmd_t *cmdq, int size)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]
    main_q = cmdq;
 80014aa:	4b0b      	ldr	r3, [pc, #44]	; (80014d8 <libswd_cmdq_init_main+0x38>)
 80014ac:	687a      	ldr	r2, [r7, #4]
 80014ae:	601a      	str	r2, [r3, #0]
    main_q_size = size;
 80014b0:	4b0a      	ldr	r3, [pc, #40]	; (80014dc <libswd_cmdq_init_main+0x3c>)
 80014b2:	683a      	ldr	r2, [r7, #0]
 80014b4:	601a      	str	r2, [r3, #0]
    memset(main_q, 0, sizeof(libswd_cmd_t) * size);
 80014b6:	4b08      	ldr	r3, [pc, #32]	; (80014d8 <libswd_cmdq_init_main+0x38>)
 80014b8:	6818      	ldr	r0, [r3, #0]
 80014ba:	683a      	ldr	r2, [r7, #0]
 80014bc:	0013      	movs	r3, r2
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	189b      	adds	r3, r3, r2
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	001a      	movs	r2, r3
 80014c6:	2100      	movs	r1, #0
 80014c8:	f006 fd0f 	bl	8007eea <memset>
    return LIBSWD_OK;
 80014cc:	2300      	movs	r3, #0
}
 80014ce:	0018      	movs	r0, r3
 80014d0:	46bd      	mov	sp, r7
 80014d2:	b002      	add	sp, #8
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	46c0      	nop			; (mov r8, r8)
 80014d8:	200000c8 	.word	0x200000c8
 80014dc:	20000000 	.word	0x20000000

080014e0 <libswd_cmdq_init_error>:

int libswd_cmdq_init_error(libswd_cmd_t *cmdq, int size)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	6039      	str	r1, [r7, #0]
    error_q = cmdq;
 80014ea:	4b0b      	ldr	r3, [pc, #44]	; (8001518 <libswd_cmdq_init_error+0x38>)
 80014ec:	687a      	ldr	r2, [r7, #4]
 80014ee:	601a      	str	r2, [r3, #0]
    error_q_size = size;
 80014f0:	4b0a      	ldr	r3, [pc, #40]	; (800151c <libswd_cmdq_init_error+0x3c>)
 80014f2:	683a      	ldr	r2, [r7, #0]
 80014f4:	601a      	str	r2, [r3, #0]
    memset(error_q, 0, sizeof(libswd_cmd_t) * size);
 80014f6:	4b08      	ldr	r3, [pc, #32]	; (8001518 <libswd_cmdq_init_error+0x38>)
 80014f8:	6818      	ldr	r0, [r3, #0]
 80014fa:	683a      	ldr	r2, [r7, #0]
 80014fc:	0013      	movs	r3, r2
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	189b      	adds	r3, r3, r2
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	001a      	movs	r2, r3
 8001506:	2100      	movs	r1, #0
 8001508:	f006 fcef 	bl	8007eea <memset>
    return LIBSWD_OK;
 800150c:	2300      	movs	r3, #0
}
 800150e:	0018      	movs	r0, r3
 8001510:	46bd      	mov	sp, r7
 8001512:	b002      	add	sp, #8
 8001514:	bd80      	pop	{r7, pc}
 8001516:	46c0      	nop			; (mov r8, r8)
 8001518:	200000cc 	.word	0x200000cc
 800151c:	20000004 	.word	0x20000004

08001520 <libswd_cmdq_find_head>:
/** Find queue root (first element).
* \param *cmdq pointer to any queue element
* \return libswd_cmd_t* pointer to the first element (root), NULL on failure
*/
libswd_cmd_t* libswd_cmdq_find_head(libswd_cmd_t *cmdq)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
    if (cmdq == NULL) 
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d101      	bne.n	8001532 <libswd_cmdq_find_head+0x12>
    {
        return NULL;
 800152e:	2300      	movs	r3, #0
 8001530:	e00a      	b.n	8001548 <libswd_cmdq_find_head+0x28>
    }
    libswd_cmd_t *cmd = cmdq;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	60fb      	str	r3, [r7, #12]
    while (cmd->prev3 != NULL) 
 8001536:	e002      	b.n	800153e <libswd_cmdq_find_head+0x1e>
    {
        cmd = cmd->prev3;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	60fb      	str	r3, [r7, #12]
    while (cmd->prev3 != NULL) 
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	68db      	ldr	r3, [r3, #12]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d1f8      	bne.n	8001538 <libswd_cmdq_find_head+0x18>
    }
    return cmd;
 8001546:	68fb      	ldr	r3, [r7, #12]
}
 8001548:	0018      	movs	r0, r3
 800154a:	46bd      	mov	sp, r7
 800154c:	b004      	add	sp, #16
 800154e:	bd80      	pop	{r7, pc}

08001550 <libswd_cmdq_find_tail>:
/** Find queue tail (last element).
* \param  *cmdq pointer to any queue element
* \return libswd_cmd_t* pointer to the last element (tail), NULL on failure
*/
libswd_cmd_t* libswd_cmdq_find_tail(libswd_cmd_t *cmdq)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
    if (cmdq == NULL) 
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d101      	bne.n	8001562 <libswd_cmdq_find_tail+0x12>
    {
        return NULL;
 800155e:	2300      	movs	r3, #0
 8001560:	e00a      	b.n	8001578 <libswd_cmdq_find_tail+0x28>
    }
    libswd_cmd_t *cmd = cmdq;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	60fb      	str	r3, [r7, #12]
    while (cmd->next3 != NULL) 
 8001566:	e002      	b.n	800156e <libswd_cmdq_find_tail+0x1e>
    {
        cmd = cmd->next3;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	691b      	ldr	r3, [r3, #16]
 800156c:	60fb      	str	r3, [r7, #12]
    while (cmd->next3 != NULL) 
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	691b      	ldr	r3, [r3, #16]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d1f8      	bne.n	8001568 <libswd_cmdq_find_tail+0x18>
    }
    return cmd;
 8001576:	68fb      	ldr	r3, [r7, #12]
}
 8001578:	0018      	movs	r0, r3
 800157a:	46bd      	mov	sp, r7
 800157c:	b004      	add	sp, #16
 800157e:	bd80      	pop	{r7, pc}

08001580 <libswd_cmdq_find_exectail>:
* Start search at *cmdq head, return element pointer or NULL if not found.
* \param *cmdq queue that contains elements.
* \return libswd_cmd_t* pointer to the last executed element or NULL on error.
*/
libswd_cmd_t* libswd_cmdq_find_exectail(libswd_cmd_t *cmdq)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
    if (cmdq == NULL) 
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d101      	bne.n	8001592 <libswd_cmdq_find_exectail+0x12>
    {
        return NULL;
 800158e:	2300      	movs	r3, #0
 8001590:	e029      	b.n	80015e6 <libswd_cmdq_find_exectail+0x66>
    }
    libswd_cmd_t *cmd = libswd_cmdq_find_head(cmdq);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	0018      	movs	r0, r3
 8001596:	f7ff ffc3 	bl	8001520 <libswd_cmdq_find_head>
 800159a:	0003      	movs	r3, r0
 800159c:	60fb      	str	r3, [r7, #12]
    if (cmd == NULL)
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d101      	bne.n	80015a8 <libswd_cmdq_find_exectail+0x28>
    {
        return NULL;
 80015a4:	2300      	movs	r3, #0
 80015a6:	e01e      	b.n	80015e6 <libswd_cmdq_find_exectail+0x66>
    }
    for (cmd = libswd_cmdq_find_head(cmdq); cmd; cmd = cmd->next3)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	0018      	movs	r0, r3
 80015ac:	f7ff ffb8 	bl	8001520 <libswd_cmdq_find_head>
 80015b0:	0003      	movs	r3, r0
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	e013      	b.n	80015de <libswd_cmdq_find_exectail+0x5e>
    {
        if (cmd->done) 
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	7a9b      	ldrb	r3, [r3, #10]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d00c      	beq.n	80015d8 <libswd_cmdq_find_exectail+0x58>
        {
            if (cmd->next3)
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	691b      	ldr	r3, [r3, #16]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d006      	beq.n	80015d4 <libswd_cmdq_find_exectail+0x54>
            {
                if (!cmd->next3->done) 
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	691b      	ldr	r3, [r3, #16]
 80015ca:	7a9b      	ldrb	r3, [r3, #10]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d103      	bne.n	80015d8 <libswd_cmdq_find_exectail+0x58>
                {
                    return cmd;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	e008      	b.n	80015e6 <libswd_cmdq_find_exectail+0x66>
                }
            } 
            else 
            {
                return cmd;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	e006      	b.n	80015e6 <libswd_cmdq_find_exectail+0x66>
    for (cmd = libswd_cmdq_find_head(cmdq); cmd; cmd = cmd->next3)
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	691b      	ldr	r3, [r3, #16]
 80015dc:	60fb      	str	r3, [r7, #12]
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d1e8      	bne.n	80015b6 <libswd_cmdq_find_exectail+0x36>
            }
        }
    }
    return NULL;
 80015e4:	2300      	movs	r3, #0
}
 80015e6:	0018      	movs	r0, r3
 80015e8:	46bd      	mov	sp, r7
 80015ea:	b004      	add	sp, #16
 80015ec:	bd80      	pop	{r7, pc}
	...

080015f0 <libswd_cmdq_get_next_mem_location>:

libswd_cmd_t * libswd_cmdq_get_next_mem_location(libswd_cmd_t *cmd)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
    if (main_q <= cmd && cmd < (main_q + main_q_size))
 80015f8:	4b29      	ldr	r3, [pc, #164]	; (80016a0 <libswd_cmdq_get_next_mem_location+0xb0>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	687a      	ldr	r2, [r7, #4]
 80015fe:	429a      	cmp	r2, r3
 8001600:	d321      	bcc.n	8001646 <libswd_cmdq_get_next_mem_location+0x56>
 8001602:	4b27      	ldr	r3, [pc, #156]	; (80016a0 <libswd_cmdq_get_next_mem_location+0xb0>)
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	4b27      	ldr	r3, [pc, #156]	; (80016a4 <libswd_cmdq_get_next_mem_location+0xb4>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	0019      	movs	r1, r3
 800160c:	000b      	movs	r3, r1
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	185b      	adds	r3, r3, r1
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	18d3      	adds	r3, r2, r3
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	429a      	cmp	r2, r3
 800161a:	d214      	bcs.n	8001646 <libswd_cmdq_get_next_mem_location+0x56>
    {
        cmd++;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	3314      	adds	r3, #20
 8001620:	607b      	str	r3, [r7, #4]
        if (cmd >= (main_q + main_q_size))
 8001622:	4b1f      	ldr	r3, [pc, #124]	; (80016a0 <libswd_cmdq_get_next_mem_location+0xb0>)
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	4b1f      	ldr	r3, [pc, #124]	; (80016a4 <libswd_cmdq_get_next_mem_location+0xb4>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	0019      	movs	r1, r3
 800162c:	000b      	movs	r3, r1
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	185b      	adds	r3, r3, r1
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	18d3      	adds	r3, r2, r3
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	429a      	cmp	r2, r3
 800163a:	d302      	bcc.n	8001642 <libswd_cmdq_get_next_mem_location+0x52>
        {
            /// roll back to start of the array
            cmd = main_q;
 800163c:	4b18      	ldr	r3, [pc, #96]	; (80016a0 <libswd_cmdq_get_next_mem_location+0xb0>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	607b      	str	r3, [r7, #4]
        }
        return cmd;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	e027      	b.n	8001696 <libswd_cmdq_get_next_mem_location+0xa6>
    }
    else if (error_q <= cmd && cmd < (error_q + error_q_size))
 8001646:	4b18      	ldr	r3, [pc, #96]	; (80016a8 <libswd_cmdq_get_next_mem_location+0xb8>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	429a      	cmp	r2, r3
 800164e:	d321      	bcc.n	8001694 <libswd_cmdq_get_next_mem_location+0xa4>
 8001650:	4b15      	ldr	r3, [pc, #84]	; (80016a8 <libswd_cmdq_get_next_mem_location+0xb8>)
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	4b15      	ldr	r3, [pc, #84]	; (80016ac <libswd_cmdq_get_next_mem_location+0xbc>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	0019      	movs	r1, r3
 800165a:	000b      	movs	r3, r1
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	185b      	adds	r3, r3, r1
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	18d3      	adds	r3, r2, r3
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	429a      	cmp	r2, r3
 8001668:	d214      	bcs.n	8001694 <libswd_cmdq_get_next_mem_location+0xa4>
    {
        cmd++;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	3314      	adds	r3, #20
 800166e:	607b      	str	r3, [r7, #4]
        if (cmd >= (error_q + error_q_size))
 8001670:	4b0d      	ldr	r3, [pc, #52]	; (80016a8 <libswd_cmdq_get_next_mem_location+0xb8>)
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	4b0d      	ldr	r3, [pc, #52]	; (80016ac <libswd_cmdq_get_next_mem_location+0xbc>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	0019      	movs	r1, r3
 800167a:	000b      	movs	r3, r1
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	185b      	adds	r3, r3, r1
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	18d3      	adds	r3, r2, r3
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	429a      	cmp	r2, r3
 8001688:	d302      	bcc.n	8001690 <libswd_cmdq_get_next_mem_location+0xa0>
        {
            /// roll back to start of the array
            cmd = error_q;
 800168a:	4b07      	ldr	r3, [pc, #28]	; (80016a8 <libswd_cmdq_get_next_mem_location+0xb8>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	607b      	str	r3, [r7, #4]
        }
        return cmd;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	e000      	b.n	8001696 <libswd_cmdq_get_next_mem_location+0xa6>
    }
    else 
    {
        // cmd not part of any allocated array
        return NULL;
 8001694:	2300      	movs	r3, #0
    }
}
 8001696:	0018      	movs	r0, r3
 8001698:	46bd      	mov	sp, r7
 800169a:	b002      	add	sp, #8
 800169c:	bd80      	pop	{r7, pc}
 800169e:	46c0      	nop			; (mov r8, r8)
 80016a0:	200000c8 	.word	0x200000c8
 80016a4:	20000000 	.word	0x20000000
 80016a8:	200000cc 	.word	0x200000cc
 80016ac:	20000004 	.word	0x20000004

080016b0 <libswd_cmdq_append>:
* \param *cmdq pointer to any element on command queue
* \param *cmd pointer to the command to be appended
* \return number of appended elements (one), LIBSWD_ERROR_CODE on failure
*/
int libswd_cmdq_append(libswd_cmd_t *cmdq, libswd_cmd_t *cmd)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b086      	sub	sp, #24
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6039      	str	r1, [r7, #0]
    if (cmdq == NULL) 
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d102      	bne.n	80016c6 <libswd_cmdq_append+0x16>
    {
        return LIBSWD_ERROR_NULLQUEUE;
 80016c0:	2303      	movs	r3, #3
 80016c2:	425b      	negs	r3, r3
 80016c4:	e041      	b.n	800174a <libswd_cmdq_append+0x9a>
    }
    if (cmd == NULL) 
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d102      	bne.n	80016d2 <libswd_cmdq_append+0x22>
    {
        return LIBSWD_ERROR_NULLPOINTER;
 80016cc:	2302      	movs	r3, #2
 80016ce:	425b      	negs	r3, r3
 80016d0:	e03b      	b.n	800174a <libswd_cmdq_append+0x9a>
    }
    
    libswd_cmd_t *lastcmd = (cmdq->next3 != NULL) ? libswd_cmdq_find_tail(cmdq) : cmdq;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	691b      	ldr	r3, [r3, #16]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d005      	beq.n	80016e6 <libswd_cmdq_append+0x36>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	0018      	movs	r0, r3
 80016de:	f7ff ff37 	bl	8001550 <libswd_cmdq_find_tail>
 80016e2:	0003      	movs	r3, r0
 80016e4:	e000      	b.n	80016e8 <libswd_cmdq_append+0x38>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	617b      	str	r3, [r7, #20]
    
    libswd_cmd_t *newcmd = libswd_cmdq_get_next_mem_location(lastcmd);
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	0018      	movs	r0, r3
 80016ee:	f7ff ff7f 	bl	80015f0 <libswd_cmdq_get_next_mem_location>
 80016f2:	0003      	movs	r3, r0
 80016f4:	613b      	str	r3, [r7, #16]
    if (newcmd == NULL) 
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d102      	bne.n	8001702 <libswd_cmdq_append+0x52>
    {
        return LIBSWD_ERROR_QUEUE;
 80016fc:	230b      	movs	r3, #11
 80016fe:	425b      	negs	r3, r3
 8001700:	e023      	b.n	800174a <libswd_cmdq_append+0x9a>
    }
    if (newcmd->next3 != NULL && !newcmd->done)
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	691b      	ldr	r3, [r3, #16]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d006      	beq.n	8001718 <libswd_cmdq_append+0x68>
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	7a9b      	ldrb	r3, [r3, #10]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d102      	bne.n	8001718 <libswd_cmdq_append+0x68>
    {
        /// item to be recycled has valid next (used) and not done
        return LIBSWD_ERROR_QUEUERECYCLE;
 8001712:	2331      	movs	r3, #49	; 0x31
 8001714:	425b      	negs	r3, r3
 8001716:	e018      	b.n	800174a <libswd_cmdq_append+0x9a>
    }
    /// copy data to new location
    memcpy(newcmd, cmd, sizeof(libswd_cmd_t));
 8001718:	6839      	ldr	r1, [r7, #0]
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	2214      	movs	r2, #20
 800171e:	0018      	movs	r0, r3
 8001720:	f006 fbda 	bl	8007ed8 <memcpy>
    
    lastcmd->next3=newcmd;
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	611a      	str	r2, [r3, #16]
    newcmd->prev3=lastcmd;
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	697a      	ldr	r2, [r7, #20]
 800172e:	60da      	str	r2, [r3, #12]
    newcmd->next3 = NULL;
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	2200      	movs	r2, #0
 8001734:	611a      	str	r2, [r3, #16]
    
    /// make new head
    libswd_cmd_t *head = libswd_cmdq_get_next_mem_location(newcmd);
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	0018      	movs	r0, r3
 800173a:	f7ff ff59 	bl	80015f0 <libswd_cmdq_get_next_mem_location>
 800173e:	0003      	movs	r3, r0
 8001740:	60fb      	str	r3, [r7, #12]
    head->prev3 = NULL;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	2200      	movs	r2, #0
 8001746:	60da      	str	r2, [r3, #12]
    
    return 1;
 8001748:	2301      	movs	r3, #1
}
 800174a:	0018      	movs	r0, r3
 800174c:	46bd      	mov	sp, r7
 800174e:	b006      	add	sp, #24
 8001750:	bd80      	pop	{r7, pc}
	...

08001754 <libswd_cmdq_free_main_queue>:
/** Free queue pointed by *cmdq element.
* \param *cmdq pointer to any element on command queue
* \return number of elements destroyed, LIBSWD_ERROR_CODE on failure
*/
int libswd_cmdq_free_main_queue(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
    main_q = NULL;
 8001758:	4b05      	ldr	r3, [pc, #20]	; (8001770 <libswd_cmdq_free_main_queue+0x1c>)
 800175a:	2200      	movs	r2, #0
 800175c:	601a      	str	r2, [r3, #0]
    main_q_size = -1;  
 800175e:	4b05      	ldr	r3, [pc, #20]	; (8001774 <libswd_cmdq_free_main_queue+0x20>)
 8001760:	2201      	movs	r2, #1
 8001762:	4252      	negs	r2, r2
 8001764:	601a      	str	r2, [r3, #0]
    return 1;
 8001766:	2301      	movs	r3, #1
}
 8001768:	0018      	movs	r0, r3
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	46c0      	nop			; (mov r8, r8)
 8001770:	200000c8 	.word	0x200000c8
 8001774:	20000000 	.word	0x20000000

08001778 <libswd_cmdq_free_error_queue>:

int libswd_cmdq_free_error_queue(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
    main_q = NULL;
 800177c:	4b05      	ldr	r3, [pc, #20]	; (8001794 <libswd_cmdq_free_error_queue+0x1c>)
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]
    main_q_size = -1;    
 8001782:	4b05      	ldr	r3, [pc, #20]	; (8001798 <libswd_cmdq_free_error_queue+0x20>)
 8001784:	2201      	movs	r2, #1
 8001786:	4252      	negs	r2, r2
 8001788:	601a      	str	r2, [r3, #0]
    return 1;
 800178a:	2301      	movs	r3, #1
}
 800178c:	0018      	movs	r0, r3
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	46c0      	nop			; (mov r8, r8)
 8001794:	200000c8 	.word	0x200000c8
 8001798:	20000000 	.word	0x20000000

0800179c <libswd_cmdq_free>:

int libswd_cmdq_free(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
    int res = libswd_cmdq_free_main_queue();
 80017a2:	f7ff ffd7 	bl	8001754 <libswd_cmdq_free_main_queue>
 80017a6:	0003      	movs	r3, r0
 80017a8:	607b      	str	r3, [r7, #4]
    if (res < 0) 
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	da01      	bge.n	80017b4 <libswd_cmdq_free+0x18>
    {
        return res;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	e004      	b.n	80017be <libswd_cmdq_free+0x22>
    }
    res = libswd_cmdq_free_error_queue();
 80017b4:	f7ff ffe0 	bl	8001778 <libswd_cmdq_free_error_queue>
 80017b8:	0003      	movs	r3, r0
 80017ba:	607b      	str	r3, [r7, #4]
    return res;
 80017bc:	687b      	ldr	r3, [r7, #4]
}
 80017be:	0018      	movs	r0, r3
 80017c0:	46bd      	mov	sp, r7
 80017c2:	b002      	add	sp, #8
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <libswd_cmdq_free_tail>:
/** Free queue tail starting after *cmdq element.
* \param *cmdq pointer to the last element on the new queue.
* \return number of elements destroyed, or LIBSWD_ERROR_CODE on failure.
*/
int libswd_cmdq_free_tail(libswd_cmd_t *cmdq)
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b084      	sub	sp, #16
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
    if (cmdq == NULL) 
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d102      	bne.n	80017da <libswd_cmdq_free_tail+0x14>
    {
        return LIBSWD_ERROR_NULLQUEUE;
 80017d4:	2303      	movs	r3, #3
 80017d6:	425b      	negs	r3, r3
 80017d8:	e02a      	b.n	8001830 <libswd_cmdq_free_tail+0x6a>
    }
    int cmdcnt = 0;
 80017da:	2300      	movs	r3, #0
 80017dc:	60fb      	str	r3, [r7, #12]
    libswd_cmd_t *cmdqend;
    if (cmdq->next3 == NULL)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	691b      	ldr	r3, [r3, #16]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d101      	bne.n	80017ea <libswd_cmdq_free_tail+0x24>
    {
        return 0;
 80017e6:	2300      	movs	r3, #0
 80017e8:	e022      	b.n	8001830 <libswd_cmdq_free_tail+0x6a>
    }
    else
    {
        cmdqend = libswd_cmdq_find_tail(cmdq->next3);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	691b      	ldr	r3, [r3, #16]
 80017ee:	0018      	movs	r0, r3
 80017f0:	f7ff feae 	bl	8001550 <libswd_cmdq_find_tail>
 80017f4:	0003      	movs	r3, r0
 80017f6:	60bb      	str	r3, [r7, #8]
        if (cmdqend == NULL)
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d110      	bne.n	8001820 <libswd_cmdq_free_tail+0x5a>
        {
            return LIBSWD_ERROR_QUEUE;
 80017fe:	230b      	movs	r3, #11
 8001800:	425b      	negs	r3, r3
 8001802:	e015      	b.n	8001830 <libswd_cmdq_free_tail+0x6a>
        }
        while (cmdqend != cmdq)
        {
            cmdqend=cmdqend->prev3;
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	60bb      	str	r3, [r7, #8]
            
            /// clear the linkage 
            cmdqend->next3->next3 = NULL;
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	691b      	ldr	r3, [r3, #16]
 800180e:	2200      	movs	r2, #0
 8001810:	611a      	str	r2, [r3, #16]
            cmdqend->next3->prev3 = NULL;
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	691b      	ldr	r3, [r3, #16]
 8001816:	2200      	movs	r2, #0
 8001818:	60da      	str	r2, [r3, #12]
            cmdcnt++;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	3301      	adds	r3, #1
 800181e:	60fb      	str	r3, [r7, #12]
        while (cmdqend != cmdq)
 8001820:	68ba      	ldr	r2, [r7, #8]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	429a      	cmp	r2, r3
 8001826:	d1ed      	bne.n	8001804 <libswd_cmdq_free_tail+0x3e>
        }
        cmdq->next3 = NULL;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2200      	movs	r2, #0
 800182c:	611a      	str	r2, [r3, #16]
        return cmdcnt;
 800182e:	68fb      	ldr	r3, [r7, #12]
    }
}
 8001830:	0018      	movs	r0, r3
 8001832:	46bd      	mov	sp, r7
 8001834:	b004      	add	sp, #16
 8001836:	bd80      	pop	{r7, pc}

08001838 <libswd_cmdq_flush>:
* \param operation tells how to flush the queue.
* \return number of commands transmitted, or LIBSWD_ERROR_CODE on failure.
* !TODO: HOW WE WANT TO UPDATE CMDQ ELEMENT AFTER PROCESSING WITHOUT DOUBLE POINTER?
*/
int libswd_cmdq_flush(libswd_ctx_t *libswdctx, libswd_cmd_t **cmdq, libswd_operation_t operation)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b08a      	sub	sp, #40	; 0x28
 800183c:	af00      	add	r7, sp, #0
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	60b9      	str	r1, [r7, #8]
 8001842:	1dfb      	adds	r3, r7, #7
 8001844:	701a      	strb	r2, [r3, #0]
    if (libswdctx==NULL) 
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d102      	bne.n	8001852 <libswd_cmdq_flush+0x1a>
    {
        return LIBSWD_ERROR_NULLCONTEXT;
 800184c:	230a      	movs	r3, #10
 800184e:	425b      	negs	r3, r3
 8001850:	e07c      	b.n	800194c <libswd_cmdq_flush+0x114>
    }
    if (*cmdq == NULL || cmdq == NULL) 
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d002      	beq.n	8001860 <libswd_cmdq_flush+0x28>
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d102      	bne.n	8001866 <libswd_cmdq_flush+0x2e>
    {
        return LIBSWD_ERROR_NULLQUEUE;
 8001860:	2303      	movs	r3, #3
 8001862:	425b      	negs	r3, r3
 8001864:	e072      	b.n	800194c <libswd_cmdq_flush+0x114>
    }
    if (operation < LIBSWD_OPERATION_FIRST || operation > LIBSWD_OPERATION_LAST)
 8001866:	1dfb      	adds	r3, r7, #7
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d003      	beq.n	8001876 <libswd_cmdq_flush+0x3e>
 800186e:	1dfb      	adds	r3, r7, #7
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	2b07      	cmp	r3, #7
 8001874:	d902      	bls.n	800187c <libswd_cmdq_flush+0x44>
    {
        return LIBSWD_ERROR_BADOPCODE;
 8001876:	2318      	movs	r3, #24
 8001878:	425b      	negs	r3, r3
 800187a:	e067      	b.n	800194c <libswd_cmdq_flush+0x114>
    }
    
    int res, cmdcnt = 0;
 800187c:	2300      	movs	r3, #0
 800187e:	627b      	str	r3, [r7, #36]	; 0x24
    libswd_cmd_t *cmd, *firstcmd, *lastcmd;
    
    switch (operation)
 8001880:	1dfb      	adds	r3, r7, #7
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	2b02      	cmp	r3, #2
 8001886:	d112      	bne.n	80018ae <libswd_cmdq_flush+0x76>
//        firstcmd=*cmdq;
//        lastcmd=libswd_cmdq_find_tail(*cmdq);
//        break;
    case LIBSWD_OPERATION_EXECUTE:
//    case LIBSWD_OPERATION_TRANSMIT_ALL:
        firstcmd=libswd_cmdq_find_head(*cmdq);
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	0018      	movs	r0, r3
 800188e:	f7ff fe47 	bl	8001520 <libswd_cmdq_find_head>
 8001892:	0003      	movs	r3, r0
 8001894:	61fb      	str	r3, [r7, #28]
        lastcmd=libswd_cmdq_find_tail(*cmdq);
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	0018      	movs	r0, r3
 800189c:	f7ff fe58 	bl	8001550 <libswd_cmdq_find_tail>
 80018a0:	0003      	movs	r3, r0
 80018a2:	61bb      	str	r3, [r7, #24]
        break;
 80018a4:	46c0      	nop			; (mov r8, r8)
//        break;
    default:
        return LIBSWD_ERROR_BADOPCODE;
    }
    
    if (firstcmd == NULL)
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d106      	bne.n	80018ba <libswd_cmdq_flush+0x82>
 80018ac:	e002      	b.n	80018b4 <libswd_cmdq_flush+0x7c>
        return LIBSWD_ERROR_BADOPCODE;
 80018ae:	2318      	movs	r3, #24
 80018b0:	425b      	negs	r3, r3
 80018b2:	e04b      	b.n	800194c <libswd_cmdq_flush+0x114>
    {
        return LIBSWD_ERROR_QUEUEROOT;
 80018b4:	231e      	movs	r3, #30
 80018b6:	425b      	negs	r3, r3
 80018b8:	e048      	b.n	800194c <libswd_cmdq_flush+0x114>
    }
    if (lastcmd == NULL) 
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d102      	bne.n	80018c6 <libswd_cmdq_flush+0x8e>
    {
        return LIBSWD_ERROR_QUEUETAIL;
 80018c0:	231f      	movs	r3, #31
 80018c2:	425b      	negs	r3, r3
 80018c4:	e042      	b.n	800194c <libswd_cmdq_flush+0x114>
    }
    
    if (firstcmd == lastcmd)
 80018c6:	69fa      	ldr	r2, [r7, #28]
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d115      	bne.n	80018fa <libswd_cmdq_flush+0xc2>
    {
        if (!firstcmd->done) 
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	7a9b      	ldrb	r3, [r3, #10]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d10f      	bne.n	80018f6 <libswd_cmdq_flush+0xbe>
        {
            res = libswd_drv_transmit(libswdctx, firstcmd);
 80018d6:	69fa      	ldr	r2, [r7, #28]
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	0011      	movs	r1, r2
 80018dc:	0018      	movs	r0, r3
 80018de:	f001 fd05 	bl	80032ec <libswd_drv_transmit>
 80018e2:	0003      	movs	r3, r0
 80018e4:	617b      	str	r3, [r7, #20]
            if (res < 0) 
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	da01      	bge.n	80018f0 <libswd_cmdq_flush+0xb8>
            {
                return res;
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	e02d      	b.n	800194c <libswd_cmdq_flush+0x114>
            }
            *cmdq=firstcmd;
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	69fa      	ldr	r2, [r7, #28]
 80018f4:	601a      	str	r2, [r3, #0]
        }
        return 1;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e028      	b.n	800194c <libswd_cmdq_flush+0x114>
    }
    
    for (cmd = firstcmd; ; cmd=cmd->next3)
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	623b      	str	r3, [r7, #32]
    {
        if (cmd->done)
 80018fe:	6a3b      	ldr	r3, [r7, #32]
 8001900:	7a9b      	ldrb	r3, [r3, #10]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d004      	beq.n	8001910 <libswd_cmdq_flush+0xd8>
        {
            if (cmd->next3)
 8001906:	6a3b      	ldr	r3, [r7, #32]
 8001908:	691b      	ldr	r3, [r3, #16]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d017      	beq.n	800193e <libswd_cmdq_flush+0x106>
            {
                continue;
 800190e:	e012      	b.n	8001936 <libswd_cmdq_flush+0xfe>
            else 
            {
                break;
            }
        }
        res = libswd_drv_transmit(libswdctx, cmd);
 8001910:	6a3a      	ldr	r2, [r7, #32]
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	0011      	movs	r1, r2
 8001916:	0018      	movs	r0, r3
 8001918:	f001 fce8 	bl	80032ec <libswd_drv_transmit>
 800191c:	0003      	movs	r3, r0
 800191e:	617b      	str	r3, [r7, #20]
        if (res < 0) 
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	2b00      	cmp	r3, #0
 8001924:	da01      	bge.n	800192a <libswd_cmdq_flush+0xf2>
        {
            return res;
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	e010      	b.n	800194c <libswd_cmdq_flush+0x114>
        }
        cmdcnt = +res;              // TBD PW intentional ???
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	627b      	str	r3, [r7, #36]	; 0x24
        if (cmd == lastcmd)
 800192e:	6a3a      	ldr	r2, [r7, #32]
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	429a      	cmp	r2, r3
 8001934:	d005      	beq.n	8001942 <libswd_cmdq_flush+0x10a>
    for (cmd = firstcmd; ; cmd=cmd->next3)
 8001936:	6a3b      	ldr	r3, [r7, #32]
 8001938:	691b      	ldr	r3, [r3, #16]
 800193a:	623b      	str	r3, [r7, #32]
        if (cmd->done)
 800193c:	e7df      	b.n	80018fe <libswd_cmdq_flush+0xc6>
                break;
 800193e:	46c0      	nop			; (mov r8, r8)
 8001940:	e000      	b.n	8001944 <libswd_cmdq_flush+0x10c>
        {
            break;
 8001942:	46c0      	nop			; (mov r8, r8)
        }
    }
    *cmdq = cmd;
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	6a3a      	ldr	r2, [r7, #32]
 8001948:	601a      	str	r2, [r3, #0]
    return cmdcnt;
 800194a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800194c:	0018      	movs	r0, r3
 800194e:	46bd      	mov	sp, r7
 8001950:	b00a      	add	sp, #40	; 0x28
 8001952:	bd80      	pop	{r7, pc}

08001954 <libswd_init>:
/** LibSWD initialization routine.
* It should be called prior any operation made with libswd. It initializes
* command queue and basic parameters for context that is returned as pointer.
* \return pointer to the initialized swd context.
*/
libswd_ctx_t *libswd_init(void){
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
    libswd_ctx_t *libswdctx;
    libswdctx=(libswd_ctx_t *)calloc(1,sizeof(libswd_ctx_t));
 800195a:	21e4      	movs	r1, #228	; 0xe4
 800195c:	2001      	movs	r0, #1
 800195e:	f006 f895 	bl	8007a8c <calloc>
 8001962:	0003      	movs	r3, r0
 8001964:	607b      	str	r3, [r7, #4]
    if (libswdctx==NULL) return NULL;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d101      	bne.n	8001970 <libswd_init+0x1c>
 800196c:	2300      	movs	r3, #0
 800196e:	e029      	b.n	80019c4 <libswd_init+0x70>
    if (libswdctx->driver==NULL){
        free(libswdctx);
        return NULL;
    }*/
    
    int ret = libswd_cmdq_init_main(main_queue, LIBSWD_MAIN_QUEUE_SIZE);
 8001970:	4b16      	ldr	r3, [pc, #88]	; (80019cc <libswd_init+0x78>)
 8001972:	211e      	movs	r1, #30
 8001974:	0018      	movs	r0, r3
 8001976:	f7ff fd93 	bl	80014a0 <libswd_cmdq_init_main>
 800197a:	0003      	movs	r3, r0
 800197c:	603b      	str	r3, [r7, #0]
    if (ret < 0) {
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	2b00      	cmp	r3, #0
 8001982:	da05      	bge.n	8001990 <libswd_init+0x3c>
        libswd_deinit_ctx(libswdctx);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	0018      	movs	r0, r3
 8001988:	f000 f824 	bl	80019d4 <libswd_deinit_ctx>
        return NULL;
 800198c:	2300      	movs	r3, #0
 800198e:	e019      	b.n	80019c4 <libswd_init+0x70>
    }
    libswdctx->cmdq = main_queue;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	4a0e      	ldr	r2, [pc, #56]	; (80019cc <libswd_init+0x78>)
 8001994:	601a      	str	r2, [r3, #0]
    
    libswdctx->config.initialized=LIBSWD_TRUE;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2201      	movs	r2, #1
 800199a:	711a      	strb	r2, [r3, #4]
    libswdctx->config.trnlen=LIBSWD_TURNROUND_DEFAULT_VAL;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2201      	movs	r2, #1
 80019a0:	715a      	strb	r2, [r3, #5]
    libswdctx->config.maxcmdqlen=LIBSWD_CMDQLEN_DEFAULT;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2280      	movs	r2, #128	; 0x80
 80019a6:	00d2      	lsls	r2, r2, #3
 80019a8:	609a      	str	r2, [r3, #8]
    libswdctx->config.loglevel=LIBSWD_LOGLEVEL_DEFAULT;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2202      	movs	r2, #2
 80019ae:	731a      	strb	r2, [r3, #12]
    libswdctx->config.autofixerrors=LIBSWD_AUTOFIX_DEFAULT;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2200      	movs	r2, #0
 80019b4:	735a      	strb	r2, [r3, #13]
    libswd_log(libswdctx, LIBSWD_LOGLEVEL_NORMAL, "LIBSWD_N: Using XXX (http://libswd.sf.net)\nLIBSWD_N: (c) Tomasz Boleslaw CEDRO (http://www.tomek.cedro.info)\n");
 80019b6:	4a06      	ldr	r2, [pc, #24]	; (80019d0 <libswd_init+0x7c>)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2101      	movs	r1, #1
 80019bc:	0018      	movs	r0, r3
 80019be:	f002 fd15 	bl	80043ec <libswd_log>
    return libswdctx;
 80019c2:	687b      	ldr	r3, [r7, #4]
}
 80019c4:	0018      	movs	r0, r3
 80019c6:	46bd      	mov	sp, r7
 80019c8:	b002      	add	sp, #8
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	20000148 	.word	0x20000148
 80019d0:	08009020 	.word	0x08009020

080019d4 <libswd_deinit_ctx>:
/** De-initialize selected swd context and free its memory.
* Note: This function will not free command queue for selected context!
* \param *libswdctx swd context pointer.
* \return LIBSWD_OK on success, LIBSWD_ERROR_CODE on failure.
*/
int libswd_deinit_ctx(libswd_ctx_t *libswdctx){
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
    if (libswdctx==NULL) return LIBSWD_ERROR_NULLPOINTER;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d102      	bne.n	80019e8 <libswd_deinit_ctx+0x14>
 80019e2:	2302      	movs	r3, #2
 80019e4:	425b      	negs	r3, r3
 80019e6:	e004      	b.n	80019f2 <libswd_deinit_ctx+0x1e>
    free(libswdctx);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	0018      	movs	r0, r3
 80019ec:	f006 fa6a 	bl	8007ec4 <free>
    return LIBSWD_OK;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	0018      	movs	r0, r3
 80019f4:	46bd      	mov	sp, r7
 80019f6:	b002      	add	sp, #8
 80019f8:	bd80      	pop	{r7, pc}

080019fa <libswd_deinit_cmdq>:

/** De-initialize command queue and free its memory on selected swd context.
* \param *libswdctx swd context pointer.
* \return number of commands freed, or LIBSWD_ERROR_CODE on failure.
*/
int libswd_deinit_cmdq(libswd_ctx_t *libswdctx){
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b084      	sub	sp, #16
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
    if (libswdctx==NULL) return LIBSWD_ERROR_NULLPOINTER;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d102      	bne.n	8001a0e <libswd_deinit_cmdq+0x14>
 8001a08:	2302      	movs	r3, #2
 8001a0a:	425b      	negs	r3, r3
 8001a0c:	e009      	b.n	8001a22 <libswd_deinit_cmdq+0x28>
    int res;
    res=libswd_cmdq_free();
 8001a0e:	f7ff fec5 	bl	800179c <libswd_cmdq_free>
 8001a12:	0003      	movs	r3, r0
 8001a14:	60fb      	str	r3, [r7, #12]
    if (res<0) return res;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	da01      	bge.n	8001a20 <libswd_deinit_cmdq+0x26>
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	e000      	b.n	8001a22 <libswd_deinit_cmdq+0x28>
    return res;
 8001a20:	68fb      	ldr	r3, [r7, #12]
}
 8001a22:	0018      	movs	r0, r3
 8001a24:	46bd      	mov	sp, r7
 8001a26:	b004      	add	sp, #16
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <libswd_deinit>:

/** De-initialize selected swd context and its command queue.
* \param *libswdctx swd context pointer.
* \return number of elements freed, or LIBSWD_ERROR_CODE on failure.
*/
int libswd_deinit(libswd_ctx_t *libswdctx){
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b084      	sub	sp, #16
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
    int res, cmdcnt=0;
 8001a32:	2300      	movs	r3, #0
 8001a34:	60fb      	str	r3, [r7, #12]
    //if (libswdctx->membuf.data) free(libswdctx->membuf.data);
    res=libswd_deinit_cmdq(libswdctx);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	0018      	movs	r0, r3
 8001a3a:	f7ff ffde 	bl	80019fa <libswd_deinit_cmdq>
 8001a3e:	0003      	movs	r3, r0
 8001a40:	60bb      	str	r3, [r7, #8]
    if (res<0) return res;
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	da01      	bge.n	8001a4c <libswd_deinit+0x22>
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	e00f      	b.n	8001a6c <libswd_deinit+0x42>
    cmdcnt=res;
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	60fb      	str	r3, [r7, #12]
    res=libswd_deinit_ctx(libswdctx);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	0018      	movs	r0, r3
 8001a54:	f7ff ffbe 	bl	80019d4 <libswd_deinit_ctx>
 8001a58:	0003      	movs	r3, r0
 8001a5a:	60bb      	str	r3, [r7, #8]
    if (res<0) return res;
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	da01      	bge.n	8001a66 <libswd_deinit+0x3c>
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	e002      	b.n	8001a6c <libswd_deinit+0x42>
    return cmdcnt+res;
 8001a66:	68fa      	ldr	r2, [r7, #12]
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	18d3      	adds	r3, r2, r3
}
 8001a6c:	0018      	movs	r0, r3
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	b004      	add	sp, #16
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <libswd_dap_init>:
* It will bring DAP to a known state on error/stall etc and zero DP SELECT.
* \param *libswdctx swd context pointer.
* \param operation type (LIBSWD_OPERATION_ENQUEUE or LIBSWD_OPERATION_EXECUTE).
* \return Target's IDCODE, or LIBSWD_ERROR_CODE on failure.
*/
int libswd_dap_init(libswd_ctx_t *libswdctx, libswd_operation_t operation, int *idcode){
 8001a74:	b590      	push	{r4, r7, lr}
 8001a76:	b08b      	sub	sp, #44	; 0x2c
 8001a78:	af02      	add	r7, sp, #8
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	607a      	str	r2, [r7, #4]
 8001a7e:	200b      	movs	r0, #11
 8001a80:	183b      	adds	r3, r7, r0
 8001a82:	1c0a      	adds	r2, r1, #0
 8001a84:	701a      	strb	r2, [r3, #0]
    libswd_log(libswdctx, LIBSWD_LOGLEVEL_DEBUG,
 8001a86:	183b      	adds	r3, r7, r0
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	0018      	movs	r0, r3
 8001a8c:	f002 fcf2 	bl	8004474 <libswd_operation_string>
 8001a90:	0004      	movs	r4, r0
 8001a92:	68f9      	ldr	r1, [r7, #12]
 8001a94:	4a32      	ldr	r2, [pc, #200]	; (8001b60 <libswd_dap_init+0xec>)
 8001a96:	68f8      	ldr	r0, [r7, #12]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	9301      	str	r3, [sp, #4]
 8001a9c:	9400      	str	r4, [sp, #0]
 8001a9e:	000b      	movs	r3, r1
 8001aa0:	2105      	movs	r1, #5
 8001aa2:	f002 fca3 	bl	80043ec <libswd_log>
               "LIBSWD_D: libswd_dap_init(*libswdctx=@%p, operation=%s, *idcode=@%p) entring function...\n",
               (void*)libswdctx, libswd_operation_string(operation), (void*)idcode );
    if (!libswdctx) return LIBSWD_ERROR_NULLCONTEXT;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d102      	bne.n	8001ab2 <libswd_dap_init+0x3e>
 8001aac:	230a      	movs	r3, #10
 8001aae:	425b      	negs	r3, r3
 8001ab0:	e052      	b.n	8001b58 <libswd_dap_init+0xe4>
    if (!idcode) return LIBSWD_ERROR_NULLPOINTER;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d102      	bne.n	8001abe <libswd_dap_init+0x4a>
 8001ab8:	2302      	movs	r3, #2
 8001aba:	425b      	negs	r3, r3
 8001abc:	e04c      	b.n	8001b58 <libswd_dap_init+0xe4>
    int res, dpselect=0, dpabort=~0, dpctrlstat=0;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	61fb      	str	r3, [r7, #28]
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	425b      	negs	r3, r3
 8001ac6:	617b      	str	r3, [r7, #20]
 8001ac8:	2300      	movs	r3, #0
 8001aca:	613b      	str	r3, [r7, #16]
    dpctrlstat|=LIBSWD_DP_CTRLSTAT_ORUNDETECT;
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	613b      	str	r3, [r7, #16]
    dpctrlstat|=LIBSWD_DP_CTRLSTAT_CSYSPWRUPREQ;
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	2280      	movs	r2, #128	; 0x80
 8001ad8:	05d2      	lsls	r2, r2, #23
 8001ada:	4313      	orrs	r3, r2
 8001adc:	613b      	str	r3, [r7, #16]
    dpctrlstat|=LIBSWD_DP_CTRLSTAT_CDBGPWRUPREQ;
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	2280      	movs	r2, #128	; 0x80
 8001ae2:	0552      	lsls	r2, r2, #21
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	613b      	str	r3, [r7, #16]
    libswdctx->log.dp.initialized=0;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2200      	movs	r2, #0
 8001aec:	761a      	strb	r2, [r3, #24]
    res=libswd_dap_detect(libswdctx, operation, idcode);
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	230b      	movs	r3, #11
 8001af2:	18fb      	adds	r3, r7, r3
 8001af4:	7819      	ldrb	r1, [r3, #0]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	0018      	movs	r0, r3
 8001afa:	f000 fbb9 	bl	8002270 <libswd_dap_detect>
 8001afe:	0003      	movs	r3, r0
 8001b00:	61bb      	str	r3, [r7, #24]
    if (res<0) return res;
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	da01      	bge.n	8001b0c <libswd_dap_init+0x98>
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	e025      	b.n	8001b58 <libswd_dap_init+0xe4>
    res=libswd_dap_setup(libswdctx, operation, &dpabort, &dpctrlstat);
 8001b0c:	2310      	movs	r3, #16
 8001b0e:	18fc      	adds	r4, r7, r3
 8001b10:	2314      	movs	r3, #20
 8001b12:	18fa      	adds	r2, r7, r3
 8001b14:	230b      	movs	r3, #11
 8001b16:	18fb      	adds	r3, r7, r3
 8001b18:	7819      	ldrb	r1, [r3, #0]
 8001b1a:	68f8      	ldr	r0, [r7, #12]
 8001b1c:	0023      	movs	r3, r4
 8001b1e:	f000 f821 	bl	8001b64 <libswd_dap_setup>
 8001b22:	0003      	movs	r3, r0
 8001b24:	61bb      	str	r3, [r7, #24]
    if (res<0) return res;
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	da01      	bge.n	8001b30 <libswd_dap_init+0xbc>
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	e013      	b.n	8001b58 <libswd_dap_init+0xe4>
    res=libswd_dp_write(libswdctx, operation, LIBSWD_DP_SELECT_ADDR, dpselect);
 8001b30:	69fa      	ldr	r2, [r7, #28]
 8001b32:	230b      	movs	r3, #11
 8001b34:	18fb      	adds	r3, r7, r3
 8001b36:	7819      	ldrb	r1, [r3, #0]
 8001b38:	68f8      	ldr	r0, [r7, #12]
 8001b3a:	0013      	movs	r3, r2
 8001b3c:	2208      	movs	r2, #8
 8001b3e:	f000 fd63 	bl	8002608 <libswd_dp_write>
 8001b42:	0003      	movs	r3, r0
 8001b44:	61bb      	str	r3, [r7, #24]
    if (res<0) return res;
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	da01      	bge.n	8001b50 <libswd_dap_init+0xdc>
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	e003      	b.n	8001b58 <libswd_dap_init+0xe4>
    libswdctx->log.dp.initialized=1;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2201      	movs	r2, #1
 8001b54:	761a      	strb	r2, [r3, #24]
    return LIBSWD_OK;
 8001b56:	2300      	movs	r3, #0
}
 8001b58:	0018      	movs	r0, r3
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	b009      	add	sp, #36	; 0x24
 8001b5e:	bd90      	pop	{r4, r7, pc}
 8001b60:	08009090 	.word	0x08009090

08001b64 <libswd_dap_setup>:
* \param *libswdctx swd context to work on.
* \param *dpabort write only value to store in DP ABORT if not NULL.
* \param *dpctrlstat desired DP CTRL/STAT value if not NULL.
* \return LIBSWD_OK on success or LIBSWD_ERROR code on failure.
*/
int libswd_dap_setup(libswd_ctx_t *libswdctx, libswd_operation_t operation, int *abort, int *ctrlstat){
 8001b64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b66:	b08d      	sub	sp, #52	; 0x34
 8001b68:	af06      	add	r7, sp, #24
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	607a      	str	r2, [r7, #4]
 8001b6e:	603b      	str	r3, [r7, #0]
 8001b70:	200b      	movs	r0, #11
 8001b72:	183b      	adds	r3, r7, r0
 8001b74:	1c0a      	adds	r2, r1, #0
 8001b76:	701a      	strb	r2, [r3, #0]
    libswd_log(libswdctx, LIBSWD_LOGLEVEL_DEBUG,
 8001b78:	183b      	adds	r3, r7, r0
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	0018      	movs	r0, r3
 8001b7e:	f002 fc79 	bl	8004474 <libswd_operation_string>
 8001b82:	0006      	movs	r6, r0
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d002      	beq.n	8001b90 <libswd_dap_setup+0x2c>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	e000      	b.n	8001b92 <libswd_dap_setup+0x2e>
 8001b90:	2200      	movs	r2, #0
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d002      	beq.n	8001b9e <libswd_dap_setup+0x3a>
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	e000      	b.n	8001ba0 <libswd_dap_setup+0x3c>
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	68fd      	ldr	r5, [r7, #12]
 8001ba2:	4c4a      	ldr	r4, [pc, #296]	; (8001ccc <libswd_dap_setup+0x168>)
 8001ba4:	68f8      	ldr	r0, [r7, #12]
 8001ba6:	6839      	ldr	r1, [r7, #0]
 8001ba8:	9104      	str	r1, [sp, #16]
 8001baa:	9303      	str	r3, [sp, #12]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	9302      	str	r3, [sp, #8]
 8001bb0:	9201      	str	r2, [sp, #4]
 8001bb2:	9600      	str	r6, [sp, #0]
 8001bb4:	002b      	movs	r3, r5
 8001bb6:	0022      	movs	r2, r4
 8001bb8:	2105      	movs	r1, #5
 8001bba:	f002 fc17 	bl	80043ec <libswd_log>
               "LIBSWD_D: libswd_dap_setup(*libswdctx=@%p, operation=%s, *abort=0x%X@%p, *ctrlstat=0x%X@%p) entring function...\n",
               (void*)libswdctx, libswd_operation_string(operation), abort?*abort:0, (void*)abort, ctrlstat?*ctrlstat:0, (void*)ctrlstat );
    if (libswdctx==NULL) return LIBSWD_ERROR_NULLCONTEXT;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d102      	bne.n	8001bca <libswd_dap_setup+0x66>
 8001bc4:	230a      	movs	r3, #10
 8001bc6:	425b      	negs	r3, r3
 8001bc8:	e07b      	b.n	8001cc2 <libswd_dap_setup+0x15e>
    int i, res;
    if (abort)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d00e      	beq.n	8001bee <libswd_dap_setup+0x8a>
    {
        res=libswd_dp_write(libswdctx, operation, LIBSWD_DP_ABORT_ADDR, *abort);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	230b      	movs	r3, #11
 8001bd6:	18fb      	adds	r3, r7, r3
 8001bd8:	7819      	ldrb	r1, [r3, #0]
 8001bda:	68f8      	ldr	r0, [r7, #12]
 8001bdc:	0013      	movs	r3, r2
 8001bde:	2200      	movs	r2, #0
 8001be0:	f000 fd12 	bl	8002608 <libswd_dp_write>
 8001be4:	0003      	movs	r3, r0
 8001be6:	613b      	str	r3, [r7, #16]
        if (res<0) goto libswd_dap_setup_error;
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	db58      	blt.n	8001ca0 <libswd_dap_setup+0x13c>
    }
    if (ctrlstat)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d04d      	beq.n	8001c90 <libswd_dap_setup+0x12c>
    {
        // Do not lock-out the debug unit.
        *ctrlstat|=LIBSWD_DP_CTRLSTAT_CDBGPWRUPREQ|LIBSWD_DP_CTRLSTAT_CSYSPWRUPREQ;
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	22a0      	movs	r2, #160	; 0xa0
 8001bfa:	05d2      	lsls	r2, r2, #23
 8001bfc:	431a      	orrs	r2, r3
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	601a      	str	r2, [r3, #0]
        // Write to CTRL/STAT register.
        res=libswd_dp_write(libswdctx, operation, LIBSWD_DP_CTRLSTAT_ADDR, *ctrlstat);
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	230b      	movs	r3, #11
 8001c08:	18fb      	adds	r3, r7, r3
 8001c0a:	7819      	ldrb	r1, [r3, #0]
 8001c0c:	68f8      	ldr	r0, [r7, #12]
 8001c0e:	0013      	movs	r3, r2
 8001c10:	2204      	movs	r2, #4
 8001c12:	f000 fcf9 	bl	8002608 <libswd_dp_write>
 8001c16:	0003      	movs	r3, r0
 8001c18:	613b      	str	r3, [r7, #16]
        if (res<0) goto libswd_dap_setup_error;
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	db41      	blt.n	8001ca4 <libswd_dap_setup+0x140>
        // Wait for System and Debug Unit powerup.
        for (i=LIBSWD_RETRY_COUNT_DEFAULT;i;i--)
 8001c20:	230a      	movs	r3, #10
 8001c22:	617b      	str	r3, [r7, #20]
 8001c24:	e016      	b.n	8001c54 <libswd_dap_setup+0xf0>
        {
            res=libswd_dp_read(libswdctx, operation, LIBSWD_DP_CTRLSTAT_ADDR, ctrlstat);
 8001c26:	683a      	ldr	r2, [r7, #0]
 8001c28:	230b      	movs	r3, #11
 8001c2a:	18fb      	adds	r3, r7, r3
 8001c2c:	7819      	ldrb	r1, [r3, #0]
 8001c2e:	68f8      	ldr	r0, [r7, #12]
 8001c30:	0013      	movs	r3, r2
 8001c32:	2204      	movs	r2, #4
 8001c34:	f000 fb56 	bl	80022e4 <libswd_dp_read>
 8001c38:	0003      	movs	r3, r0
 8001c3a:	613b      	str	r3, [r7, #16]
            if (res<0) goto libswd_dap_setup_error;
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	db32      	blt.n	8001ca8 <libswd_dap_setup+0x144>
            if (*ctrlstat&(LIBSWD_DP_CTRLSTAT_CDBGPWRUPACK|LIBSWD_DP_CTRLSTAT_CSYSPWRUPACK)) break;
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	23a0      	movs	r3, #160	; 0xa0
 8001c48:	061b      	lsls	r3, r3, #24
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	d106      	bne.n	8001c5c <libswd_dap_setup+0xf8>
        for (i=LIBSWD_RETRY_COUNT_DEFAULT;i;i--)
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	3b01      	subs	r3, #1
 8001c52:	617b      	str	r3, [r7, #20]
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d1e5      	bne.n	8001c26 <libswd_dap_setup+0xc2>
 8001c5a:	e000      	b.n	8001c5e <libswd_dap_setup+0xfa>
            if (*ctrlstat&(LIBSWD_DP_CTRLSTAT_CDBGPWRUPACK|LIBSWD_DP_CTRLSTAT_CSYSPWRUPACK)) break;
 8001c5c:	46c0      	nop			; (mov r8, r8)
            //DWT_Delay_us(LIBSWD_RETRY_DELAY_DEFAULT);
        }
        libswdctx->log.dp.ctrlstat=*ctrlstat;
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	625a      	str	r2, [r3, #36]	; 0x24
        libswd_log(libswdctx, LIBSWD_LOGLEVEL_INFO,
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6a:	4a19      	ldr	r2, [pc, #100]	; (8001cd0 <libswd_dap_setup+0x16c>)
 8001c6c:	68f8      	ldr	r0, [r7, #12]
 8001c6e:	2104      	movs	r1, #4
 8001c70:	f002 fbbc 	bl	80043ec <libswd_log>
                   "LIBSWD_I: libswd_dap_setup(): DP CTRL/STAT=0x%08X\n",
                   libswdctx->log.dp.ctrlstat );
        // Return error if CDBGPWRUPACK and CSYSPWRUPACK flags are not set in CTRL/STAT.
        if (!i)
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d10a      	bne.n	8001c90 <libswd_dap_setup+0x12c>
        {
            libswd_log(libswdctx, LIBSWD_LOGLEVEL_WARNING,
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7e:	4a15      	ldr	r2, [pc, #84]	; (8001cd4 <libswd_dap_setup+0x170>)
 8001c80:	68f8      	ldr	r0, [r7, #12]
 8001c82:	2103      	movs	r1, #3
 8001c84:	f002 fbb2 	bl	80043ec <libswd_log>
                       "LIBSWD_W: libswd_dap_setup(): CDBGPWRUPACK/CSYSPWRUPACK not set in DP CTRL/STAT!\n",
                       libswdctx->log.dp.ctrlstat );
            res=LIBSWD_ERROR_MAXRETRY;
 8001c88:	232b      	movs	r3, #43	; 0x2b
 8001c8a:	425b      	negs	r3, r3
 8001c8c:	613b      	str	r3, [r7, #16]
            goto libswd_dap_setup_error;
 8001c8e:	e00c      	b.n	8001caa <libswd_dap_setup+0x146>
        }
    }
    libswd_log(libswdctx, LIBSWD_LOGLEVEL_DEBUG,
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	4a11      	ldr	r2, [pc, #68]	; (8001cd8 <libswd_dap_setup+0x174>)
 8001c94:	68f8      	ldr	r0, [r7, #12]
 8001c96:	2105      	movs	r1, #5
 8001c98:	f002 fba8 	bl	80043ec <libswd_log>
               "LIBSWD_D: libswd_dap_setup(*libswdctx=%p) execution OK.\n",
               (void*)libswdctx );
    return LIBSWD_OK;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	e010      	b.n	8001cc2 <libswd_dap_setup+0x15e>
        if (res<0) goto libswd_dap_setup_error;
 8001ca0:	46c0      	nop			; (mov r8, r8)
 8001ca2:	e002      	b.n	8001caa <libswd_dap_setup+0x146>
        if (res<0) goto libswd_dap_setup_error;
 8001ca4:	46c0      	nop			; (mov r8, r8)
 8001ca6:	e000      	b.n	8001caa <libswd_dap_setup+0x146>
            if (res<0) goto libswd_dap_setup_error;
 8001ca8:	46c0      	nop			; (mov r8, r8)
libswd_dap_setup_error:
    libswd_log(libswdctx, LIBSWD_LOGLEVEL_ERROR,
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	b25b      	sxtb	r3, r3
 8001cae:	0018      	movs	r0, r3
 8001cb0:	f001 fe44 	bl	800393c <libswd_error_string>
 8001cb4:	0003      	movs	r3, r0
 8001cb6:	4a09      	ldr	r2, [pc, #36]	; (8001cdc <libswd_dap_setup+0x178>)
 8001cb8:	68f8      	ldr	r0, [r7, #12]
 8001cba:	2102      	movs	r1, #2
 8001cbc:	f002 fb96 	bl	80043ec <libswd_log>
               "LIBSWD_E: libswd_dap_setup(): Cannot setup SW-DAP (%s)!\n",
               libswd_error_string((libswd_error_code_t)res) );
    return res;
 8001cc0:	693b      	ldr	r3, [r7, #16]
}
 8001cc2:	0018      	movs	r0, r3
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	b007      	add	sp, #28
 8001cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cca:	46c0      	nop			; (mov r8, r8)
 8001ccc:	080090ec 	.word	0x080090ec
 8001cd0:	08009160 	.word	0x08009160
 8001cd4:	08009194 	.word	0x08009194
 8001cd8:	080091e8 	.word	0x080091e8
 8001cdc:	08009224 	.word	0x08009224

08001ce0 <libswd_dap_reset>:
* SW-DP and JTAG-DP into reset state.
* \param *libswdctx swd context pointer.
* \param operation type (LIBSWD_OPERATION_ENQUEUE or LIBSWD_OPERATION_EXECUTE).
* \return number of elements processed or LIBSWD_ERROR_CODE code on failure.
*/
int libswd_dap_reset(libswd_ctx_t *libswdctx, libswd_operation_t operation){
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b088      	sub	sp, #32
 8001ce4:	af02      	add	r7, sp, #8
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	000a      	movs	r2, r1
 8001cea:	1cfb      	adds	r3, r7, #3
 8001cec:	701a      	strb	r2, [r3, #0]
    libswd_log(libswdctx, LIBSWD_LOGLEVEL_DEBUG,
 8001cee:	1cfb      	adds	r3, r7, #3
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	0018      	movs	r0, r3
 8001cf4:	f002 fbbe 	bl	8004474 <libswd_operation_string>
 8001cf8:	0001      	movs	r1, r0
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a2f      	ldr	r2, [pc, #188]	; (8001dbc <libswd_dap_reset+0xdc>)
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	9100      	str	r1, [sp, #0]
 8001d02:	2105      	movs	r1, #5
 8001d04:	f002 fb72 	bl	80043ec <libswd_log>
               "LIBSWD_D: Executing libswd_dap_reset(*libswdctx=@%p, operation=%s)\n",
               (void*)libswdctx, libswd_operation_string(operation) );
    
    if (libswdctx==NULL) return LIBSWD_ERROR_NULLCONTEXT;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d102      	bne.n	8001d14 <libswd_dap_reset+0x34>
 8001d0e:	230a      	movs	r3, #10
 8001d10:	425b      	negs	r3, r3
 8001d12:	e04e      	b.n	8001db2 <libswd_dap_reset+0xd2>
    if (operation!=LIBSWD_OPERATION_ENQUEUE && operation!=LIBSWD_OPERATION_EXECUTE)
 8001d14:	1cfb      	adds	r3, r7, #3
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d006      	beq.n	8001d2a <libswd_dap_reset+0x4a>
 8001d1c:	1cfb      	adds	r3, r7, #3
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d002      	beq.n	8001d2a <libswd_dap_reset+0x4a>
        return LIBSWD_ERROR_BADOPCODE;
 8001d24:	2318      	movs	r3, #24
 8001d26:	425b      	negs	r3, r3
 8001d28:	e043      	b.n	8001db2 <libswd_dap_reset+0xd2>
    
    int res, qcmdcnt=0, tcmdcnt=0;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	617b      	str	r3, [r7, #20]
 8001d2e:	2300      	movs	r3, #0
 8001d30:	613b      	str	r3, [r7, #16]
    libswdctx->log.memap.initialized=0;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	223d      	movs	r2, #61	; 0x3d
 8001d36:	2100      	movs	r1, #0
 8001d38:	5499      	strb	r1, [r3, r2]
    res=libswd_bus_setdir_mosi(libswdctx);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	0018      	movs	r0, r3
 8001d3e:	f7fe fd35 	bl	80007ac <libswd_bus_setdir_mosi>
 8001d42:	0003      	movs	r3, r0
 8001d44:	60fb      	str	r3, [r7, #12]
    if (res<0) return res;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	da01      	bge.n	8001d50 <libswd_dap_reset+0x70>
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	e030      	b.n	8001db2 <libswd_dap_reset+0xd2>
    res=libswd_cmd_enqueue_mosi_dap_reset(libswdctx);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	0018      	movs	r0, r3
 8001d54:	f7ff fb2a 	bl	80013ac <libswd_cmd_enqueue_mosi_dap_reset>
 8001d58:	0003      	movs	r3, r0
 8001d5a:	60fb      	str	r3, [r7, #12]
    if (res<1) return res;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	dc01      	bgt.n	8001d66 <libswd_dap_reset+0x86>
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	e025      	b.n	8001db2 <libswd_dap_reset+0xd2>
    qcmdcnt+=res;
 8001d66:	697a      	ldr	r2, [r7, #20]
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	18d3      	adds	r3, r2, r3
 8001d6c:	617b      	str	r3, [r7, #20]
    
    if (operation==LIBSWD_OPERATION_ENQUEUE)
 8001d6e:	1cfb      	adds	r3, r7, #3
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d101      	bne.n	8001d7a <libswd_dap_reset+0x9a>
    {
        return qcmdcnt;
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	e01b      	b.n	8001db2 <libswd_dap_reset+0xd2>
    }
    else if (operation==LIBSWD_OPERATION_EXECUTE)
 8001d7a:	1cfb      	adds	r3, r7, #3
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d115      	bne.n	8001dae <libswd_dap_reset+0xce>
    {
        res=libswd_cmdq_flush(libswdctx, &libswdctx->cmdq, operation);
 8001d82:	6879      	ldr	r1, [r7, #4]
 8001d84:	1cfb      	adds	r3, r7, #3
 8001d86:	781a      	ldrb	r2, [r3, #0]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	0018      	movs	r0, r3
 8001d8c:	f7ff fd54 	bl	8001838 <libswd_cmdq_flush>
 8001d90:	0003      	movs	r3, r0
 8001d92:	60fb      	str	r3, [r7, #12]
        if (res<0) return res;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	da01      	bge.n	8001d9e <libswd_dap_reset+0xbe>
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	e009      	b.n	8001db2 <libswd_dap_reset+0xd2>
        tcmdcnt+=res;
 8001d9e:	693a      	ldr	r2, [r7, #16]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	18d3      	adds	r3, r2, r3
 8001da4:	613b      	str	r3, [r7, #16]
        return qcmdcnt+tcmdcnt;
 8001da6:	697a      	ldr	r2, [r7, #20]
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	18d3      	adds	r3, r2, r3
 8001dac:	e001      	b.n	8001db2 <libswd_dap_reset+0xd2>
    }
    else return LIBSWD_ERROR_BADOPCODE;
 8001dae:	2318      	movs	r3, #24
 8001db0:	425b      	negs	r3, r3
}
 8001db2:	0018      	movs	r0, r3
 8001db4:	46bd      	mov	sp, r7
 8001db6:	b006      	add	sp, #24
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	46c0      	nop			; (mov r8, r8)
 8001dbc:	08009260 	.word	0x08009260

08001dc0 <libswd_dap_select>:

/** Activate SW-DP by sending out RESET and JTAG-TO-SWD sequence on SWDIOTMS line.
* \param *libswdctx swd context.
* \return number of control bytes executed, or error code on failre.
*/
int libswd_dap_select(libswd_ctx_t *libswdctx, libswd_operation_t operation){
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b088      	sub	sp, #32
 8001dc4:	af02      	add	r7, sp, #8
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	000a      	movs	r2, r1
 8001dca:	1cfb      	adds	r3, r7, #3
 8001dcc:	701a      	strb	r2, [r3, #0]
    libswd_log(libswdctx, LIBSWD_LOGLEVEL_DEBUG,
 8001dce:	1cfb      	adds	r3, r7, #3
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	0018      	movs	r0, r3
 8001dd4:	f002 fb4e 	bl	8004474 <libswd_operation_string>
 8001dd8:	0001      	movs	r1, r0
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a2b      	ldr	r2, [pc, #172]	; (8001e8c <libswd_dap_select+0xcc>)
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	9100      	str	r1, [sp, #0]
 8001de2:	2105      	movs	r1, #5
 8001de4:	f002 fb02 	bl	80043ec <libswd_log>
               "LIBSWD_D: Executing libswd_dap_activate(*libswdctx=@%p, operation=%s)\n",
               (void*)libswdctx, libswd_operation_string(operation));
    
    if (libswdctx==NULL) return LIBSWD_ERROR_NULLCONTEXT;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d102      	bne.n	8001df4 <libswd_dap_select+0x34>
 8001dee:	230a      	movs	r3, #10
 8001df0:	425b      	negs	r3, r3
 8001df2:	e046      	b.n	8001e82 <libswd_dap_select+0xc2>
    if (operation!=LIBSWD_OPERATION_ENQUEUE && operation!=LIBSWD_OPERATION_EXECUTE)
 8001df4:	1cfb      	adds	r3, r7, #3
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d006      	beq.n	8001e0a <libswd_dap_select+0x4a>
 8001dfc:	1cfb      	adds	r3, r7, #3
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d002      	beq.n	8001e0a <libswd_dap_select+0x4a>
        return LIBSWD_ERROR_BADOPCODE;
 8001e04:	2318      	movs	r3, #24
 8001e06:	425b      	negs	r3, r3
 8001e08:	e03b      	b.n	8001e82 <libswd_dap_select+0xc2>
    
    int res, qcmdcnt=0, tcmdcnt=0;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	617b      	str	r3, [r7, #20]
 8001e0e:	2300      	movs	r3, #0
 8001e10:	613b      	str	r3, [r7, #16]
    res=libswd_bus_setdir_mosi(libswdctx);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	0018      	movs	r0, r3
 8001e16:	f7fe fcc9 	bl	80007ac <libswd_bus_setdir_mosi>
 8001e1a:	0003      	movs	r3, r0
 8001e1c:	60fb      	str	r3, [r7, #12]
    if (res<0) return res;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	da01      	bge.n	8001e28 <libswd_dap_select+0x68>
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	e02c      	b.n	8001e82 <libswd_dap_select+0xc2>
    res=libswd_cmd_enqueue_mosi_jtag2swd(libswdctx);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	0018      	movs	r0, r3
 8001e2c:	f7ff fad0 	bl	80013d0 <libswd_cmd_enqueue_mosi_jtag2swd>
 8001e30:	0003      	movs	r3, r0
 8001e32:	60fb      	str	r3, [r7, #12]
    if (res<0) return res;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	da01      	bge.n	8001e3e <libswd_dap_select+0x7e>
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	e021      	b.n	8001e82 <libswd_dap_select+0xc2>
    qcmdcnt=res;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	617b      	str	r3, [r7, #20]
    
    if (operation==LIBSWD_OPERATION_ENQUEUE)
 8001e42:	1cfb      	adds	r3, r7, #3
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d101      	bne.n	8001e4e <libswd_dap_select+0x8e>
    {
        return qcmdcnt;
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	e019      	b.n	8001e82 <libswd_dap_select+0xc2>
    }
    else if (operation==LIBSWD_OPERATION_EXECUTE)
 8001e4e:	1cfb      	adds	r3, r7, #3
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d113      	bne.n	8001e7e <libswd_dap_select+0xbe>
    {
        res=libswd_cmdq_flush(libswdctx, &libswdctx->cmdq, operation);
 8001e56:	6879      	ldr	r1, [r7, #4]
 8001e58:	1cfb      	adds	r3, r7, #3
 8001e5a:	781a      	ldrb	r2, [r3, #0]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	0018      	movs	r0, r3
 8001e60:	f7ff fcea 	bl	8001838 <libswd_cmdq_flush>
 8001e64:	0003      	movs	r3, r0
 8001e66:	60fb      	str	r3, [r7, #12]
        if (res<0) return res;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	da01      	bge.n	8001e72 <libswd_dap_select+0xb2>
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	e007      	b.n	8001e82 <libswd_dap_select+0xc2>
        tcmdcnt=+res;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	613b      	str	r3, [r7, #16]
        return qcmdcnt+tcmdcnt;
 8001e76:	697a      	ldr	r2, [r7, #20]
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	18d3      	adds	r3, r2, r3
 8001e7c:	e001      	b.n	8001e82 <libswd_dap_select+0xc2>
    } else return LIBSWD_ERROR_BADOPCODE;
 8001e7e:	2318      	movs	r3, #24
 8001e80:	425b      	negs	r3, r3
}
 8001e82:	0018      	movs	r0, r3
 8001e84:	46bd      	mov	sp, r7
 8001e86:	b006      	add	sp, #24
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	46c0      	nop			; (mov r8, r8)
 8001e8c:	080092a4 	.word	0x080092a4

08001e90 <libswd_dap_errors_handle>:
* \param *libswdctx swd context pointer.
* \param operation operation type.
* \param *ctrlstat will hold the CTRL/STAT register value.
* \param *abort bitmask of which ABORT flags can be set, also will hold the ABORT write.
*/
int libswd_dap_errors_handle(libswd_ctx_t *libswdctx, libswd_operation_t operation, int *abort, int *ctrlstat){
 8001e90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e92:	b08f      	sub	sp, #60	; 0x3c
 8001e94:	af06      	add	r7, sp, #24
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	607a      	str	r2, [r7, #4]
 8001e9a:	603b      	str	r3, [r7, #0]
 8001e9c:	200b      	movs	r0, #11
 8001e9e:	183b      	adds	r3, r7, r0
 8001ea0:	1c0a      	adds	r2, r1, #0
 8001ea2:	701a      	strb	r2, [r3, #0]
    libswd_log(libswdctx, LIBSWD_LOGLEVEL_DEBUG,
 8001ea4:	183b      	adds	r3, r7, r0
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	0018      	movs	r0, r3
 8001eaa:	f002 fae3 	bl	8004474 <libswd_operation_string>
 8001eae:	0006      	movs	r6, r0
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d002      	beq.n	8001ebc <libswd_dap_errors_handle+0x2c>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	e000      	b.n	8001ebe <libswd_dap_errors_handle+0x2e>
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d002      	beq.n	8001eca <libswd_dap_errors_handle+0x3a>
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	e000      	b.n	8001ecc <libswd_dap_errors_handle+0x3c>
 8001eca:	2300      	movs	r3, #0
 8001ecc:	68fd      	ldr	r5, [r7, #12]
 8001ece:	4c6f      	ldr	r4, [pc, #444]	; (800208c <libswd_dap_errors_handle+0x1fc>)
 8001ed0:	68f8      	ldr	r0, [r7, #12]
 8001ed2:	6839      	ldr	r1, [r7, #0]
 8001ed4:	9104      	str	r1, [sp, #16]
 8001ed6:	9303      	str	r3, [sp, #12]
 8001ed8:	9202      	str	r2, [sp, #8]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	9301      	str	r3, [sp, #4]
 8001ede:	9600      	str	r6, [sp, #0]
 8001ee0:	002b      	movs	r3, r5
 8001ee2:	0022      	movs	r2, r4
 8001ee4:	2105      	movs	r1, #5
 8001ee6:	f002 fa81 	bl	80043ec <libswd_log>
               "LIBSWD_D: Executing libswd_dap_errors_handle(*libswdctx=@%p, operation=%s, *abort=0x%X@%p, *ctrlstat=0x%X@%p)\n",
               (void*)libswdctx, libswd_operation_string(operation),
               (void*)abort, abort?*abort:0, ctrlstat?*ctrlstat:0,
               (void*)ctrlstat );
    
    if (libswdctx==NULL) return LIBSWD_ERROR_NULLCONTEXT;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d102      	bne.n	8001ef6 <libswd_dap_errors_handle+0x66>
 8001ef0:	230a      	movs	r3, #10
 8001ef2:	425b      	negs	r3, r3
 8001ef4:	e0c5      	b.n	8002082 <libswd_dap_errors_handle+0x1f2>
    if (operation!=LIBSWD_OPERATION_EXECUTE && operation!=LIBSWD_OPERATION_ENQUEUE) return LIBSWD_ERROR_BADOPCODE;
 8001ef6:	220b      	movs	r2, #11
 8001ef8:	18bb      	adds	r3, r7, r2
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d006      	beq.n	8001f0e <libswd_dap_errors_handle+0x7e>
 8001f00:	18bb      	adds	r3, r7, r2
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d002      	beq.n	8001f0e <libswd_dap_errors_handle+0x7e>
 8001f08:	2318      	movs	r3, #24
 8001f0a:	425b      	negs	r3, r3
 8001f0c:	e0b9      	b.n	8002082 <libswd_dap_errors_handle+0x1f2>
    
    int res;
    char APnDP=0, R=1, W=0, ctrlstat_addr=LIBSWD_DP_CTRLSTAT_ADDR, abort_addr=LIBSWD_DP_ABORT_ADDR, ack, parity, cparity;
 8001f0e:	231b      	movs	r3, #27
 8001f10:	18fb      	adds	r3, r7, r3
 8001f12:	2200      	movs	r2, #0
 8001f14:	701a      	strb	r2, [r3, #0]
 8001f16:	231a      	movs	r3, #26
 8001f18:	18fb      	adds	r3, r7, r3
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	701a      	strb	r2, [r3, #0]
 8001f1e:	2319      	movs	r3, #25
 8001f20:	18fb      	adds	r3, r7, r3
 8001f22:	2200      	movs	r2, #0
 8001f24:	701a      	strb	r2, [r3, #0]
 8001f26:	2318      	movs	r3, #24
 8001f28:	18fb      	adds	r3, r7, r3
 8001f2a:	2204      	movs	r2, #4
 8001f2c:	701a      	strb	r2, [r3, #0]
 8001f2e:	2317      	movs	r3, #23
 8001f30:	18fb      	adds	r3, r7, r3
 8001f32:	2200      	movs	r2, #0
 8001f34:	701a      	strb	r2, [r3, #0]
    if (abort) {
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d042      	beq.n	8001fc2 <libswd_dap_errors_handle+0x132>
        if (operation == LIBSWD_OPERATION_ENQUEUE)
 8001f3c:	230b      	movs	r3, #11
 8001f3e:	18fb      	adds	r3, r7, r3
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d102      	bne.n	8001f4c <libswd_dap_errors_handle+0xbc>
        {
            return LIBSWD_ERROR_ENQNOTALLWD;
 8001f46:	2333      	movs	r3, #51	; 0x33
 8001f48:	425b      	negs	r3, r3
 8001f4a:	e09a      	b.n	8002082 <libswd_dap_errors_handle+0x1f2>
        }
        *abort=*abort&(LIBSWD_DP_ABORT_STKCMPCLR|LIBSWD_DP_ABORT_STKERRCLR|LIBSWD_DP_ABORT_WDERRCLR|LIBSWD_DP_ABORT_ORUNERRCLR);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	221e      	movs	r2, #30
 8001f52:	401a      	ands	r2, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	601a      	str	r2, [r3, #0]
        res=libswd_bus_write_request(libswdctx, operation, &APnDP, &W, &abort_addr);
 8001f58:	2319      	movs	r3, #25
 8001f5a:	18fc      	adds	r4, r7, r3
 8001f5c:	231b      	movs	r3, #27
 8001f5e:	18fa      	adds	r2, r7, r3
 8001f60:	230b      	movs	r3, #11
 8001f62:	18fb      	adds	r3, r7, r3
 8001f64:	7819      	ldrb	r1, [r3, #0]
 8001f66:	68f8      	ldr	r0, [r7, #12]
 8001f68:	2317      	movs	r3, #23
 8001f6a:	18fb      	adds	r3, r7, r3
 8001f6c:	9300      	str	r3, [sp, #0]
 8001f6e:	0023      	movs	r3, r4
 8001f70:	f7fe fcef 	bl	8000952 <libswd_bus_write_request>
 8001f74:	0003      	movs	r3, r0
 8001f76:	61fb      	str	r3, [r7, #28]
        if (res<0) return res;
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	da01      	bge.n	8001f82 <libswd_dap_errors_handle+0xf2>
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	e07f      	b.n	8002082 <libswd_dap_errors_handle+0x1f2>
        res=libswd_bus_read_ack(libswdctx, operation, &ack);
 8001f82:	2316      	movs	r3, #22
 8001f84:	18fa      	adds	r2, r7, r3
 8001f86:	230b      	movs	r3, #11
 8001f88:	18fb      	adds	r3, r7, r3
 8001f8a:	7819      	ldrb	r1, [r3, #0]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	0018      	movs	r0, r3
 8001f90:	f7fe fd73 	bl	8000a7a <libswd_bus_read_ack>
 8001f94:	0003      	movs	r3, r0
 8001f96:	61fb      	str	r3, [r7, #28]
        if (res<0) return res;
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	da01      	bge.n	8001fa2 <libswd_dap_errors_handle+0x112>
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	e06f      	b.n	8002082 <libswd_dap_errors_handle+0x1f2>
        res=libswd_bus_write_data_ap(libswdctx, operation, *abort);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	230b      	movs	r3, #11
 8001fa8:	18fb      	adds	r3, r7, r3
 8001faa:	7819      	ldrb	r1, [r3, #0]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	0018      	movs	r0, r3
 8001fb0:	f7fe fe83 	bl	8000cba <libswd_bus_write_data_ap>
 8001fb4:	0003      	movs	r3, r0
 8001fb6:	61fb      	str	r3, [r7, #28]
        if (res<0) return res;
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	da01      	bge.n	8001fc2 <libswd_dap_errors_handle+0x132>
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	e05f      	b.n	8002082 <libswd_dap_errors_handle+0x1f2>
    }
    if (ctrlstat){
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d05b      	beq.n	8002080 <libswd_dap_errors_handle+0x1f0>
        if (operation == LIBSWD_OPERATION_ENQUEUE)
 8001fc8:	230b      	movs	r3, #11
 8001fca:	18fb      	adds	r3, r7, r3
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d102      	bne.n	8001fd8 <libswd_dap_errors_handle+0x148>
        {
            return LIBSWD_ERROR_ENQNOTALLWD;
 8001fd2:	2333      	movs	r3, #51	; 0x33
 8001fd4:	425b      	negs	r3, r3
 8001fd6:	e054      	b.n	8002082 <libswd_dap_errors_handle+0x1f2>
        }
        res=libswd_bus_write_request(libswdctx, operation, &APnDP, &R, &ctrlstat_addr);
 8001fd8:	231a      	movs	r3, #26
 8001fda:	18fc      	adds	r4, r7, r3
 8001fdc:	231b      	movs	r3, #27
 8001fde:	18fa      	adds	r2, r7, r3
 8001fe0:	230b      	movs	r3, #11
 8001fe2:	18fb      	adds	r3, r7, r3
 8001fe4:	7819      	ldrb	r1, [r3, #0]
 8001fe6:	68f8      	ldr	r0, [r7, #12]
 8001fe8:	2318      	movs	r3, #24
 8001fea:	18fb      	adds	r3, r7, r3
 8001fec:	9300      	str	r3, [sp, #0]
 8001fee:	0023      	movs	r3, r4
 8001ff0:	f7fe fcaf 	bl	8000952 <libswd_bus_write_request>
 8001ff4:	0003      	movs	r3, r0
 8001ff6:	61fb      	str	r3, [r7, #28]
        if (res<0) return res;
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	da01      	bge.n	8002002 <libswd_dap_errors_handle+0x172>
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	e03f      	b.n	8002082 <libswd_dap_errors_handle+0x1f2>
        res=libswd_bus_read_ack(libswdctx, operation, &ack);
 8002002:	2316      	movs	r3, #22
 8002004:	18fa      	adds	r2, r7, r3
 8002006:	230b      	movs	r3, #11
 8002008:	18fb      	adds	r3, r7, r3
 800200a:	7819      	ldrb	r1, [r3, #0]
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	0018      	movs	r0, r3
 8002010:	f7fe fd33 	bl	8000a7a <libswd_bus_read_ack>
 8002014:	0003      	movs	r3, r0
 8002016:	61fb      	str	r3, [r7, #28]
        if (res<0) return res;
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	2b00      	cmp	r3, #0
 800201c:	da01      	bge.n	8002022 <libswd_dap_errors_handle+0x192>
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	e02f      	b.n	8002082 <libswd_dap_errors_handle+0x1f2>
        res=libswd_bus_read_data_p(libswdctx, operation, ctrlstat, &parity);
 8002022:	2315      	movs	r3, #21
 8002024:	18fc      	adds	r4, r7, r3
 8002026:	683a      	ldr	r2, [r7, #0]
 8002028:	230b      	movs	r3, #11
 800202a:	18fb      	adds	r3, r7, r3
 800202c:	7819      	ldrb	r1, [r3, #0]
 800202e:	68f8      	ldr	r0, [r7, #12]
 8002030:	0023      	movs	r3, r4
 8002032:	f7fe fea3 	bl	8000d7c <libswd_bus_read_data_p>
 8002036:	0003      	movs	r3, r0
 8002038:	61fb      	str	r3, [r7, #28]
        if (res<0) return res;
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	2b00      	cmp	r3, #0
 800203e:	da01      	bge.n	8002044 <libswd_dap_errors_handle+0x1b4>
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	e01e      	b.n	8002082 <libswd_dap_errors_handle+0x1f2>
        res=libswd_bin32_parity_even(*ctrlstat, &cparity);
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2214      	movs	r2, #20
 800204a:	18ba      	adds	r2, r7, r2
 800204c:	0011      	movs	r1, r2
 800204e:	0018      	movs	r0, r3
 8002050:	f7fe fa75 	bl	800053e <libswd_bin32_parity_even>
 8002054:	0003      	movs	r3, r0
 8002056:	61fb      	str	r3, [r7, #28]
        if (res<0) return res;
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	2b00      	cmp	r3, #0
 800205c:	da01      	bge.n	8002062 <libswd_dap_errors_handle+0x1d2>
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	e00f      	b.n	8002082 <libswd_dap_errors_handle+0x1f2>
        if (parity!=cparity) return LIBSWD_ERROR_PARITY;
 8002062:	2315      	movs	r3, #21
 8002064:	18fb      	adds	r3, r7, r3
 8002066:	781a      	ldrb	r2, [r3, #0]
 8002068:	2314      	movs	r3, #20
 800206a:	18fb      	adds	r3, r7, r3
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	429a      	cmp	r2, r3
 8002070:	d002      	beq.n	8002078 <libswd_dap_errors_handle+0x1e8>
 8002072:	230f      	movs	r3, #15
 8002074:	425b      	negs	r3, r3
 8002076:	e004      	b.n	8002082 <libswd_dap_errors_handle+0x1f2>
        libswdctx->log.dp.ctrlstat=*ctrlstat;
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	625a      	str	r2, [r3, #36]	; 0x24
    }
    return LIBSWD_OK;
 8002080:	2300      	movs	r3, #0
}
 8002082:	0018      	movs	r0, r3
 8002084:	46bd      	mov	sp, r7
 8002086:	b009      	add	sp, #36	; 0x24
 8002088:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800208a:	46c0      	nop			; (mov r8, r8)
 800208c:	080092ec 	.word	0x080092ec

08002090 <libswd_dp_read_idcode>:
/** Macro: Read out IDCODE register and return its value on function return.
* \param *libswdctx swd context pointer.
* \param operation operation type.
* \return Number of elements processed or LIBSWD_ERROR code error on failure.
*/
int libswd_dp_read_idcode(libswd_ctx_t *libswdctx, libswd_operation_t operation, int *idcode){
 8002090:	b5b0      	push	{r4, r5, r7, lr}
 8002092:	b08c      	sub	sp, #48	; 0x30
 8002094:	af04      	add	r7, sp, #16
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	607a      	str	r2, [r7, #4]
 800209a:	200b      	movs	r0, #11
 800209c:	183b      	adds	r3, r7, r0
 800209e:	1c0a      	adds	r2, r1, #0
 80020a0:	701a      	strb	r2, [r3, #0]
    libswd_log(libswdctx, LIBSWD_LOGLEVEL_DEBUG, "LIBSWD_D: libswd_dp_read_idcode(*libswdctx=%p, operation=%s): entering function...\n", (void*)libswdctx, libswd_operation_string(operation));
 80020a2:	183b      	adds	r3, r7, r0
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	0018      	movs	r0, r3
 80020a8:	f002 f9e4 	bl	8004474 <libswd_operation_string>
 80020ac:	0001      	movs	r1, r0
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	4a6d      	ldr	r2, [pc, #436]	; (8002268 <libswd_dp_read_idcode+0x1d8>)
 80020b2:	68f8      	ldr	r0, [r7, #12]
 80020b4:	9100      	str	r1, [sp, #0]
 80020b6:	2105      	movs	r1, #5
 80020b8:	f002 f998 	bl	80043ec <libswd_log>
    
    if (libswdctx==NULL) return LIBSWD_ERROR_NULLCONTEXT;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d102      	bne.n	80020c8 <libswd_dp_read_idcode+0x38>
 80020c2:	230a      	movs	r3, #10
 80020c4:	425b      	negs	r3, r3
 80020c6:	e0cb      	b.n	8002260 <libswd_dp_read_idcode+0x1d0>
    if (operation!=LIBSWD_OPERATION_ENQUEUE && operation!=LIBSWD_OPERATION_EXECUTE)
 80020c8:	220b      	movs	r2, #11
 80020ca:	18bb      	adds	r3, r7, r2
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d006      	beq.n	80020e0 <libswd_dp_read_idcode+0x50>
 80020d2:	18bb      	adds	r3, r7, r2
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d002      	beq.n	80020e0 <libswd_dp_read_idcode+0x50>
        return LIBSWD_ERROR_BADOPCODE;
 80020da:	2318      	movs	r3, #24
 80020dc:	425b      	negs	r3, r3
 80020de:	e0bf      	b.n	8002260 <libswd_dp_read_idcode+0x1d0>
    
    int res, cmdcnt=0;
 80020e0:	2300      	movs	r3, #0
 80020e2:	61fb      	str	r3, [r7, #28]
    char APnDP, RnW, addr, cparity, ack, parity;
    
    APnDP=0;
 80020e4:	2017      	movs	r0, #23
 80020e6:	183b      	adds	r3, r7, r0
 80020e8:	2200      	movs	r2, #0
 80020ea:	701a      	strb	r2, [r3, #0]
    RnW=1;
 80020ec:	2116      	movs	r1, #22
 80020ee:	187b      	adds	r3, r7, r1
 80020f0:	2201      	movs	r2, #1
 80020f2:	701a      	strb	r2, [r3, #0]
    addr=LIBSWD_DP_IDCODE_ADDR;
 80020f4:	2415      	movs	r4, #21
 80020f6:	193b      	adds	r3, r7, r4
 80020f8:	2200      	movs	r2, #0
 80020fa:	701a      	strb	r2, [r3, #0]
    
    res=libswd_bus_write_request(libswdctx, LIBSWD_OPERATION_ENQUEUE, &APnDP, &RnW, &addr);
 80020fc:	1879      	adds	r1, r7, r1
 80020fe:	183a      	adds	r2, r7, r0
 8002100:	68f8      	ldr	r0, [r7, #12]
 8002102:	193b      	adds	r3, r7, r4
 8002104:	9300      	str	r3, [sp, #0]
 8002106:	000b      	movs	r3, r1
 8002108:	2101      	movs	r1, #1
 800210a:	f7fe fc22 	bl	8000952 <libswd_bus_write_request>
 800210e:	0003      	movs	r3, r0
 8002110:	61bb      	str	r3, [r7, #24]
    if (res<1) return res;
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	2b00      	cmp	r3, #0
 8002116:	dc01      	bgt.n	800211c <libswd_dp_read_idcode+0x8c>
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	e0a1      	b.n	8002260 <libswd_dp_read_idcode+0x1d0>
    cmdcnt=+res;
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	61fb      	str	r3, [r7, #28]
    
    if (operation==LIBSWD_OPERATION_ENQUEUE){
 8002120:	210b      	movs	r1, #11
 8002122:	187b      	adds	r3, r7, r1
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d129      	bne.n	800217e <libswd_dp_read_idcode+0xee>
        res=libswd_bus_read_ack(libswdctx, operation, &libswdctx->qlog.read.ack);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	33c5      	adds	r3, #197	; 0xc5
 800212e:	001a      	movs	r2, r3
 8002130:	187b      	adds	r3, r7, r1
 8002132:	7819      	ldrb	r1, [r3, #0]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	0018      	movs	r0, r3
 8002138:	f7fe fc9f 	bl	8000a7a <libswd_bus_read_ack>
 800213c:	0003      	movs	r3, r0
 800213e:	61bb      	str	r3, [r7, #24]
        if (res<1) return res;
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	2b00      	cmp	r3, #0
 8002144:	dc01      	bgt.n	800214a <libswd_dp_read_idcode+0xba>
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	e08a      	b.n	8002260 <libswd_dp_read_idcode+0x1d0>
        cmdcnt=+res;
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	61fb      	str	r3, [r7, #28]
        res=libswd_bus_read_data_p(libswdctx, operation, &libswdctx->qlog.read.data, &libswdctx->qlog.read.parity);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	33c8      	adds	r3, #200	; 0xc8
 8002152:	001a      	movs	r2, r3
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	33d1      	adds	r3, #209	; 0xd1
 8002158:	001c      	movs	r4, r3
 800215a:	230b      	movs	r3, #11
 800215c:	18fb      	adds	r3, r7, r3
 800215e:	7819      	ldrb	r1, [r3, #0]
 8002160:	68f8      	ldr	r0, [r7, #12]
 8002162:	0023      	movs	r3, r4
 8002164:	f7fe fe0a 	bl	8000d7c <libswd_bus_read_data_p>
 8002168:	0003      	movs	r3, r0
 800216a:	61bb      	str	r3, [r7, #24]
        if (res<1) return res;
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	2b00      	cmp	r3, #0
 8002170:	dc01      	bgt.n	8002176 <libswd_dp_read_idcode+0xe6>
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	e074      	b.n	8002260 <libswd_dp_read_idcode+0x1d0>
        cmdcnt=+res;
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	61fb      	str	r3, [r7, #28]
        return cmdcnt;
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	e070      	b.n	8002260 <libswd_dp_read_idcode+0x1d0>
        
    } else if (operation==LIBSWD_OPERATION_EXECUTE){
 800217e:	210b      	movs	r1, #11
 8002180:	187b      	adds	r3, r7, r1
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	2b02      	cmp	r3, #2
 8002186:	d169      	bne.n	800225c <libswd_dp_read_idcode+0x1cc>
        res=libswd_bus_read_ack(libswdctx, operation, &ack);
 8002188:	2313      	movs	r3, #19
 800218a:	18fa      	adds	r2, r7, r3
 800218c:	187b      	adds	r3, r7, r1
 800218e:	7819      	ldrb	r1, [r3, #0]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	0018      	movs	r0, r3
 8002194:	f7fe fc71 	bl	8000a7a <libswd_bus_read_ack>
 8002198:	0003      	movs	r3, r0
 800219a:	61bb      	str	r3, [r7, #24]
        if (res<1) return res;
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	dc01      	bgt.n	80021a6 <libswd_dp_read_idcode+0x116>
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	e05c      	b.n	8002260 <libswd_dp_read_idcode+0x1d0>
        cmdcnt+=res;
 80021a6:	69fa      	ldr	r2, [r7, #28]
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	18d3      	adds	r3, r2, r3
 80021ac:	61fb      	str	r3, [r7, #28]
        res=libswd_bus_read_data_p(libswdctx, operation, idcode, &parity);
 80021ae:	2312      	movs	r3, #18
 80021b0:	18fc      	adds	r4, r7, r3
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	230b      	movs	r3, #11
 80021b6:	18fb      	adds	r3, r7, r3
 80021b8:	7819      	ldrb	r1, [r3, #0]
 80021ba:	68f8      	ldr	r0, [r7, #12]
 80021bc:	0023      	movs	r3, r4
 80021be:	f7fe fddd 	bl	8000d7c <libswd_bus_read_data_p>
 80021c2:	0003      	movs	r3, r0
 80021c4:	61bb      	str	r3, [r7, #24]
        if (res<0) return res;
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	da01      	bge.n	80021d0 <libswd_dp_read_idcode+0x140>
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	e047      	b.n	8002260 <libswd_dp_read_idcode+0x1d0>
        cmdcnt+=res;
 80021d0:	69fa      	ldr	r2, [r7, #28]
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	18d3      	adds	r3, r2, r3
 80021d6:	61fb      	str	r3, [r7, #28]
        libswdctx->log.dp.idcode=*idcode;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	61da      	str	r2, [r3, #28]
        libswdctx->log.dp.parity=parity;
 80021e0:	2312      	movs	r3, #18
 80021e2:	18fb      	adds	r3, r7, r3
 80021e4:	781a      	ldrb	r2, [r3, #0]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	769a      	strb	r2, [r3, #26]
        libswdctx->log.dp.ack = ack;
 80021ea:	2313      	movs	r3, #19
 80021ec:	18fb      	adds	r3, r7, r3
 80021ee:	781a      	ldrb	r2, [r3, #0]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	765a      	strb	r2, [r3, #25]
        res=libswd_bin32_parity_even(*idcode, &cparity);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2214      	movs	r2, #20
 80021fa:	18ba      	adds	r2, r7, r2
 80021fc:	0011      	movs	r1, r2
 80021fe:	0018      	movs	r0, r3
 8002200:	f7fe f99d 	bl	800053e <libswd_bin32_parity_even>
 8002204:	0003      	movs	r3, r0
 8002206:	61bb      	str	r3, [r7, #24]
        if (res<0) return res;
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	2b00      	cmp	r3, #0
 800220c:	da01      	bge.n	8002212 <libswd_dp_read_idcode+0x182>
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	e026      	b.n	8002260 <libswd_dp_read_idcode+0x1d0>
        if (cparity!=parity) return LIBSWD_ERROR_PARITY;
 8002212:	2314      	movs	r3, #20
 8002214:	18fb      	adds	r3, r7, r3
 8002216:	781a      	ldrb	r2, [r3, #0]
 8002218:	2312      	movs	r3, #18
 800221a:	18fb      	adds	r3, r7, r3
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	429a      	cmp	r2, r3
 8002220:	d002      	beq.n	8002228 <libswd_dp_read_idcode+0x198>
 8002222:	230f      	movs	r3, #15
 8002224:	425b      	negs	r3, r3
 8002226:	e01b      	b.n	8002260 <libswd_dp_read_idcode+0x1d0>
        libswd_log(libswdctx, LIBSWD_LOGLEVEL_INFO, "LIBSWD_I: libswd_dp_read_idcode(libswdctx=@%p, operation=%s, *idcode=0x%X/%s).\n", (void*)libswdctx, libswd_operation_string(operation), *idcode, libswd_bin32_string(*idcode));
 8002228:	230b      	movs	r3, #11
 800222a:	18fb      	adds	r3, r7, r3
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	0018      	movs	r0, r3
 8002230:	f002 f920 	bl	8004474 <libswd_operation_string>
 8002234:	0005      	movs	r5, r0
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681c      	ldr	r4, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	0018      	movs	r0, r3
 8002240:	f7fe f9e6 	bl	8000610 <libswd_bin32_string>
 8002244:	0001      	movs	r1, r0
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	4a08      	ldr	r2, [pc, #32]	; (800226c <libswd_dp_read_idcode+0x1dc>)
 800224a:	68f8      	ldr	r0, [r7, #12]
 800224c:	9102      	str	r1, [sp, #8]
 800224e:	9401      	str	r4, [sp, #4]
 8002250:	9500      	str	r5, [sp, #0]
 8002252:	2104      	movs	r1, #4
 8002254:	f002 f8ca 	bl	80043ec <libswd_log>
        return cmdcnt;
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	e001      	b.n	8002260 <libswd_dp_read_idcode+0x1d0>
    } else return LIBSWD_ERROR_BADOPCODE;
 800225c:	2318      	movs	r3, #24
 800225e:	425b      	negs	r3, r3
}
 8002260:	0018      	movs	r0, r3
 8002262:	46bd      	mov	sp, r7
 8002264:	b008      	add	sp, #32
 8002266:	bdb0      	pop	{r4, r5, r7, pc}
 8002268:	0800935c 	.word	0x0800935c
 800226c:	080093b0 	.word	0x080093b0

08002270 <libswd_dap_detect>:
* This is the proper SW-DP initialization as stated by ARM Information Center.
* \param *libswdctx swd context pointer.
* \param operation type (LIBSWD_OPERATION_ENQUEUE or LIBSWD_OPERATION_EXECUTE).
* \return Target's IDCODE, or LIBSWD_ERROR_CODE on failure.
*/
int libswd_dap_detect(libswd_ctx_t *libswdctx, libswd_operation_t operation, int *idcode){
 8002270:	b580      	push	{r7, lr}
 8002272:	b086      	sub	sp, #24
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	607a      	str	r2, [r7, #4]
 800227a:	200b      	movs	r0, #11
 800227c:	183b      	adds	r3, r7, r0
 800227e:	1c0a      	adds	r2, r1, #0
 8002280:	701a      	strb	r2, [r3, #0]
    int res;
    res=libswd_dap_select(libswdctx, operation);
 8002282:	183b      	adds	r3, r7, r0
 8002284:	781a      	ldrb	r2, [r3, #0]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	0011      	movs	r1, r2
 800228a:	0018      	movs	r0, r3
 800228c:	f7ff fd98 	bl	8001dc0 <libswd_dap_select>
 8002290:	0003      	movs	r3, r0
 8002292:	617b      	str	r3, [r7, #20]
    if (res<1) return res;
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	2b00      	cmp	r3, #0
 8002298:	dc01      	bgt.n	800229e <libswd_dap_detect+0x2e>
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	e01e      	b.n	80022dc <libswd_dap_detect+0x6c>
    res=libswd_dap_reset(libswdctx, operation);
 800229e:	230b      	movs	r3, #11
 80022a0:	18fb      	adds	r3, r7, r3
 80022a2:	781a      	ldrb	r2, [r3, #0]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	0011      	movs	r1, r2
 80022a8:	0018      	movs	r0, r3
 80022aa:	f7ff fd19 	bl	8001ce0 <libswd_dap_reset>
 80022ae:	0003      	movs	r3, r0
 80022b0:	617b      	str	r3, [r7, #20]
    if (res<1) return res;
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	dc01      	bgt.n	80022bc <libswd_dap_detect+0x4c>
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	e00f      	b.n	80022dc <libswd_dap_detect+0x6c>
    res=libswd_dp_read_idcode(libswdctx, operation, idcode);
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	230b      	movs	r3, #11
 80022c0:	18fb      	adds	r3, r7, r3
 80022c2:	7819      	ldrb	r1, [r3, #0]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	0018      	movs	r0, r3
 80022c8:	f7ff fee2 	bl	8002090 <libswd_dp_read_idcode>
 80022cc:	0003      	movs	r3, r0
 80022ce:	617b      	str	r3, [r7, #20]
    if (res<0) return res;
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	da01      	bge.n	80022da <libswd_dap_detect+0x6a>
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	e000      	b.n	80022dc <libswd_dap_detect+0x6c>
    return LIBSWD_OK;
 80022da:	2300      	movs	r3, #0
}
 80022dc:	0018      	movs	r0, r3
 80022de:	46bd      	mov	sp, r7
 80022e0:	b006      	add	sp, #24
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <libswd_dp_read>:
* \param operation can be LIBSWD_OPERATION_ENQUEUE or LIBSWD_OPERATION_EXECUTE.
* \param addr is the address of the DP register to read.
* \param *data is the pointer to data where result will be stored.
* \return number of elements processed or LIBSWD_ERROR_CODE on failure.
*/
int libswd_dp_read(libswd_ctx_t *libswdctx, libswd_operation_t operation, char addr, int *data){
 80022e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022e6:	46c6      	mov	lr, r8
 80022e8:	b500      	push	{lr}
 80022ea:	b092      	sub	sp, #72	; 0x48
 80022ec:	af06      	add	r7, sp, #24
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	0008      	movs	r0, r1
 80022f2:	0011      	movs	r1, r2
 80022f4:	607b      	str	r3, [r7, #4]
 80022f6:	240b      	movs	r4, #11
 80022f8:	193b      	adds	r3, r7, r4
 80022fa:	1c02      	adds	r2, r0, #0
 80022fc:	701a      	strb	r2, [r3, #0]
 80022fe:	250a      	movs	r5, #10
 8002300:	197b      	adds	r3, r7, r5
 8002302:	1c0a      	adds	r2, r1, #0
 8002304:	701a      	strb	r2, [r3, #0]
    libswd_log(libswdctx, LIBSWD_LOGLEVEL_DEBUG, "LIBSWD_D: libswd_dp_read(libswdctx=@%p, operation=%s, addr=0x%X, *data=%p) entering function...\n", (void*)libswdctx, libswd_operation_string(operation), addr, *data);
 8002306:	193b      	adds	r3, r7, r4
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	0018      	movs	r0, r3
 800230c:	f002 f8b2 	bl	8004474 <libswd_operation_string>
 8002310:	0004      	movs	r4, r0
 8002312:	197b      	adds	r3, r7, r5
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	001d      	movs	r5, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	68f9      	ldr	r1, [r7, #12]
 800231e:	4ab7      	ldr	r2, [pc, #732]	; (80025fc <libswd_dp_read+0x318>)
 8002320:	68f8      	ldr	r0, [r7, #12]
 8002322:	9302      	str	r3, [sp, #8]
 8002324:	9501      	str	r5, [sp, #4]
 8002326:	9400      	str	r4, [sp, #0]
 8002328:	000b      	movs	r3, r1
 800232a:	2105      	movs	r1, #5
 800232c:	f002 f85e 	bl	80043ec <libswd_log>
    
    if (libswdctx==NULL) return LIBSWD_ERROR_NULLCONTEXT;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d102      	bne.n	800233c <libswd_dp_read+0x58>
 8002336:	230a      	movs	r3, #10
 8002338:	425b      	negs	r3, r3
 800233a:	e159      	b.n	80025f0 <libswd_dp_read+0x30c>
    if (data==NULL) return LIBSWD_ERROR_NULLPOINTER;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d102      	bne.n	8002348 <libswd_dp_read+0x64>
 8002342:	2302      	movs	r3, #2
 8002344:	425b      	negs	r3, r3
 8002346:	e153      	b.n	80025f0 <libswd_dp_read+0x30c>
    if (operation!=LIBSWD_OPERATION_ENQUEUE && operation!=LIBSWD_OPERATION_EXECUTE)
 8002348:	220b      	movs	r2, #11
 800234a:	18bb      	adds	r3, r7, r2
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	2b01      	cmp	r3, #1
 8002350:	d006      	beq.n	8002360 <libswd_dp_read+0x7c>
 8002352:	18bb      	adds	r3, r7, r2
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	2b02      	cmp	r3, #2
 8002358:	d002      	beq.n	8002360 <libswd_dp_read+0x7c>
        return LIBSWD_ERROR_BADOPCODE;
 800235a:	2318      	movs	r3, #24
 800235c:	425b      	negs	r3, r3
 800235e:	e147      	b.n	80025f0 <libswd_dp_read+0x30c>
    
    int res, cmdcnt=0;
 8002360:	2300      	movs	r3, #0
 8002362:	62bb      	str	r3, [r7, #40]	; 0x28
    char APnDP, RnW, cparity, ack, parity, request;
    
    APnDP=0;
 8002364:	2123      	movs	r1, #35	; 0x23
 8002366:	187b      	adds	r3, r7, r1
 8002368:	2200      	movs	r2, #0
 800236a:	701a      	strb	r2, [r3, #0]
    RnW=1;
 800236c:	2022      	movs	r0, #34	; 0x22
 800236e:	183b      	adds	r3, r7, r0
 8002370:	2201      	movs	r2, #1
 8002372:	701a      	strb	r2, [r3, #0]
    
    res=libswd_bitgen8_request(libswdctx, &APnDP, &RnW, &addr, &request);
 8002374:	230a      	movs	r3, #10
 8002376:	18fc      	adds	r4, r7, r3
 8002378:	183a      	adds	r2, r7, r0
 800237a:	1879      	adds	r1, r7, r1
 800237c:	68f8      	ldr	r0, [r7, #12]
 800237e:	231e      	movs	r3, #30
 8002380:	18fb      	adds	r3, r7, r3
 8002382:	9300      	str	r3, [sp, #0]
 8002384:	0023      	movs	r3, r4
 8002386:	f7fe f96d 	bl	8000664 <libswd_bitgen8_request>
 800238a:	0003      	movs	r3, r0
 800238c:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (res<0) return res;
 800238e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002390:	2b00      	cmp	r3, #0
 8002392:	da01      	bge.n	8002398 <libswd_dp_read+0xb4>
 8002394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002396:	e12b      	b.n	80025f0 <libswd_dp_read+0x30c>
    res=libswd_bus_write_request_raw(libswdctx, LIBSWD_OPERATION_ENQUEUE, request);
 8002398:	231e      	movs	r3, #30
 800239a:	18fb      	adds	r3, r7, r3
 800239c:	781a      	ldrb	r2, [r3, #0]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2101      	movs	r1, #1
 80023a2:	0018      	movs	r0, r3
 80023a4:	f7fe fa6a 	bl	800087c <libswd_bus_write_request_raw>
 80023a8:	0003      	movs	r3, r0
 80023aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (res<1) return res;
 80023ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	dc01      	bgt.n	80023b6 <libswd_dp_read+0xd2>
 80023b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023b4:	e11c      	b.n	80025f0 <libswd_dp_read+0x30c>
    cmdcnt=+res;
 80023b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023b8:	62bb      	str	r3, [r7, #40]	; 0x28
    
    if (operation==LIBSWD_OPERATION_ENQUEUE){
 80023ba:	230b      	movs	r3, #11
 80023bc:	18fb      	adds	r3, r7, r3
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d102      	bne.n	80023ca <libswd_dp_read+0xe6>
        return LIBSWD_ERROR_ENQNOTALLWD;    // TBD PW replace data with qlog?
 80023c4:	2333      	movs	r3, #51	; 0x33
 80023c6:	425b      	negs	r3, r3
 80023c8:	e112      	b.n	80025f0 <libswd_dp_read+0x30c>
        res=libswd_bus_read_data_p(libswdctx, operation, data, &libswdctx->qlog.read.parity);
        if (res<1) return res;
        cmdcnt=+res;
        return cmdcnt;*/
        
    } else if (operation==LIBSWD_OPERATION_EXECUTE){
 80023ca:	250b      	movs	r5, #11
 80023cc:	197b      	adds	r3, r7, r5
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d000      	beq.n	80023d6 <libswd_dp_read+0xf2>
 80023d4:	e10a      	b.n	80025ec <libswd_dp_read+0x308>
        res=libswd_bus_read_ack(libswdctx, operation, &ack);
 80023d6:	2320      	movs	r3, #32
 80023d8:	18fa      	adds	r2, r7, r3
 80023da:	197b      	adds	r3, r7, r5
 80023dc:	7819      	ldrb	r1, [r3, #0]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	0018      	movs	r0, r3
 80023e2:	f7fe fb4a 	bl	8000a7a <libswd_bus_read_ack>
 80023e6:	0003      	movs	r3, r0
 80023e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (res>=0) {
 80023ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	db2c      	blt.n	800244a <libswd_dp_read+0x166>
            res=libswd_bus_read_data_p(libswdctx, operation, data, &parity);
 80023f0:	231f      	movs	r3, #31
 80023f2:	18fc      	adds	r4, r7, r3
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	197b      	adds	r3, r7, r5
 80023f8:	7819      	ldrb	r1, [r3, #0]
 80023fa:	68f8      	ldr	r0, [r7, #12]
 80023fc:	0023      	movs	r3, r4
 80023fe:	f7fe fcbd 	bl	8000d7c <libswd_bus_read_data_p>
 8002402:	0003      	movs	r3, r0
 8002404:	62fb      	str	r3, [r7, #44]	; 0x2c
            if (res<0) return res;
 8002406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002408:	2b00      	cmp	r3, #0
 800240a:	da01      	bge.n	8002410 <libswd_dp_read+0x12c>
 800240c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800240e:	e0ef      	b.n	80025f0 <libswd_dp_read+0x30c>
            res=libswd_bin32_parity_even(*data, &cparity);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2221      	movs	r2, #33	; 0x21
 8002416:	18ba      	adds	r2, r7, r2
 8002418:	0011      	movs	r1, r2
 800241a:	0018      	movs	r0, r3
 800241c:	f7fe f88f 	bl	800053e <libswd_bin32_parity_even>
 8002420:	0003      	movs	r3, r0
 8002422:	62fb      	str	r3, [r7, #44]	; 0x2c
            if (res<0) return res;
 8002424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002426:	2b00      	cmp	r3, #0
 8002428:	da01      	bge.n	800242e <libswd_dp_read+0x14a>
 800242a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800242c:	e0e0      	b.n	80025f0 <libswd_dp_read+0x30c>
            if (cparity!=parity) return LIBSWD_ERROR_PARITY;
 800242e:	2321      	movs	r3, #33	; 0x21
 8002430:	18fb      	adds	r3, r7, r3
 8002432:	781a      	ldrb	r2, [r3, #0]
 8002434:	231f      	movs	r3, #31
 8002436:	18fb      	adds	r3, r7, r3
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	429a      	cmp	r2, r3
 800243c:	d002      	beq.n	8002444 <libswd_dp_read+0x160>
 800243e:	230f      	movs	r3, #15
 8002440:	425b      	negs	r3, r3
 8002442:	e0d5      	b.n	80025f0 <libswd_dp_read+0x30c>
            cmdcnt=+res;
 8002444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002446:	62bb      	str	r3, [r7, #40]	; 0x28
 8002448:	e05b      	b.n	8002502 <libswd_dp_read+0x21e>
        } else if (res==LIBSWD_ERROR_ACK_WAIT) {
 800244a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800244c:	3324      	adds	r3, #36	; 0x24
 800244e:	d158      	bne.n	8002502 <libswd_dp_read+0x21e>
            //We got ACK==WAIT, retry last transfer until success or failure.
            int retry, ctrlstat, abort;
            for (retry=LIBSWD_RETRY_COUNT_DEFAULT; retry>0; retry--){
 8002450:	230a      	movs	r3, #10
 8002452:	627b      	str	r3, [r7, #36]	; 0x24
 8002454:	e04a      	b.n	80024ec <libswd_dp_read+0x208>
                abort=0xFFFFFFFE;
 8002456:	2302      	movs	r3, #2
 8002458:	425b      	negs	r3, r3
 800245a:	617b      	str	r3, [r7, #20]
                res=libswd_dap_errors_handle(libswdctx, LIBSWD_OPERATION_EXECUTE, &abort, &ctrlstat);
 800245c:	2318      	movs	r3, #24
 800245e:	18fb      	adds	r3, r7, r3
 8002460:	2214      	movs	r2, #20
 8002462:	18ba      	adds	r2, r7, r2
 8002464:	68f8      	ldr	r0, [r7, #12]
 8002466:	2102      	movs	r1, #2
 8002468:	f7ff fd12 	bl	8001e90 <libswd_dap_errors_handle>
 800246c:	0003      	movs	r3, r0
 800246e:	62fb      	str	r3, [r7, #44]	; 0x2c
                if (res<0) continue;
 8002470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002472:	2b00      	cmp	r3, #0
 8002474:	db30      	blt.n	80024d8 <libswd_dp_read+0x1f4>
                res=libswd_bus_write_request_raw(libswdctx, LIBSWD_OPERATION_ENQUEUE, request);
 8002476:	231e      	movs	r3, #30
 8002478:	18fb      	adds	r3, r7, r3
 800247a:	781a      	ldrb	r2, [r3, #0]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2101      	movs	r1, #1
 8002480:	0018      	movs	r0, r3
 8002482:	f7fe f9fb 	bl	800087c <libswd_bus_write_request_raw>
 8002486:	0003      	movs	r3, r0
 8002488:	62fb      	str	r3, [r7, #44]	; 0x2c
                if (res<0) continue;
 800248a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800248c:	2b00      	cmp	r3, #0
 800248e:	db25      	blt.n	80024dc <libswd_dp_read+0x1f8>
                res=libswd_bus_read_ack(libswdctx, LIBSWD_OPERATION_EXECUTE, &ack);
 8002490:	2320      	movs	r3, #32
 8002492:	18fa      	adds	r2, r7, r3
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2102      	movs	r1, #2
 8002498:	0018      	movs	r0, r3
 800249a:	f7fe faee 	bl	8000a7a <libswd_bus_read_ack>
 800249e:	0003      	movs	r3, r0
 80024a0:	62fb      	str	r3, [r7, #44]	; 0x2c
                if (res<0) continue;
 80024a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	db1b      	blt.n	80024e0 <libswd_dp_read+0x1fc>
                res=libswd_bus_read_data_p(libswdctx, LIBSWD_OPERATION_EXECUTE, data, &parity);
 80024a8:	231f      	movs	r3, #31
 80024aa:	18fb      	adds	r3, r7, r3
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	68f8      	ldr	r0, [r7, #12]
 80024b0:	2102      	movs	r1, #2
 80024b2:	f7fe fc63 	bl	8000d7c <libswd_bus_read_data_p>
 80024b6:	0003      	movs	r3, r0
 80024b8:	62fb      	str	r3, [r7, #44]	; 0x2c
                if (res<0) continue;
 80024ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024bc:	2b00      	cmp	r3, #0
 80024be:	db11      	blt.n	80024e4 <libswd_dp_read+0x200>
                res=libswd_dp_read(libswdctx, LIBSWD_OPERATION_EXECUTE, LIBSWD_DP_RDBUFF_ADDR, data);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	68f8      	ldr	r0, [r7, #12]
 80024c4:	220c      	movs	r2, #12
 80024c6:	2102      	movs	r1, #2
 80024c8:	f7ff ff0c 	bl	80022e4 <libswd_dp_read>
 80024cc:	0003      	movs	r3, r0
 80024ce:	62fb      	str	r3, [r7, #44]	; 0x2c
                if (res<0) continue;
 80024d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	da0e      	bge.n	80024f4 <libswd_dp_read+0x210>
 80024d6:	e006      	b.n	80024e6 <libswd_dp_read+0x202>
                if (res<0) continue;
 80024d8:	46c0      	nop			; (mov r8, r8)
 80024da:	e004      	b.n	80024e6 <libswd_dp_read+0x202>
                if (res<0) continue;
 80024dc:	46c0      	nop			; (mov r8, r8)
 80024de:	e002      	b.n	80024e6 <libswd_dp_read+0x202>
                if (res<0) continue;
 80024e0:	46c0      	nop			; (mov r8, r8)
 80024e2:	e000      	b.n	80024e6 <libswd_dp_read+0x202>
                if (res<0) continue;
 80024e4:	46c0      	nop			; (mov r8, r8)
            for (retry=LIBSWD_RETRY_COUNT_DEFAULT; retry>0; retry--){
 80024e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e8:	3b01      	subs	r3, #1
 80024ea:	627b      	str	r3, [r7, #36]	; 0x24
 80024ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	dcb1      	bgt.n	8002456 <libswd_dp_read+0x172>
 80024f2:	e000      	b.n	80024f6 <libswd_dp_read+0x212>
                break;
 80024f4:	46c0      	nop			; (mov r8, r8)
            }
            if (retry==0) return LIBSWD_ERROR_MAXRETRY;
 80024f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d102      	bne.n	8002502 <libswd_dp_read+0x21e>
 80024fc:	232b      	movs	r3, #43	; 0x2b
 80024fe:	425b      	negs	r3, r3
 8002500:	e076      	b.n	80025f0 <libswd_dp_read+0x30c>
        }
        if (res<0) {
 8002502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002504:	2b00      	cmp	r3, #0
 8002506:	da26      	bge.n	8002556 <libswd_dp_read+0x272>
            libswd_log(libswdctx, LIBSWD_LOGLEVEL_ERROR, "LIBSWD_E: libswd_dp_read(libswdctx=@%p, operation=%s, addr=0x%X, *data=0x%X/%s) failed: %s.\n", (void*)libswdctx, libswd_operation_string(operation), addr, *data, libswd_bin32_string(*data), libswd_error_string((libswd_error_code_t)res));
 8002508:	230b      	movs	r3, #11
 800250a:	18fb      	adds	r3, r7, r3
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	0018      	movs	r0, r3
 8002510:	f001 ffb0 	bl	8004474 <libswd_operation_string>
 8002514:	0005      	movs	r5, r0
 8002516:	230a      	movs	r3, #10
 8002518:	18fb      	adds	r3, r7, r3
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	4698      	mov	r8, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681c      	ldr	r4, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	0018      	movs	r0, r3
 8002528:	f7fe f872 	bl	8000610 <libswd_bin32_string>
 800252c:	0006      	movs	r6, r0
 800252e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002530:	b25b      	sxtb	r3, r3
 8002532:	0018      	movs	r0, r3
 8002534:	f001 fa02 	bl	800393c <libswd_error_string>
 8002538:	0001      	movs	r1, r0
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	4a30      	ldr	r2, [pc, #192]	; (8002600 <libswd_dp_read+0x31c>)
 800253e:	68f8      	ldr	r0, [r7, #12]
 8002540:	9104      	str	r1, [sp, #16]
 8002542:	9603      	str	r6, [sp, #12]
 8002544:	9402      	str	r4, [sp, #8]
 8002546:	4641      	mov	r1, r8
 8002548:	9101      	str	r1, [sp, #4]
 800254a:	9500      	str	r5, [sp, #0]
 800254c:	2102      	movs	r1, #2
 800254e:	f001 ff4d 	bl	80043ec <libswd_log>
            return res;
 8002552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002554:	e04c      	b.n	80025f0 <libswd_dp_read+0x30c>
        }
        libswd_log(libswdctx, LIBSWD_LOGLEVEL_DEBUG, "LIBSWD_D: libswd_dp_read(libswdctx=@%p, operation=%s, addr=0x%X, *data=0x%X/%s) execution OK.\n", (void*)libswdctx, libswd_operation_string(operation), addr, *data, libswd_bin32_string(*data));
 8002556:	230b      	movs	r3, #11
 8002558:	18fb      	adds	r3, r7, r3
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	0018      	movs	r0, r3
 800255e:	f001 ff89 	bl	8004474 <libswd_operation_string>
 8002562:	0005      	movs	r5, r0
 8002564:	230a      	movs	r3, #10
 8002566:	18fb      	adds	r3, r7, r3
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	001e      	movs	r6, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681c      	ldr	r4, [r3, #0]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	0018      	movs	r0, r3
 8002576:	f7fe f84b 	bl	8000610 <libswd_bin32_string>
 800257a:	0001      	movs	r1, r0
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	4a21      	ldr	r2, [pc, #132]	; (8002604 <libswd_dp_read+0x320>)
 8002580:	68f8      	ldr	r0, [r7, #12]
 8002582:	9103      	str	r1, [sp, #12]
 8002584:	9402      	str	r4, [sp, #8]
 8002586:	9601      	str	r6, [sp, #4]
 8002588:	9500      	str	r5, [sp, #0]
 800258a:	2105      	movs	r1, #5
 800258c:	f001 ff2e 	bl	80043ec <libswd_log>
        // Here we also can cache DP register values into libswdctx log.
        switch(addr){
 8002590:	230a      	movs	r3, #10
 8002592:	18fb      	adds	r3, r7, r3
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	2b0c      	cmp	r3, #12
 8002598:	d00d      	beq.n	80025b6 <libswd_dp_read+0x2d2>
 800259a:	dc25      	bgt.n	80025e8 <libswd_dp_read+0x304>
 800259c:	2b08      	cmp	r3, #8
 800259e:	d00f      	beq.n	80025c0 <libswd_dp_read+0x2dc>
 80025a0:	dc22      	bgt.n	80025e8 <libswd_dp_read+0x304>
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d002      	beq.n	80025ac <libswd_dp_read+0x2c8>
 80025a6:	2b04      	cmp	r3, #4
 80025a8:	d00f      	beq.n	80025ca <libswd_dp_read+0x2e6>
 80025aa:	e01d      	b.n	80025e8 <libswd_dp_read+0x304>
        case LIBSWD_DP_IDCODE_ADDR: libswdctx->log.dp.idcode=*data; break;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	61da      	str	r2, [r3, #28]
 80025b4:	e018      	b.n	80025e8 <libswd_dp_read+0x304>
        case LIBSWD_DP_RDBUFF_ADDR: libswdctx->log.dp.rdbuff=*data; break;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	635a      	str	r2, [r3, #52]	; 0x34
 80025be:	e013      	b.n	80025e8 <libswd_dp_read+0x304>
        case LIBSWD_DP_RESEND_ADDR: libswdctx->log.dp.resend=*data; break;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	631a      	str	r2, [r3, #48]	; 0x30
 80025c8:	e00e      	b.n	80025e8 <libswd_dp_read+0x304>
        case LIBSWD_DP_CTRLSTAT_ADDR: // which is also LIBSWD_DP_WCR_ADDR
            if (libswdctx->log.dp.select&LIBSWD_DP_SELECT_CTRLSEL){
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ce:	2201      	movs	r2, #1
 80025d0:	4013      	ands	r3, r2
 80025d2:	d004      	beq.n	80025de <libswd_dp_read+0x2fa>
                libswdctx->log.dp.wcr=*data;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	629a      	str	r2, [r3, #40]	; 0x28
            } else libswdctx->log.dp.ctrlstat=*data;
            break;
 80025dc:	e003      	b.n	80025e6 <libswd_dp_read+0x302>
            } else libswdctx->log.dp.ctrlstat=*data;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	625a      	str	r2, [r3, #36]	; 0x24
            break;
 80025e6:	46c0      	nop			; (mov r8, r8)
        }
        return cmdcnt;
 80025e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ea:	e001      	b.n	80025f0 <libswd_dp_read+0x30c>
    } else return LIBSWD_ERROR_BADOPCODE;
 80025ec:	2318      	movs	r3, #24
 80025ee:	425b      	negs	r3, r3
}
 80025f0:	0018      	movs	r0, r3
 80025f2:	46bd      	mov	sp, r7
 80025f4:	b00c      	add	sp, #48	; 0x30
 80025f6:	bc80      	pop	{r7}
 80025f8:	46b8      	mov	r8, r7
 80025fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025fc:	08009400 	.word	0x08009400
 8002600:	08009464 	.word	0x08009464
 8002604:	080094c4 	.word	0x080094c4

08002608 <libswd_dp_write>:
* \param operation can be LIBSWD_OPERATION_ENQUEUE or LIBSWD_OPERATION_EXECUTE.
* \param addr is the address of the DP register to write.
* \param *data is the pointer to data to be written.
* \return number of elements processed or LIBSWD_ERROR code on failure.
*/
int libswd_dp_write(libswd_ctx_t *libswdctx, libswd_operation_t operation, char addr, int data){
 8002608:	b5f0      	push	{r4, r5, r6, r7, lr}
 800260a:	b091      	sub	sp, #68	; 0x44
 800260c:	af06      	add	r7, sp, #24
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	0008      	movs	r0, r1
 8002612:	0011      	movs	r1, r2
 8002614:	607b      	str	r3, [r7, #4]
 8002616:	240b      	movs	r4, #11
 8002618:	193b      	adds	r3, r7, r4
 800261a:	1c02      	adds	r2, r0, #0
 800261c:	701a      	strb	r2, [r3, #0]
 800261e:	250a      	movs	r5, #10
 8002620:	197b      	adds	r3, r7, r5
 8002622:	1c0a      	adds	r2, r1, #0
 8002624:	701a      	strb	r2, [r3, #0]
    libswd_log(libswdctx, LIBSWD_LOGLEVEL_DEBUG, "LIBSWD_D: libswd_dp_write(*libswdctx=%p, operation=%s, addr=0x%X, data=%p) entering function...\n", (void*)libswdctx, libswd_operation_string(operation), addr, data);
 8002626:	193b      	adds	r3, r7, r4
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	0018      	movs	r0, r3
 800262c:	f001 ff22 	bl	8004474 <libswd_operation_string>
 8002630:	0004      	movs	r4, r0
 8002632:	197b      	adds	r3, r7, r5
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	001d      	movs	r5, r3
 8002638:	68f9      	ldr	r1, [r7, #12]
 800263a:	4aac      	ldr	r2, [pc, #688]	; (80028ec <libswd_dp_write+0x2e4>)
 800263c:	68f8      	ldr	r0, [r7, #12]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	9302      	str	r3, [sp, #8]
 8002642:	9501      	str	r5, [sp, #4]
 8002644:	9400      	str	r4, [sp, #0]
 8002646:	000b      	movs	r3, r1
 8002648:	2105      	movs	r1, #5
 800264a:	f001 fecf 	bl	80043ec <libswd_log>
    
    if (libswdctx==NULL) return LIBSWD_ERROR_NULLCONTEXT;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d102      	bne.n	800265a <libswd_dp_write+0x52>
 8002654:	230a      	movs	r3, #10
 8002656:	425b      	negs	r3, r3
 8002658:	e143      	b.n	80028e2 <libswd_dp_write+0x2da>
    if (operation!=LIBSWD_OPERATION_ENQUEUE && operation!=LIBSWD_OPERATION_EXECUTE)
 800265a:	220b      	movs	r2, #11
 800265c:	18bb      	adds	r3, r7, r2
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	2b01      	cmp	r3, #1
 8002662:	d006      	beq.n	8002672 <libswd_dp_write+0x6a>
 8002664:	18bb      	adds	r3, r7, r2
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	2b02      	cmp	r3, #2
 800266a:	d002      	beq.n	8002672 <libswd_dp_write+0x6a>
        return LIBSWD_ERROR_BADOPCODE;
 800266c:	2318      	movs	r3, #24
 800266e:	425b      	negs	r3, r3
 8002670:	e137      	b.n	80028e2 <libswd_dp_write+0x2da>
    
    int res, cmdcnt=0;
 8002672:	2300      	movs	r3, #0
 8002674:	61fb      	str	r3, [r7, #28]
    char APnDP, RnW, ack, request;
    
    APnDP=0;
 8002676:	211b      	movs	r1, #27
 8002678:	187b      	adds	r3, r7, r1
 800267a:	2200      	movs	r2, #0
 800267c:	701a      	strb	r2, [r3, #0]
    RnW=0;
 800267e:	201a      	movs	r0, #26
 8002680:	183b      	adds	r3, r7, r0
 8002682:	2200      	movs	r2, #0
 8002684:	701a      	strb	r2, [r3, #0]
    
    res=libswd_bitgen8_request(libswdctx, &APnDP, &RnW, &addr, &request);
 8002686:	230a      	movs	r3, #10
 8002688:	18fc      	adds	r4, r7, r3
 800268a:	183a      	adds	r2, r7, r0
 800268c:	1879      	adds	r1, r7, r1
 800268e:	68f8      	ldr	r0, [r7, #12]
 8002690:	2318      	movs	r3, #24
 8002692:	18fb      	adds	r3, r7, r3
 8002694:	9300      	str	r3, [sp, #0]
 8002696:	0023      	movs	r3, r4
 8002698:	f7fd ffe4 	bl	8000664 <libswd_bitgen8_request>
 800269c:	0003      	movs	r3, r0
 800269e:	627b      	str	r3, [r7, #36]	; 0x24
    if (res<0) return res;
 80026a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	da01      	bge.n	80026aa <libswd_dp_write+0xa2>
 80026a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a8:	e11b      	b.n	80028e2 <libswd_dp_write+0x2da>
    res=libswd_bus_write_request_raw(libswdctx, LIBSWD_OPERATION_ENQUEUE, request);
 80026aa:	2318      	movs	r3, #24
 80026ac:	18fb      	adds	r3, r7, r3
 80026ae:	781a      	ldrb	r2, [r3, #0]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2101      	movs	r1, #1
 80026b4:	0018      	movs	r0, r3
 80026b6:	f7fe f8e1 	bl	800087c <libswd_bus_write_request_raw>
 80026ba:	0003      	movs	r3, r0
 80026bc:	627b      	str	r3, [r7, #36]	; 0x24
    if (res<1) return res;
 80026be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	dc01      	bgt.n	80026c8 <libswd_dp_write+0xc0>
 80026c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c6:	e10c      	b.n	80028e2 <libswd_dp_write+0x2da>
    cmdcnt=+res;
 80026c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ca:	61fb      	str	r3, [r7, #28]
    
    libswd_bin32_parity_even(data, &libswdctx->qlog.write.parity);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	33e1      	adds	r3, #225	; 0xe1
 80026d0:	001a      	movs	r2, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	0011      	movs	r1, r2
 80026d6:	0018      	movs	r0, r3
 80026d8:	f7fd ff31 	bl	800053e <libswd_bin32_parity_even>
    
    if (operation==LIBSWD_OPERATION_ENQUEUE){
 80026dc:	210b      	movs	r1, #11
 80026de:	187b      	adds	r3, r7, r1
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d124      	bne.n	8002730 <libswd_dp_write+0x128>
        res=libswd_bus_read_ack(libswdctx, operation, &libswdctx->qlog.write.ack);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	33d5      	adds	r3, #213	; 0xd5
 80026ea:	001a      	movs	r2, r3
 80026ec:	187b      	adds	r3, r7, r1
 80026ee:	7819      	ldrb	r1, [r3, #0]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	0018      	movs	r0, r3
 80026f4:	f7fe f9c1 	bl	8000a7a <libswd_bus_read_ack>
 80026f8:	0003      	movs	r3, r0
 80026fa:	627b      	str	r3, [r7, #36]	; 0x24
        if (res<1) return res;
 80026fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fe:	2b00      	cmp	r3, #0
 8002700:	dc01      	bgt.n	8002706 <libswd_dp_write+0xfe>
 8002702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002704:	e0ed      	b.n	80028e2 <libswd_dp_write+0x2da>
        cmdcnt=+res;	// TBD PW qlog?
 8002706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002708:	61fb      	str	r3, [r7, #28]
        res=libswd_bus_write_data_ap(libswdctx, operation, data); 
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	230b      	movs	r3, #11
 800270e:	18fb      	adds	r3, r7, r3
 8002710:	7819      	ldrb	r1, [r3, #0]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	0018      	movs	r0, r3
 8002716:	f7fe fad0 	bl	8000cba <libswd_bus_write_data_ap>
 800271a:	0003      	movs	r3, r0
 800271c:	627b      	str	r3, [r7, #36]	; 0x24
        if (res<1) return res;
 800271e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002720:	2b00      	cmp	r3, #0
 8002722:	dc01      	bgt.n	8002728 <libswd_dp_write+0x120>
 8002724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002726:	e0dc      	b.n	80028e2 <libswd_dp_write+0x2da>
        cmdcnt=+res;
 8002728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272a:	61fb      	str	r3, [r7, #28]
        return cmdcnt;
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	e0d8      	b.n	80028e2 <libswd_dp_write+0x2da>
        
    } else if (operation==LIBSWD_OPERATION_EXECUTE){
 8002730:	240b      	movs	r4, #11
 8002732:	193b      	adds	r3, r7, r4
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	2b02      	cmp	r3, #2
 8002738:	d000      	beq.n	800273c <libswd_dp_write+0x134>
 800273a:	e0d0      	b.n	80028de <libswd_dp_write+0x2d6>
        res=libswd_bus_read_ack(libswdctx, operation, &ack);
 800273c:	2319      	movs	r3, #25
 800273e:	18fa      	adds	r2, r7, r3
 8002740:	193b      	adds	r3, r7, r4
 8002742:	7819      	ldrb	r1, [r3, #0]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	0018      	movs	r0, r3
 8002748:	f7fe f997 	bl	8000a7a <libswd_bus_read_ack>
 800274c:	0003      	movs	r3, r0
 800274e:	627b      	str	r3, [r7, #36]	; 0x24
        if (res>=0) {
 8002750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002752:	2b00      	cmp	r3, #0
 8002754:	db09      	blt.n	800276a <libswd_dp_write+0x162>
            res=libswd_bus_write_data_ap(libswdctx, operation, data);
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	193b      	adds	r3, r7, r4
 800275a:	7819      	ldrb	r1, [r3, #0]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	0018      	movs	r0, r3
 8002760:	f7fe faab 	bl	8000cba <libswd_bus_write_data_ap>
 8002764:	0003      	movs	r3, r0
 8002766:	627b      	str	r3, [r7, #36]	; 0x24
 8002768:	e04d      	b.n	8002806 <libswd_dp_write+0x1fe>
        } else if (res==LIBSWD_ERROR_ACK_WAIT) {
 800276a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276c:	3324      	adds	r3, #36	; 0x24
 800276e:	d14a      	bne.n	8002806 <libswd_dp_write+0x1fe>
            //We got ACK==WAIT, retry last transfer until success or failure.
            int retry, ctrlstat, abort;
            for (retry=LIBSWD_RETRY_COUNT_DEFAULT; retry>0; retry--){
 8002770:	230a      	movs	r3, #10
 8002772:	623b      	str	r3, [r7, #32]
 8002774:	e03c      	b.n	80027f0 <libswd_dp_write+0x1e8>
                abort=0xFFFFFFFF;
 8002776:	2301      	movs	r3, #1
 8002778:	425b      	negs	r3, r3
 800277a:	613b      	str	r3, [r7, #16]
                res=libswd_dap_errors_handle(libswdctx, LIBSWD_OPERATION_EXECUTE, &abort, &ctrlstat);
 800277c:	2314      	movs	r3, #20
 800277e:	18fb      	adds	r3, r7, r3
 8002780:	2210      	movs	r2, #16
 8002782:	18ba      	adds	r2, r7, r2
 8002784:	68f8      	ldr	r0, [r7, #12]
 8002786:	2102      	movs	r1, #2
 8002788:	f7ff fb82 	bl	8001e90 <libswd_dap_errors_handle>
 800278c:	0003      	movs	r3, r0
 800278e:	627b      	str	r3, [r7, #36]	; 0x24
                if (res<0) continue;
 8002790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002792:	2b00      	cmp	r3, #0
 8002794:	db24      	blt.n	80027e0 <libswd_dp_write+0x1d8>
                res=libswd_bus_write_request_raw(libswdctx, LIBSWD_OPERATION_ENQUEUE, request);
 8002796:	2318      	movs	r3, #24
 8002798:	18fb      	adds	r3, r7, r3
 800279a:	781a      	ldrb	r2, [r3, #0]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2101      	movs	r1, #1
 80027a0:	0018      	movs	r0, r3
 80027a2:	f7fe f86b 	bl	800087c <libswd_bus_write_request_raw>
 80027a6:	0003      	movs	r3, r0
 80027a8:	627b      	str	r3, [r7, #36]	; 0x24
                if (res<0) continue;
 80027aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	db19      	blt.n	80027e4 <libswd_dp_write+0x1dc>
                res=libswd_bus_read_ack(libswdctx, LIBSWD_OPERATION_EXECUTE, &ack);
 80027b0:	2319      	movs	r3, #25
 80027b2:	18fa      	adds	r2, r7, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2102      	movs	r1, #2
 80027b8:	0018      	movs	r0, r3
 80027ba:	f7fe f95e 	bl	8000a7a <libswd_bus_read_ack>
 80027be:	0003      	movs	r3, r0
 80027c0:	627b      	str	r3, [r7, #36]	; 0x24
                if (res<0) continue;
 80027c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	db0f      	blt.n	80027e8 <libswd_dp_write+0x1e0>
                res=libswd_bus_write_data_ap(libswdctx, LIBSWD_OPERATION_EXECUTE, data);
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2102      	movs	r1, #2
 80027ce:	0018      	movs	r0, r3
 80027d0:	f7fe fa73 	bl	8000cba <libswd_bus_write_data_ap>
 80027d4:	0003      	movs	r3, r0
 80027d6:	627b      	str	r3, [r7, #36]	; 0x24
                if (res<0) continue;
 80027d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027da:	2b00      	cmp	r3, #0
 80027dc:	da0c      	bge.n	80027f8 <libswd_dp_write+0x1f0>
 80027de:	e004      	b.n	80027ea <libswd_dp_write+0x1e2>
                if (res<0) continue;
 80027e0:	46c0      	nop			; (mov r8, r8)
 80027e2:	e002      	b.n	80027ea <libswd_dp_write+0x1e2>
                if (res<0) continue;
 80027e4:	46c0      	nop			; (mov r8, r8)
 80027e6:	e000      	b.n	80027ea <libswd_dp_write+0x1e2>
                if (res<0) continue;
 80027e8:	46c0      	nop			; (mov r8, r8)
            for (retry=LIBSWD_RETRY_COUNT_DEFAULT; retry>0; retry--){
 80027ea:	6a3b      	ldr	r3, [r7, #32]
 80027ec:	3b01      	subs	r3, #1
 80027ee:	623b      	str	r3, [r7, #32]
 80027f0:	6a3b      	ldr	r3, [r7, #32]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	dcbf      	bgt.n	8002776 <libswd_dp_write+0x16e>
 80027f6:	e000      	b.n	80027fa <libswd_dp_write+0x1f2>
                break;
 80027f8:	46c0      	nop			; (mov r8, r8)
            }
            if (retry==0) return LIBSWD_ERROR_MAXRETRY;
 80027fa:	6a3b      	ldr	r3, [r7, #32]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d102      	bne.n	8002806 <libswd_dp_write+0x1fe>
 8002800:	232b      	movs	r3, #43	; 0x2b
 8002802:	425b      	negs	r3, r3
 8002804:	e06d      	b.n	80028e2 <libswd_dp_write+0x2da>
        }
        if (res<0) {
 8002806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002808:	2b00      	cmp	r3, #0
 800280a:	da24      	bge.n	8002856 <libswd_dp_write+0x24e>
            libswd_log(libswdctx, LIBSWD_LOGLEVEL_ERROR, "LIBSWD_E: libswd_dp_write(libswdctx=@%p, operation=%s, addr=0x%X, data=0x%X/%s) failed: %s.\n", (void*)libswdctx, libswd_operation_string(operation), addr, data, libswd_bin32_string(data), libswd_error_string((libswd_error_code_t)res));
 800280c:	230b      	movs	r3, #11
 800280e:	18fb      	adds	r3, r7, r3
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	0018      	movs	r0, r3
 8002814:	f001 fe2e 	bl	8004474 <libswd_operation_string>
 8002818:	0004      	movs	r4, r0
 800281a:	230a      	movs	r3, #10
 800281c:	18fb      	adds	r3, r7, r3
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	001e      	movs	r6, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	0018      	movs	r0, r3
 8002826:	f7fd fef3 	bl	8000610 <libswd_bin32_string>
 800282a:	0005      	movs	r5, r0
 800282c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282e:	b25b      	sxtb	r3, r3
 8002830:	0018      	movs	r0, r3
 8002832:	f001 f883 	bl	800393c <libswd_error_string>
 8002836:	0003      	movs	r3, r0
 8002838:	68f9      	ldr	r1, [r7, #12]
 800283a:	4a2d      	ldr	r2, [pc, #180]	; (80028f0 <libswd_dp_write+0x2e8>)
 800283c:	68f8      	ldr	r0, [r7, #12]
 800283e:	9304      	str	r3, [sp, #16]
 8002840:	9503      	str	r5, [sp, #12]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	9302      	str	r3, [sp, #8]
 8002846:	9601      	str	r6, [sp, #4]
 8002848:	9400      	str	r4, [sp, #0]
 800284a:	000b      	movs	r3, r1
 800284c:	2102      	movs	r1, #2
 800284e:	f001 fdcd 	bl	80043ec <libswd_log>
            return res;
 8002852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002854:	e045      	b.n	80028e2 <libswd_dp_write+0x2da>
        }
        libswd_log(libswdctx, LIBSWD_LOGLEVEL_DEBUG, "LIBSWD_D: libswd_dp_write(libswdctx=@%p, operation=%s, addr=0x%X, data=0x%X/%s) execution OK.\n", (void*)libswdctx, libswd_operation_string(operation), addr, data, libswd_bin32_string(data));
 8002856:	230b      	movs	r3, #11
 8002858:	18fb      	adds	r3, r7, r3
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	0018      	movs	r0, r3
 800285e:	f001 fe09 	bl	8004474 <libswd_operation_string>
 8002862:	0004      	movs	r4, r0
 8002864:	260a      	movs	r6, #10
 8002866:	19bb      	adds	r3, r7, r6
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	001d      	movs	r5, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	0018      	movs	r0, r3
 8002870:	f7fd fece 	bl	8000610 <libswd_bin32_string>
 8002874:	0003      	movs	r3, r0
 8002876:	68f9      	ldr	r1, [r7, #12]
 8002878:	4a1e      	ldr	r2, [pc, #120]	; (80028f4 <libswd_dp_write+0x2ec>)
 800287a:	68f8      	ldr	r0, [r7, #12]
 800287c:	9303      	str	r3, [sp, #12]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	9302      	str	r3, [sp, #8]
 8002882:	9501      	str	r5, [sp, #4]
 8002884:	9400      	str	r4, [sp, #0]
 8002886:	000b      	movs	r3, r1
 8002888:	2105      	movs	r1, #5
 800288a:	f001 fdaf 	bl	80043ec <libswd_log>
        // Here we also can cache DP register values into libswdctx log.
        switch(addr){
 800288e:	19bb      	adds	r3, r7, r6
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	2b0c      	cmp	r3, #12
 8002894:	d010      	beq.n	80028b8 <libswd_dp_write+0x2b0>
 8002896:	dc20      	bgt.n	80028da <libswd_dp_write+0x2d2>
 8002898:	2b08      	cmp	r3, #8
 800289a:	d009      	beq.n	80028b0 <libswd_dp_write+0x2a8>
 800289c:	dc1d      	bgt.n	80028da <libswd_dp_write+0x2d2>
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d002      	beq.n	80028a8 <libswd_dp_write+0x2a0>
 80028a2:	2b04      	cmp	r3, #4
 80028a4:	d00c      	beq.n	80028c0 <libswd_dp_write+0x2b8>
 80028a6:	e018      	b.n	80028da <libswd_dp_write+0x2d2>
        case LIBSWD_DP_ABORT_ADDR: libswdctx->log.dp.abort=data; break;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	621a      	str	r2, [r3, #32]
 80028ae:	e014      	b.n	80028da <libswd_dp_write+0x2d2>
        case LIBSWD_DP_SELECT_ADDR: libswdctx->log.dp.select=data; break;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80028b6:	e010      	b.n	80028da <libswd_dp_write+0x2d2>
        case LIBSWD_DP_ROUTESEL_ADDR: libswdctx->log.dp.routesel=data; break;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	639a      	str	r2, [r3, #56]	; 0x38
 80028be:	e00c      	b.n	80028da <libswd_dp_write+0x2d2>
        case LIBSWD_DP_CTRLSTAT_ADDR: // which is also LIBSWD_DP_WCR_ADDR
            if (libswdctx->log.dp.select&LIBSWD_DP_SELECT_CTRLSEL){
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c4:	2201      	movs	r2, #1
 80028c6:	4013      	ands	r3, r2
 80028c8:	d003      	beq.n	80028d2 <libswd_dp_write+0x2ca>
                libswdctx->log.dp.wcr=data;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	629a      	str	r2, [r3, #40]	; 0x28
            } else libswdctx->log.dp.ctrlstat=data;
            break;
 80028d0:	e002      	b.n	80028d8 <libswd_dp_write+0x2d0>
            } else libswdctx->log.dp.ctrlstat=data;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	625a      	str	r2, [r3, #36]	; 0x24
            break;
 80028d8:	46c0      	nop			; (mov r8, r8)
        }
        return cmdcnt;
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	e001      	b.n	80028e2 <libswd_dp_write+0x2da>
    } else return LIBSWD_ERROR_BADOPCODE;
 80028de:	2318      	movs	r3, #24
 80028e0:	425b      	negs	r3, r3
}
 80028e2:	0018      	movs	r0, r3
 80028e4:	46bd      	mov	sp, r7
 80028e6:	b00b      	add	sp, #44	; 0x2c
 80028e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028ea:	46c0      	nop			; (mov r8, r8)
 80028ec:	08009524 	.word	0x08009524
 80028f0:	08009588 	.word	0x08009588
 80028f4:	080095e8 	.word	0x080095e8

080028f8 <libswd_ap_bank_select>:
* Remember not to enqueue any other SELECT writes after this function and before queue flush.
* \param *libswdctx swd context to work on.
* \param addr is the target AP register address, bank will be calculated based on this value.
* \return number of cmdq operations on success, or LIBSWD_ERROR code on failure.
*/
int libswd_ap_bank_select(libswd_ctx_t *libswdctx, libswd_operation_t operation, int addr){
 80028f8:	b590      	push	{r4, r7, lr}
 80028fa:	b089      	sub	sp, #36	; 0x24
 80028fc:	af02      	add	r7, sp, #8
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	607a      	str	r2, [r7, #4]
 8002902:	200b      	movs	r0, #11
 8002904:	183b      	adds	r3, r7, r0
 8002906:	1c0a      	adds	r2, r1, #0
 8002908:	701a      	strb	r2, [r3, #0]
    libswd_log(libswdctx, LIBSWD_LOGLEVEL_DEBUG, "LIBSWD_D: libswd_ap_bank_select(*libswdctx=%p, operation=%s, addr=0x%02X) entering function...\n", (void*)libswdctx, libswd_operation_string(operation), addr);
 800290a:	183b      	adds	r3, r7, r0
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	0018      	movs	r0, r3
 8002910:	f001 fdb0 	bl	8004474 <libswd_operation_string>
 8002914:	0004      	movs	r4, r0
 8002916:	68f9      	ldr	r1, [r7, #12]
 8002918:	4a2b      	ldr	r2, [pc, #172]	; (80029c8 <libswd_ap_bank_select+0xd0>)
 800291a:	68f8      	ldr	r0, [r7, #12]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	9301      	str	r3, [sp, #4]
 8002920:	9400      	str	r4, [sp, #0]
 8002922:	000b      	movs	r3, r1
 8002924:	2105      	movs	r1, #5
 8002926:	f001 fd61 	bl	80043ec <libswd_log>
    // If the correct AP bank is already selected no need to change it.
    // Verify against cached DP SELECT register value.
    // Unfortunately SELECT register is read only so we need to work on cached values...
    if ( (libswdctx->log.dp.select&LIBSWD_DP_SELECT_APBANKSEL)==(addr&LIBSWD_DP_SELECT_APBANKSEL) ) return LIBSWD_OK;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4053      	eors	r3, r2
 8002932:	22f0      	movs	r2, #240	; 0xf0
 8002934:	4013      	ands	r3, r2
 8002936:	d101      	bne.n	800293c <libswd_ap_bank_select+0x44>
 8002938:	2300      	movs	r3, #0
 800293a:	e041      	b.n	80029c0 <libswd_ap_bank_select+0xc8>
    // If the cached value of APBANKSEL is different from addr, set it up.
    int retval;
    int new_select=libswdctx->log.dp.select;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002940:	617b      	str	r3, [r7, #20]
    new_select&=~LIBSWD_DP_SELECT_APBANKSEL;
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	22f0      	movs	r2, #240	; 0xf0
 8002946:	4393      	bics	r3, r2
 8002948:	617b      	str	r3, [r7, #20]
    new_select|=addr&LIBSWD_DP_SELECT_APBANKSEL;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	22f0      	movs	r2, #240	; 0xf0
 800294e:	4013      	ands	r3, r2
 8002950:	697a      	ldr	r2, [r7, #20]
 8002952:	4313      	orrs	r3, r2
 8002954:	617b      	str	r3, [r7, #20]
    retval=libswd_dp_write(libswdctx, operation, LIBSWD_DP_SELECT_ADDR, new_select);
 8002956:	697a      	ldr	r2, [r7, #20]
 8002958:	230b      	movs	r3, #11
 800295a:	18fb      	adds	r3, r7, r3
 800295c:	7819      	ldrb	r1, [r3, #0]
 800295e:	68f8      	ldr	r0, [r7, #12]
 8002960:	0013      	movs	r3, r2
 8002962:	2208      	movs	r2, #8
 8002964:	f7ff fe50 	bl	8002608 <libswd_dp_write>
 8002968:	0003      	movs	r3, r0
 800296a:	613b      	str	r3, [r7, #16]
    if (retval<0){
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	2b00      	cmp	r3, #0
 8002970:	da11      	bge.n	8002996 <libswd_ap_bank_select+0x9e>
        libswd_log(libswdctx, LIBSWD_LOGLEVEL_WARNING, "libswd_ap_bank_select(%p, %0x02X): cannot update DP SELECT register (%s)\n", (void*)libswdctx, addr, libswd_error_string((libswd_error_code_t)retval));
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	b25b      	sxtb	r3, r3
 8002976:	0018      	movs	r0, r3
 8002978:	f000 ffe0 	bl	800393c <libswd_error_string>
 800297c:	0003      	movs	r3, r0
 800297e:	68f9      	ldr	r1, [r7, #12]
 8002980:	4a12      	ldr	r2, [pc, #72]	; (80029cc <libswd_ap_bank_select+0xd4>)
 8002982:	68f8      	ldr	r0, [r7, #12]
 8002984:	9301      	str	r3, [sp, #4]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	9300      	str	r3, [sp, #0]
 800298a:	000b      	movs	r3, r1
 800298c:	2103      	movs	r1, #3
 800298e:	f001 fd2d 	bl	80043ec <libswd_log>
        return retval;
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	e014      	b.n	80029c0 <libswd_ap_bank_select+0xc8>
    }
    libswdctx->log.dp.select=new_select;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	697a      	ldr	r2, [r7, #20]
 800299a:	62da      	str	r2, [r3, #44]	; 0x2c
    libswd_log(libswdctx, LIBSWD_LOGLEVEL_DEBUG, "LIBSWD_D: libswd_ap_bank_select(*libswdctx=%p, operation=%s, addr=0x%02X) execution OK.\n", (void*)libswdctx, libswd_operation_string(operation), addr);
 800299c:	230b      	movs	r3, #11
 800299e:	18fb      	adds	r3, r7, r3
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	0018      	movs	r0, r3
 80029a4:	f001 fd66 	bl	8004474 <libswd_operation_string>
 80029a8:	0004      	movs	r4, r0
 80029aa:	68f9      	ldr	r1, [r7, #12]
 80029ac:	4a08      	ldr	r2, [pc, #32]	; (80029d0 <libswd_ap_bank_select+0xd8>)
 80029ae:	68f8      	ldr	r0, [r7, #12]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	9301      	str	r3, [sp, #4]
 80029b4:	9400      	str	r4, [sp, #0]
 80029b6:	000b      	movs	r3, r1
 80029b8:	2105      	movs	r1, #5
 80029ba:	f001 fd17 	bl	80043ec <libswd_log>
    return retval;
 80029be:	693b      	ldr	r3, [r7, #16]
}
 80029c0:	0018      	movs	r0, r3
 80029c2:	46bd      	mov	sp, r7
 80029c4:	b007      	add	sp, #28
 80029c6:	bd90      	pop	{r4, r7, pc}
 80029c8:	08009648 	.word	0x08009648
 80029cc:	080096a8 	.word	0x080096a8
 80029d0:	080096f4 	.word	0x080096f4

080029d4 <libswd_ap_read>:
* \param operation can be LIBSWD_OPERATION_ENQUEUE or LIBSWD_OPERATION_EXECUTE.
* \param addr is the address of the AP register to read plus AP BANK on bits [4..7].
* \param **data is the pointer to data where result will be stored.
* \return number of elements processed or LIBSWD_ERROR code on failure.
*/
int libswd_ap_read(libswd_ctx_t *libswdctx, libswd_operation_t operation, char addr, int *data){
 80029d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029d6:	46c6      	mov	lr, r8
 80029d8:	b500      	push	{lr}
 80029da:	b092      	sub	sp, #72	; 0x48
 80029dc:	af06      	add	r7, sp, #24
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	0008      	movs	r0, r1
 80029e2:	0011      	movs	r1, r2
 80029e4:	607b      	str	r3, [r7, #4]
 80029e6:	240b      	movs	r4, #11
 80029e8:	193b      	adds	r3, r7, r4
 80029ea:	1c02      	adds	r2, r0, #0
 80029ec:	701a      	strb	r2, [r3, #0]
 80029ee:	250a      	movs	r5, #10
 80029f0:	197b      	adds	r3, r7, r5
 80029f2:	1c0a      	adds	r2, r1, #0
 80029f4:	701a      	strb	r2, [r3, #0]
    libswd_log(libswdctx, LIBSWD_LOGLEVEL_DEBUG, "LIBSWD_D: libswd_ap_read(*libswdctx=%p, command=%s, addr=0x%X, *data=%p) entering function...\n", (void*)libswdctx, libswd_operation_string(operation), (unsigned char)addr, (void*)data);
 80029f6:	193b      	adds	r3, r7, r4
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	0018      	movs	r0, r3
 80029fc:	f001 fd3a 	bl	8004474 <libswd_operation_string>
 8002a00:	0004      	movs	r4, r0
 8002a02:	197b      	adds	r3, r7, r5
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	001d      	movs	r5, r3
 8002a08:	68f9      	ldr	r1, [r7, #12]
 8002a0a:	4ab5      	ldr	r2, [pc, #724]	; (8002ce0 <libswd_ap_read+0x30c>)
 8002a0c:	68f8      	ldr	r0, [r7, #12]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	9302      	str	r3, [sp, #8]
 8002a12:	9501      	str	r5, [sp, #4]
 8002a14:	9400      	str	r4, [sp, #0]
 8002a16:	000b      	movs	r3, r1
 8002a18:	2105      	movs	r1, #5
 8002a1a:	f001 fce7 	bl	80043ec <libswd_log>
    
    if (libswdctx==NULL) return LIBSWD_ERROR_NULLCONTEXT;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d102      	bne.n	8002a2a <libswd_ap_read+0x56>
 8002a24:	230a      	movs	r3, #10
 8002a26:	425b      	negs	r3, r3
 8002a28:	e153      	b.n	8002cd2 <libswd_ap_read+0x2fe>
    if (data==NULL) return LIBSWD_ERROR_NULLPOINTER;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d102      	bne.n	8002a36 <libswd_ap_read+0x62>
 8002a30:	2302      	movs	r3, #2
 8002a32:	425b      	negs	r3, r3
 8002a34:	e14d      	b.n	8002cd2 <libswd_ap_read+0x2fe>
    if (operation!=LIBSWD_OPERATION_ENQUEUE && operation!=LIBSWD_OPERATION_EXECUTE)
 8002a36:	220b      	movs	r2, #11
 8002a38:	18bb      	adds	r3, r7, r2
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d006      	beq.n	8002a4e <libswd_ap_read+0x7a>
 8002a40:	18bb      	adds	r3, r7, r2
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d002      	beq.n	8002a4e <libswd_ap_read+0x7a>
        return LIBSWD_ERROR_BADOPCODE;
 8002a48:	2318      	movs	r3, #24
 8002a4a:	425b      	negs	r3, r3
 8002a4c:	e141      	b.n	8002cd2 <libswd_ap_read+0x2fe>
    
    int res, cmdcnt=0, retry, ctrlstat, abort;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	62bb      	str	r3, [r7, #40]	; 0x28
    char APnDP, RnW, ack, parity, request;
    
    res=libswd_ap_bank_select(libswdctx, LIBSWD_OPERATION_ENQUEUE, addr);
 8002a52:	230a      	movs	r3, #10
 8002a54:	18fb      	adds	r3, r7, r3
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	001a      	movs	r2, r3
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2101      	movs	r1, #1
 8002a5e:	0018      	movs	r0, r3
 8002a60:	f7ff ff4a 	bl	80028f8 <libswd_ap_bank_select>
 8002a64:	0003      	movs	r3, r0
 8002a66:	627b      	str	r3, [r7, #36]	; 0x24
    if (res<0) return res;
 8002a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	da01      	bge.n	8002a72 <libswd_ap_read+0x9e>
 8002a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a70:	e12f      	b.n	8002cd2 <libswd_ap_read+0x2fe>
    
    APnDP=1;
 8002a72:	211b      	movs	r1, #27
 8002a74:	187b      	adds	r3, r7, r1
 8002a76:	2201      	movs	r2, #1
 8002a78:	701a      	strb	r2, [r3, #0]
    RnW=1;
 8002a7a:	201a      	movs	r0, #26
 8002a7c:	183b      	adds	r3, r7, r0
 8002a7e:	2201      	movs	r2, #1
 8002a80:	701a      	strb	r2, [r3, #0]
    
    res=libswd_bitgen8_request(libswdctx, &APnDP, &RnW, &addr, &request);
 8002a82:	230a      	movs	r3, #10
 8002a84:	18fc      	adds	r4, r7, r3
 8002a86:	183a      	adds	r2, r7, r0
 8002a88:	1879      	adds	r1, r7, r1
 8002a8a:	68f8      	ldr	r0, [r7, #12]
 8002a8c:	2317      	movs	r3, #23
 8002a8e:	18fb      	adds	r3, r7, r3
 8002a90:	9300      	str	r3, [sp, #0]
 8002a92:	0023      	movs	r3, r4
 8002a94:	f7fd fde6 	bl	8000664 <libswd_bitgen8_request>
 8002a98:	0003      	movs	r3, r0
 8002a9a:	627b      	str	r3, [r7, #36]	; 0x24
    if (res<0) return res;
 8002a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	da01      	bge.n	8002aa6 <libswd_ap_read+0xd2>
 8002aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa4:	e115      	b.n	8002cd2 <libswd_ap_read+0x2fe>
    res=libswd_bus_write_request_raw(libswdctx, LIBSWD_OPERATION_ENQUEUE, request);
 8002aa6:	2317      	movs	r3, #23
 8002aa8:	18fb      	adds	r3, r7, r3
 8002aaa:	781a      	ldrb	r2, [r3, #0]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2101      	movs	r1, #1
 8002ab0:	0018      	movs	r0, r3
 8002ab2:	f7fd fee3 	bl	800087c <libswd_bus_write_request_raw>
 8002ab6:	0003      	movs	r3, r0
 8002ab8:	627b      	str	r3, [r7, #36]	; 0x24
    if (res<1) return res;
 8002aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	dc01      	bgt.n	8002ac4 <libswd_ap_read+0xf0>
 8002ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac2:	e106      	b.n	8002cd2 <libswd_ap_read+0x2fe>
    cmdcnt=+res;
 8002ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac6:	62bb      	str	r3, [r7, #40]	; 0x28
    
    if (operation==LIBSWD_OPERATION_ENQUEUE){
 8002ac8:	210b      	movs	r1, #11
 8002aca:	187b      	adds	r3, r7, r1
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d129      	bne.n	8002b26 <libswd_ap_read+0x152>
        res=libswd_bus_read_ack(libswdctx, operation, &libswdctx->qlog.read.ack);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	33c5      	adds	r3, #197	; 0xc5
 8002ad6:	001a      	movs	r2, r3
 8002ad8:	187b      	adds	r3, r7, r1
 8002ada:	7819      	ldrb	r1, [r3, #0]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	0018      	movs	r0, r3
 8002ae0:	f7fd ffcb 	bl	8000a7a <libswd_bus_read_ack>
 8002ae4:	0003      	movs	r3, r0
 8002ae6:	627b      	str	r3, [r7, #36]	; 0x24
        if (res<1) return res;
 8002ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	dc01      	bgt.n	8002af2 <libswd_ap_read+0x11e>
 8002aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af0:	e0ef      	b.n	8002cd2 <libswd_ap_read+0x2fe>
        cmdcnt=+res;
 8002af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af4:	62bb      	str	r3, [r7, #40]	; 0x28
        res=libswd_bus_read_data_p(libswdctx, operation, &libswdctx->qlog.read.data, &libswdctx->qlog.read.parity);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	33c8      	adds	r3, #200	; 0xc8
 8002afa:	001a      	movs	r2, r3
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	33d1      	adds	r3, #209	; 0xd1
 8002b00:	001c      	movs	r4, r3
 8002b02:	230b      	movs	r3, #11
 8002b04:	18fb      	adds	r3, r7, r3
 8002b06:	7819      	ldrb	r1, [r3, #0]
 8002b08:	68f8      	ldr	r0, [r7, #12]
 8002b0a:	0023      	movs	r3, r4
 8002b0c:	f7fe f936 	bl	8000d7c <libswd_bus_read_data_p>
 8002b10:	0003      	movs	r3, r0
 8002b12:	627b      	str	r3, [r7, #36]	; 0x24
        if (res<1) return res;
 8002b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	dc01      	bgt.n	8002b1e <libswd_ap_read+0x14a>
 8002b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1c:	e0d9      	b.n	8002cd2 <libswd_ap_read+0x2fe>
        cmdcnt=+res;
 8002b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b20:	62bb      	str	r3, [r7, #40]	; 0x28
        return cmdcnt;
 8002b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b24:	e0d5      	b.n	8002cd2 <libswd_ap_read+0x2fe>
        
    } else if (operation==LIBSWD_OPERATION_EXECUTE){
 8002b26:	250b      	movs	r5, #11
 8002b28:	197b      	adds	r3, r7, r5
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d000      	beq.n	8002b32 <libswd_ap_read+0x15e>
 8002b30:	e0cd      	b.n	8002cce <libswd_ap_read+0x2fa>
        res=libswd_bus_read_ack(libswdctx, operation, &ack);
 8002b32:	2319      	movs	r3, #25
 8002b34:	18fa      	adds	r2, r7, r3
 8002b36:	197b      	adds	r3, r7, r5
 8002b38:	7819      	ldrb	r1, [r3, #0]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	0018      	movs	r0, r3
 8002b3e:	f7fd ff9c 	bl	8000a7a <libswd_bus_read_ack>
 8002b42:	0003      	movs	r3, r0
 8002b44:	627b      	str	r3, [r7, #36]	; 0x24
        if (res>=0) {
 8002b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	db0f      	blt.n	8002b6c <libswd_ap_read+0x198>
            res=libswd_bus_read_data_p(libswdctx, operation, data, &parity);
 8002b4c:	2318      	movs	r3, #24
 8002b4e:	18fc      	adds	r4, r7, r3
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	197b      	adds	r3, r7, r5
 8002b54:	7819      	ldrb	r1, [r3, #0]
 8002b56:	68f8      	ldr	r0, [r7, #12]
 8002b58:	0023      	movs	r3, r4
 8002b5a:	f7fe f90f 	bl	8000d7c <libswd_bus_read_data_p>
 8002b5e:	0003      	movs	r3, r0
 8002b60:	627b      	str	r3, [r7, #36]	; 0x24
            if (res<0) return res;
 8002b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	da4f      	bge.n	8002c08 <libswd_ap_read+0x234>
 8002b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6a:	e0b2      	b.n	8002cd2 <libswd_ap_read+0x2fe>
        } else if (res==LIBSWD_ERROR_ACK_WAIT) {
 8002b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6e:	3324      	adds	r3, #36	; 0x24
 8002b70:	d14a      	bne.n	8002c08 <libswd_ap_read+0x234>
            //We got ACK==WAIT, retry last transfer until success or failure.
            for (retry=LIBSWD_RETRY_COUNT_DEFAULT; retry>0; retry--){
 8002b72:	230a      	movs	r3, #10
 8002b74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b76:	e03c      	b.n	8002bf2 <libswd_ap_read+0x21e>
                abort=0xFFFFFFFE;
 8002b78:	2302      	movs	r3, #2
 8002b7a:	425b      	negs	r3, r3
 8002b7c:	61fb      	str	r3, [r7, #28]
                res=libswd_dap_errors_handle(libswdctx, LIBSWD_OPERATION_EXECUTE, &abort, NULL);
 8002b7e:	231c      	movs	r3, #28
 8002b80:	18fa      	adds	r2, r7, r3
 8002b82:	68f8      	ldr	r0, [r7, #12]
 8002b84:	2300      	movs	r3, #0
 8002b86:	2102      	movs	r1, #2
 8002b88:	f7ff f982 	bl	8001e90 <libswd_dap_errors_handle>
 8002b8c:	0003      	movs	r3, r0
 8002b8e:	627b      	str	r3, [r7, #36]	; 0x24
                if (res<0) continue;
 8002b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	db25      	blt.n	8002be2 <libswd_ap_read+0x20e>
                res=libswd_bus_write_request_raw(libswdctx, LIBSWD_OPERATION_ENQUEUE, request);
 8002b96:	2317      	movs	r3, #23
 8002b98:	18fb      	adds	r3, r7, r3
 8002b9a:	781a      	ldrb	r2, [r3, #0]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2101      	movs	r1, #1
 8002ba0:	0018      	movs	r0, r3
 8002ba2:	f7fd fe6b 	bl	800087c <libswd_bus_write_request_raw>
 8002ba6:	0003      	movs	r3, r0
 8002ba8:	627b      	str	r3, [r7, #36]	; 0x24
                if (res<0) continue;
 8002baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	db1a      	blt.n	8002be6 <libswd_ap_read+0x212>
                res=libswd_bus_read_ack(libswdctx, LIBSWD_OPERATION_EXECUTE, &ack);
 8002bb0:	2319      	movs	r3, #25
 8002bb2:	18fa      	adds	r2, r7, r3
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2102      	movs	r1, #2
 8002bb8:	0018      	movs	r0, r3
 8002bba:	f7fd ff5e 	bl	8000a7a <libswd_bus_read_ack>
 8002bbe:	0003      	movs	r3, r0
 8002bc0:	627b      	str	r3, [r7, #36]	; 0x24
                if (res<0) continue;
 8002bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	db10      	blt.n	8002bea <libswd_ap_read+0x216>
                res=libswd_bus_read_data_p(libswdctx, LIBSWD_OPERATION_EXECUTE, data, &parity);
 8002bc8:	2318      	movs	r3, #24
 8002bca:	18fb      	adds	r3, r7, r3
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	68f8      	ldr	r0, [r7, #12]
 8002bd0:	2102      	movs	r1, #2
 8002bd2:	f7fe f8d3 	bl	8000d7c <libswd_bus_read_data_p>
 8002bd6:	0003      	movs	r3, r0
 8002bd8:	627b      	str	r3, [r7, #36]	; 0x24
                if (res<0) continue;
 8002bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	da0c      	bge.n	8002bfa <libswd_ap_read+0x226>
 8002be0:	e004      	b.n	8002bec <libswd_ap_read+0x218>
                if (res<0) continue;
 8002be2:	46c0      	nop			; (mov r8, r8)
 8002be4:	e002      	b.n	8002bec <libswd_ap_read+0x218>
                if (res<0) continue;
 8002be6:	46c0      	nop			; (mov r8, r8)
 8002be8:	e000      	b.n	8002bec <libswd_ap_read+0x218>
                if (res<0) continue;
 8002bea:	46c0      	nop			; (mov r8, r8)
            for (retry=LIBSWD_RETRY_COUNT_DEFAULT; retry>0; retry--){
 8002bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	dcbf      	bgt.n	8002b78 <libswd_ap_read+0x1a4>
 8002bf8:	e000      	b.n	8002bfc <libswd_ap_read+0x228>
                break;
 8002bfa:	46c0      	nop			; (mov r8, r8)
            }
            if (retry==0) return LIBSWD_ERROR_MAXRETRY;
 8002bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d102      	bne.n	8002c08 <libswd_ap_read+0x234>
 8002c02:	232b      	movs	r3, #43	; 0x2b
 8002c04:	425b      	negs	r3, r3
 8002c06:	e064      	b.n	8002cd2 <libswd_ap_read+0x2fe>
        }
        res=libswd_dp_read(libswdctx, LIBSWD_OPERATION_EXECUTE, LIBSWD_DP_RDBUFF_ADDR, data);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	68f8      	ldr	r0, [r7, #12]
 8002c0c:	220c      	movs	r2, #12
 8002c0e:	2102      	movs	r1, #2
 8002c10:	f7ff fb68 	bl	80022e4 <libswd_dp_read>
 8002c14:	0003      	movs	r3, r0
 8002c16:	627b      	str	r3, [r7, #36]	; 0x24
        if (res<0) {
 8002c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	da26      	bge.n	8002c6c <libswd_ap_read+0x298>
            libswd_log(libswdctx, LIBSWD_LOGLEVEL_ERROR, "LIBSWD_E: libswd_ap_read(libswdctx=@%p, operation=%s, addr=0x%X, *data=0x%X/%s) failed: %s.\n", (void*)libswdctx, libswd_operation_string(operation), addr, *data, libswd_bin32_string(*data), libswd_error_string((libswd_error_code_t)res));
 8002c1e:	230b      	movs	r3, #11
 8002c20:	18fb      	adds	r3, r7, r3
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	0018      	movs	r0, r3
 8002c26:	f001 fc25 	bl	8004474 <libswd_operation_string>
 8002c2a:	0005      	movs	r5, r0
 8002c2c:	230a      	movs	r3, #10
 8002c2e:	18fb      	adds	r3, r7, r3
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	4698      	mov	r8, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681c      	ldr	r4, [r3, #0]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	0018      	movs	r0, r3
 8002c3e:	f7fd fce7 	bl	8000610 <libswd_bin32_string>
 8002c42:	0006      	movs	r6, r0
 8002c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c46:	b25b      	sxtb	r3, r3
 8002c48:	0018      	movs	r0, r3
 8002c4a:	f000 fe77 	bl	800393c <libswd_error_string>
 8002c4e:	0001      	movs	r1, r0
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	4a24      	ldr	r2, [pc, #144]	; (8002ce4 <libswd_ap_read+0x310>)
 8002c54:	68f8      	ldr	r0, [r7, #12]
 8002c56:	9104      	str	r1, [sp, #16]
 8002c58:	9603      	str	r6, [sp, #12]
 8002c5a:	9402      	str	r4, [sp, #8]
 8002c5c:	4641      	mov	r1, r8
 8002c5e:	9101      	str	r1, [sp, #4]
 8002c60:	9500      	str	r5, [sp, #0]
 8002c62:	2102      	movs	r1, #2
 8002c64:	f001 fbc2 	bl	80043ec <libswd_log>
            return res;
 8002c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6a:	e032      	b.n	8002cd2 <libswd_ap_read+0x2fe>
        }
        // Clear all possible error flags that may remain, but don't abort transaction.
        abort=0xFFFFFFFE;
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	425b      	negs	r3, r3
 8002c70:	61fb      	str	r3, [r7, #28]
        res=libswd_dap_errors_handle(libswdctx, LIBSWD_OPERATION_EXECUTE, &abort, &ctrlstat);
 8002c72:	2320      	movs	r3, #32
 8002c74:	18fb      	adds	r3, r7, r3
 8002c76:	221c      	movs	r2, #28
 8002c78:	18ba      	adds	r2, r7, r2
 8002c7a:	68f8      	ldr	r0, [r7, #12]
 8002c7c:	2102      	movs	r1, #2
 8002c7e:	f7ff f907 	bl	8001e90 <libswd_dap_errors_handle>
 8002c82:	0003      	movs	r3, r0
 8002c84:	627b      	str	r3, [r7, #36]	; 0x24
        if (res<0) return res;
 8002c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	da01      	bge.n	8002c90 <libswd_ap_read+0x2bc>
 8002c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8e:	e020      	b.n	8002cd2 <libswd_ap_read+0x2fe>
        libswd_log(libswdctx, LIBSWD_LOGLEVEL_DEBUG, "LIBSWD_D: libswd_ap_read(libswdctx=@%p, command=%s, addr=0x%X, *data=0x%X/%s) execution OK.\n", (void*)libswdctx, libswd_operation_string(operation), addr, *data, libswd_bin32_string(*data));
 8002c90:	230b      	movs	r3, #11
 8002c92:	18fb      	adds	r3, r7, r3
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	0018      	movs	r0, r3
 8002c98:	f001 fbec 	bl	8004474 <libswd_operation_string>
 8002c9c:	0005      	movs	r5, r0
 8002c9e:	230a      	movs	r3, #10
 8002ca0:	18fb      	adds	r3, r7, r3
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	001e      	movs	r6, r3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681c      	ldr	r4, [r3, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	0018      	movs	r0, r3
 8002cb0:	f7fd fcae 	bl	8000610 <libswd_bin32_string>
 8002cb4:	0001      	movs	r1, r0
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	4a0b      	ldr	r2, [pc, #44]	; (8002ce8 <libswd_ap_read+0x314>)
 8002cba:	68f8      	ldr	r0, [r7, #12]
 8002cbc:	9103      	str	r1, [sp, #12]
 8002cbe:	9402      	str	r4, [sp, #8]
 8002cc0:	9601      	str	r6, [sp, #4]
 8002cc2:	9500      	str	r5, [sp, #0]
 8002cc4:	2105      	movs	r1, #5
 8002cc6:	f001 fb91 	bl	80043ec <libswd_log>
        return cmdcnt;
 8002cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ccc:	e001      	b.n	8002cd2 <libswd_ap_read+0x2fe>
    } else return LIBSWD_ERROR_BADOPCODE;
 8002cce:	2318      	movs	r3, #24
 8002cd0:	425b      	negs	r3, r3
}
 8002cd2:	0018      	movs	r0, r3
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	b00c      	add	sp, #48	; 0x30
 8002cd8:	bc80      	pop	{r7}
 8002cda:	46b8      	mov	r8, r7
 8002cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cde:	46c0      	nop			; (mov r8, r8)
 8002ce0:	0800985c 	.word	0x0800985c
 8002ce4:	080098bc 	.word	0x080098bc
 8002ce8:	0800991c 	.word	0x0800991c

08002cec <libswd_ap_write>:
* \param operation can be LIBSWD_OPERATION_ENQUEUE or LIBSWD_OPERATION_EXECUTE.
* \param addr is the address of the AP register to write plus AP BANK on bits[4..7].
* \param *data is the pointer to data to be written.
* \return number of elements processed or LIBSWD_ERROR code on failure.
*/
int libswd_ap_write(libswd_ctx_t *libswdctx, libswd_operation_t operation, char addr, int data){
 8002cec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cee:	b091      	sub	sp, #68	; 0x44
 8002cf0:	af06      	add	r7, sp, #24
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	0008      	movs	r0, r1
 8002cf6:	0011      	movs	r1, r2
 8002cf8:	607b      	str	r3, [r7, #4]
 8002cfa:	240b      	movs	r4, #11
 8002cfc:	193b      	adds	r3, r7, r4
 8002cfe:	1c02      	adds	r2, r0, #0
 8002d00:	701a      	strb	r2, [r3, #0]
 8002d02:	250a      	movs	r5, #10
 8002d04:	197b      	adds	r3, r7, r5
 8002d06:	1c0a      	adds	r2, r1, #0
 8002d08:	701a      	strb	r2, [r3, #0]
    libswd_log(libswdctx, LIBSWD_LOGLEVEL_DEBUG, "LIBSWD_D: libswd_ap_write(libswdctx=@%p, operation=%s, addr=0x%X, data=0x%X).\n", (void*)libswdctx, libswd_operation_string(operation), addr, data);
 8002d0a:	193b      	adds	r3, r7, r4
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	0018      	movs	r0, r3
 8002d10:	f001 fbb0 	bl	8004474 <libswd_operation_string>
 8002d14:	0004      	movs	r4, r0
 8002d16:	197b      	adds	r3, r7, r5
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	001d      	movs	r5, r3
 8002d1c:	68f9      	ldr	r1, [r7, #12]
 8002d1e:	4aae      	ldr	r2, [pc, #696]	; (8002fd8 <libswd_ap_write+0x2ec>)
 8002d20:	68f8      	ldr	r0, [r7, #12]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	9302      	str	r3, [sp, #8]
 8002d26:	9501      	str	r5, [sp, #4]
 8002d28:	9400      	str	r4, [sp, #0]
 8002d2a:	000b      	movs	r3, r1
 8002d2c:	2105      	movs	r1, #5
 8002d2e:	f001 fb5d 	bl	80043ec <libswd_log>
    
    if (libswdctx==NULL) return LIBSWD_ERROR_NULLCONTEXT;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d102      	bne.n	8002d3e <libswd_ap_write+0x52>
 8002d38:	230a      	movs	r3, #10
 8002d3a:	425b      	negs	r3, r3
 8002d3c:	e148      	b.n	8002fd0 <libswd_ap_write+0x2e4>
    if (operation!=LIBSWD_OPERATION_ENQUEUE && operation!=LIBSWD_OPERATION_EXECUTE)
 8002d3e:	220b      	movs	r2, #11
 8002d40:	18bb      	adds	r3, r7, r2
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d006      	beq.n	8002d56 <libswd_ap_write+0x6a>
 8002d48:	18bb      	adds	r3, r7, r2
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d002      	beq.n	8002d56 <libswd_ap_write+0x6a>
        return LIBSWD_ERROR_BADOPCODE;
 8002d50:	2318      	movs	r3, #24
 8002d52:	425b      	negs	r3, r3
 8002d54:	e13c      	b.n	8002fd0 <libswd_ap_write+0x2e4>
    
    int res, cmdcnt=0, retry, ctrlstat, abort;
 8002d56:	2300      	movs	r3, #0
 8002d58:	623b      	str	r3, [r7, #32]
    char APnDP, RnW, ack, request;
    
    res=libswd_ap_bank_select(libswdctx, LIBSWD_OPERATION_ENQUEUE, addr);
 8002d5a:	230a      	movs	r3, #10
 8002d5c:	18fb      	adds	r3, r7, r3
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	001a      	movs	r2, r3
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2101      	movs	r1, #1
 8002d66:	0018      	movs	r0, r3
 8002d68:	f7ff fdc6 	bl	80028f8 <libswd_ap_bank_select>
 8002d6c:	0003      	movs	r3, r0
 8002d6e:	627b      	str	r3, [r7, #36]	; 0x24
    if (res<0) return res;
 8002d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	da01      	bge.n	8002d7a <libswd_ap_write+0x8e>
 8002d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d78:	e12a      	b.n	8002fd0 <libswd_ap_write+0x2e4>
    
    APnDP=1;
 8002d7a:	2113      	movs	r1, #19
 8002d7c:	187b      	adds	r3, r7, r1
 8002d7e:	2201      	movs	r2, #1
 8002d80:	701a      	strb	r2, [r3, #0]
    RnW=0;
 8002d82:	2012      	movs	r0, #18
 8002d84:	183b      	adds	r3, r7, r0
 8002d86:	2200      	movs	r2, #0
 8002d88:	701a      	strb	r2, [r3, #0]
    
    res=libswd_bitgen8_request(libswdctx, &APnDP, &RnW, &addr, &request);
 8002d8a:	230a      	movs	r3, #10
 8002d8c:	18fc      	adds	r4, r7, r3
 8002d8e:	183a      	adds	r2, r7, r0
 8002d90:	1879      	adds	r1, r7, r1
 8002d92:	68f8      	ldr	r0, [r7, #12]
 8002d94:	2310      	movs	r3, #16
 8002d96:	18fb      	adds	r3, r7, r3
 8002d98:	9300      	str	r3, [sp, #0]
 8002d9a:	0023      	movs	r3, r4
 8002d9c:	f7fd fc62 	bl	8000664 <libswd_bitgen8_request>
 8002da0:	0003      	movs	r3, r0
 8002da2:	627b      	str	r3, [r7, #36]	; 0x24
    if (res<0) return res;
 8002da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	da01      	bge.n	8002dae <libswd_ap_write+0xc2>
 8002daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dac:	e110      	b.n	8002fd0 <libswd_ap_write+0x2e4>
    res=libswd_bus_write_request_raw(libswdctx, LIBSWD_OPERATION_ENQUEUE, request);
 8002dae:	2310      	movs	r3, #16
 8002db0:	18fb      	adds	r3, r7, r3
 8002db2:	781a      	ldrb	r2, [r3, #0]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2101      	movs	r1, #1
 8002db8:	0018      	movs	r0, r3
 8002dba:	f7fd fd5f 	bl	800087c <libswd_bus_write_request_raw>
 8002dbe:	0003      	movs	r3, r0
 8002dc0:	627b      	str	r3, [r7, #36]	; 0x24
    if (res<1) return res;
 8002dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	dc01      	bgt.n	8002dcc <libswd_ap_write+0xe0>
 8002dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dca:	e101      	b.n	8002fd0 <libswd_ap_write+0x2e4>
    cmdcnt=+res;
 8002dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dce:	623b      	str	r3, [r7, #32]
    libswd_bin32_parity_even(data, &libswdctx->qlog.write.parity);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	33e1      	adds	r3, #225	; 0xe1
 8002dd4:	001a      	movs	r2, r3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	0011      	movs	r1, r2
 8002dda:	0018      	movs	r0, r3
 8002ddc:	f7fd fbaf 	bl	800053e <libswd_bin32_parity_even>
    
    if (operation==LIBSWD_OPERATION_ENQUEUE){
 8002de0:	210b      	movs	r1, #11
 8002de2:	187b      	adds	r3, r7, r1
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d12a      	bne.n	8002e40 <libswd_ap_write+0x154>
        res=libswd_bus_read_ack(libswdctx, operation, &libswdctx->qlog.write.ack);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	33d5      	adds	r3, #213	; 0xd5
 8002dee:	001a      	movs	r2, r3
 8002df0:	187b      	adds	r3, r7, r1
 8002df2:	7819      	ldrb	r1, [r3, #0]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	0018      	movs	r0, r3
 8002df8:	f7fd fe3f 	bl	8000a7a <libswd_bus_read_ack>
 8002dfc:	0003      	movs	r3, r0
 8002dfe:	627b      	str	r3, [r7, #36]	; 0x24
        if (res<1) return res;
 8002e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	dc01      	bgt.n	8002e0a <libswd_ap_write+0x11e>
 8002e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e08:	e0e2      	b.n	8002fd0 <libswd_ap_write+0x2e4>
        cmdcnt=+res;
 8002e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0c:	623b      	str	r3, [r7, #32]
        libswdctx->qlog.write.data=data;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	21d8      	movs	r1, #216	; 0xd8
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	505a      	str	r2, [r3, r1]
        res=libswd_bus_write_data_ap(libswdctx, operation, libswdctx->qlog.write.data);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	22d8      	movs	r2, #216	; 0xd8
 8002e1a:	589a      	ldr	r2, [r3, r2]
 8002e1c:	230b      	movs	r3, #11
 8002e1e:	18fb      	adds	r3, r7, r3
 8002e20:	7819      	ldrb	r1, [r3, #0]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	0018      	movs	r0, r3
 8002e26:	f7fd ff48 	bl	8000cba <libswd_bus_write_data_ap>
 8002e2a:	0003      	movs	r3, r0
 8002e2c:	627b      	str	r3, [r7, #36]	; 0x24
        if (res<1) return res;
 8002e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	dc01      	bgt.n	8002e38 <libswd_ap_write+0x14c>
 8002e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e36:	e0cb      	b.n	8002fd0 <libswd_ap_write+0x2e4>
        cmdcnt=+res;
 8002e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3a:	623b      	str	r3, [r7, #32]
        return cmdcnt;
 8002e3c:	6a3b      	ldr	r3, [r7, #32]
 8002e3e:	e0c7      	b.n	8002fd0 <libswd_ap_write+0x2e4>
        
    } else if (operation==LIBSWD_OPERATION_EXECUTE){
 8002e40:	240b      	movs	r4, #11
 8002e42:	193b      	adds	r3, r7, r4
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d000      	beq.n	8002e4c <libswd_ap_write+0x160>
 8002e4a:	e0bf      	b.n	8002fcc <libswd_ap_write+0x2e0>
        res=libswd_bus_read_ack(libswdctx, operation, &ack);
 8002e4c:	2311      	movs	r3, #17
 8002e4e:	18fa      	adds	r2, r7, r3
 8002e50:	193b      	adds	r3, r7, r4
 8002e52:	7819      	ldrb	r1, [r3, #0]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	0018      	movs	r0, r3
 8002e58:	f7fd fe0f 	bl	8000a7a <libswd_bus_read_ack>
 8002e5c:	0003      	movs	r3, r0
 8002e5e:	627b      	str	r3, [r7, #36]	; 0x24
        if (res>=0) {
 8002e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	db12      	blt.n	8002e8c <libswd_ap_write+0x1a0>
            res=libswd_bus_write_data_ap(libswdctx, operation, data);
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	193b      	adds	r3, r7, r4
 8002e6a:	7819      	ldrb	r1, [r3, #0]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	0018      	movs	r0, r3
 8002e70:	f7fd ff23 	bl	8000cba <libswd_bus_write_data_ap>
 8002e74:	0003      	movs	r3, r0
 8002e76:	627b      	str	r3, [r7, #36]	; 0x24
            if (res<0) return res;
 8002e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	da01      	bge.n	8002e82 <libswd_ap_write+0x196>
 8002e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e80:	e0a6      	b.n	8002fd0 <libswd_ap_write+0x2e4>
            cmdcnt+=res;
 8002e82:	6a3a      	ldr	r2, [r7, #32]
 8002e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e86:	18d3      	adds	r3, r2, r3
 8002e88:	623b      	str	r3, [r7, #32]
 8002e8a:	e04c      	b.n	8002f26 <libswd_ap_write+0x23a>
        } else if (res==LIBSWD_ERROR_ACK_WAIT) {
 8002e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8e:	3324      	adds	r3, #36	; 0x24
 8002e90:	d149      	bne.n	8002f26 <libswd_ap_write+0x23a>
            //We got ACK==WAIT, retry last transfer until success or failure.
            for (retry=LIBSWD_RETRY_COUNT_DEFAULT; retry>0; retry--){
 8002e92:	230a      	movs	r3, #10
 8002e94:	61fb      	str	r3, [r7, #28]
 8002e96:	e03b      	b.n	8002f10 <libswd_ap_write+0x224>
                abort=0xFFFFFFFE;
 8002e98:	2302      	movs	r3, #2
 8002e9a:	425b      	negs	r3, r3
 8002e9c:	617b      	str	r3, [r7, #20]
                res=libswd_dap_errors_handle(libswdctx, LIBSWD_OPERATION_EXECUTE, &abort, NULL);
 8002e9e:	2314      	movs	r3, #20
 8002ea0:	18fa      	adds	r2, r7, r3
 8002ea2:	68f8      	ldr	r0, [r7, #12]
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	2102      	movs	r1, #2
 8002ea8:	f7fe fff2 	bl	8001e90 <libswd_dap_errors_handle>
 8002eac:	0003      	movs	r3, r0
 8002eae:	627b      	str	r3, [r7, #36]	; 0x24
                if (res<0) continue;
 8002eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	db24      	blt.n	8002f00 <libswd_ap_write+0x214>
                res=libswd_bus_write_request_raw(libswdctx, LIBSWD_OPERATION_ENQUEUE, request);
 8002eb6:	2310      	movs	r3, #16
 8002eb8:	18fb      	adds	r3, r7, r3
 8002eba:	781a      	ldrb	r2, [r3, #0]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2101      	movs	r1, #1
 8002ec0:	0018      	movs	r0, r3
 8002ec2:	f7fd fcdb 	bl	800087c <libswd_bus_write_request_raw>
 8002ec6:	0003      	movs	r3, r0
 8002ec8:	627b      	str	r3, [r7, #36]	; 0x24
                if (res<0) continue;
 8002eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	db19      	blt.n	8002f04 <libswd_ap_write+0x218>
                res=libswd_bus_read_ack(libswdctx, LIBSWD_OPERATION_EXECUTE, &ack);
 8002ed0:	2311      	movs	r3, #17
 8002ed2:	18fa      	adds	r2, r7, r3
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2102      	movs	r1, #2
 8002ed8:	0018      	movs	r0, r3
 8002eda:	f7fd fdce 	bl	8000a7a <libswd_bus_read_ack>
 8002ede:	0003      	movs	r3, r0
 8002ee0:	627b      	str	r3, [r7, #36]	; 0x24
                if (res<0) continue;
 8002ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	db0f      	blt.n	8002f08 <libswd_ap_write+0x21c>
                res=libswd_bus_write_data_ap(libswdctx, LIBSWD_OPERATION_EXECUTE, data);
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2102      	movs	r1, #2
 8002eee:	0018      	movs	r0, r3
 8002ef0:	f7fd fee3 	bl	8000cba <libswd_bus_write_data_ap>
 8002ef4:	0003      	movs	r3, r0
 8002ef6:	627b      	str	r3, [r7, #36]	; 0x24
                if (res<0) continue;
 8002ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	da0c      	bge.n	8002f18 <libswd_ap_write+0x22c>
 8002efe:	e004      	b.n	8002f0a <libswd_ap_write+0x21e>
                if (res<0) continue;
 8002f00:	46c0      	nop			; (mov r8, r8)
 8002f02:	e002      	b.n	8002f0a <libswd_ap_write+0x21e>
                if (res<0) continue;
 8002f04:	46c0      	nop			; (mov r8, r8)
 8002f06:	e000      	b.n	8002f0a <libswd_ap_write+0x21e>
                if (res<0) continue;
 8002f08:	46c0      	nop			; (mov r8, r8)
            for (retry=LIBSWD_RETRY_COUNT_DEFAULT; retry>0; retry--){
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	3b01      	subs	r3, #1
 8002f0e:	61fb      	str	r3, [r7, #28]
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	dcc0      	bgt.n	8002e98 <libswd_ap_write+0x1ac>
 8002f16:	e000      	b.n	8002f1a <libswd_ap_write+0x22e>
                break;
 8002f18:	46c0      	nop			; (mov r8, r8)
            }
            if (retry==0) return LIBSWD_ERROR_MAXRETRY;
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d102      	bne.n	8002f26 <libswd_ap_write+0x23a>
 8002f20:	232b      	movs	r3, #43	; 0x2b
 8002f22:	425b      	negs	r3, r3
 8002f24:	e054      	b.n	8002fd0 <libswd_ap_write+0x2e4>
        }
        if (res<0) {
 8002f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	da31      	bge.n	8002f90 <libswd_ap_write+0x2a4>
            libswd_log(libswdctx, LIBSWD_LOGLEVEL_ERROR, "LIBSWD_E: libswd_ap_write(libswdctx=@%p, operation=%s, addr=0x%X, data=0x%X/%s) failed: %s.\n", (void*)libswdctx, libswd_operation_string(operation), addr, data, libswd_bin32_string(data), libswd_error_string((libswd_error_code_t)res));
 8002f2c:	230b      	movs	r3, #11
 8002f2e:	18fb      	adds	r3, r7, r3
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	0018      	movs	r0, r3
 8002f34:	f001 fa9e 	bl	8004474 <libswd_operation_string>
 8002f38:	0004      	movs	r4, r0
 8002f3a:	230a      	movs	r3, #10
 8002f3c:	18fb      	adds	r3, r7, r3
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	001e      	movs	r6, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	0018      	movs	r0, r3
 8002f46:	f7fd fb63 	bl	8000610 <libswd_bin32_string>
 8002f4a:	0005      	movs	r5, r0
 8002f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4e:	b25b      	sxtb	r3, r3
 8002f50:	0018      	movs	r0, r3
 8002f52:	f000 fcf3 	bl	800393c <libswd_error_string>
 8002f56:	0003      	movs	r3, r0
 8002f58:	68f9      	ldr	r1, [r7, #12]
 8002f5a:	4a20      	ldr	r2, [pc, #128]	; (8002fdc <libswd_ap_write+0x2f0>)
 8002f5c:	68f8      	ldr	r0, [r7, #12]
 8002f5e:	9304      	str	r3, [sp, #16]
 8002f60:	9503      	str	r5, [sp, #12]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	9302      	str	r3, [sp, #8]
 8002f66:	9601      	str	r6, [sp, #4]
 8002f68:	9400      	str	r4, [sp, #0]
 8002f6a:	000b      	movs	r3, r1
 8002f6c:	2102      	movs	r1, #2
 8002f6e:	f001 fa3d 	bl	80043ec <libswd_log>
            abort=0xFFFFFFFE;
 8002f72:	2302      	movs	r3, #2
 8002f74:	425b      	negs	r3, r3
 8002f76:	617b      	str	r3, [r7, #20]
            res=libswd_dap_errors_handle(libswdctx, LIBSWD_OPERATION_EXECUTE, &abort, &ctrlstat);
 8002f78:	2318      	movs	r3, #24
 8002f7a:	18fb      	adds	r3, r7, r3
 8002f7c:	2214      	movs	r2, #20
 8002f7e:	18ba      	adds	r2, r7, r2
 8002f80:	68f8      	ldr	r0, [r7, #12]
 8002f82:	2102      	movs	r1, #2
 8002f84:	f7fe ff84 	bl	8001e90 <libswd_dap_errors_handle>
 8002f88:	0003      	movs	r3, r0
 8002f8a:	627b      	str	r3, [r7, #36]	; 0x24
            return res;
 8002f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8e:	e01f      	b.n	8002fd0 <libswd_ap_write+0x2e4>
        }
        libswd_log(libswdctx, LIBSWD_LOGLEVEL_DEBUG, "LIBSWD_D: libswd_ap_write(libswdctx=@%p, operation=%s, addr=0x%X, data=0x%X/%s) execution OK.\n", (void*)libswdctx, libswd_operation_string(operation), addr, data, libswd_bin32_string(data));
 8002f90:	230b      	movs	r3, #11
 8002f92:	18fb      	adds	r3, r7, r3
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	0018      	movs	r0, r3
 8002f98:	f001 fa6c 	bl	8004474 <libswd_operation_string>
 8002f9c:	0004      	movs	r4, r0
 8002f9e:	230a      	movs	r3, #10
 8002fa0:	18fb      	adds	r3, r7, r3
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	001d      	movs	r5, r3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	0018      	movs	r0, r3
 8002faa:	f7fd fb31 	bl	8000610 <libswd_bin32_string>
 8002fae:	0003      	movs	r3, r0
 8002fb0:	68f9      	ldr	r1, [r7, #12]
 8002fb2:	4a0b      	ldr	r2, [pc, #44]	; (8002fe0 <libswd_ap_write+0x2f4>)
 8002fb4:	68f8      	ldr	r0, [r7, #12]
 8002fb6:	9303      	str	r3, [sp, #12]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	9302      	str	r3, [sp, #8]
 8002fbc:	9501      	str	r5, [sp, #4]
 8002fbe:	9400      	str	r4, [sp, #0]
 8002fc0:	000b      	movs	r3, r1
 8002fc2:	2105      	movs	r1, #5
 8002fc4:	f001 fa12 	bl	80043ec <libswd_log>
        return cmdcnt;
 8002fc8:	6a3b      	ldr	r3, [r7, #32]
 8002fca:	e001      	b.n	8002fd0 <libswd_ap_write+0x2e4>
    } else return LIBSWD_ERROR_BADOPCODE;
 8002fcc:	2318      	movs	r3, #24
 8002fce:	425b      	negs	r3, r3
    
}
 8002fd0:	0018      	movs	r0, r3
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	b00b      	add	sp, #44	; 0x2c
 8002fd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fd8:	0800997c 	.word	0x0800997c
 8002fdc:	080099cc 	.word	0x080099cc
 8002fe0:	08009a2c 	.word	0x08009a2c

08002fe4 <libswd_debug_detect>:
* \param *libswdctx swd context pointer.
* \param operation type (LIBSWD_OPERATION_ENQUEUE or LIBSWD_OPERATION_EXECUTE).
* \return LIBSWD_OK if Debug Unit is supported, LIBSWD_ERROR_UNSUPPORTED otherwise.
*/
int libswd_debug_detect(libswd_ctx_t *libswdctx, libswd_operation_t operation)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b088      	sub	sp, #32
 8002fe8:	af02      	add	r7, sp, #8
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	000a      	movs	r2, r1
 8002fee:	1cfb      	adds	r3, r7, #3
 8002ff0:	701a      	strb	r2, [r3, #0]
    libswd_log(libswdctx, LIBSWD_LOGLEVEL_DEBUG, "LIBSWD_I: Executing libswd_debug_detect(*libswdctx=%p, operation=%s)\n", (void*)libswdctx, libswd_operation_string(operation));
 8002ff2:	1cfb      	adds	r3, r7, #3
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	0018      	movs	r0, r3
 8002ff8:	f001 fa3c 	bl	8004474 <libswd_operation_string>
 8002ffc:	0001      	movs	r1, r0
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a3b      	ldr	r2, [pc, #236]	; (80030f0 <libswd_debug_detect+0x10c>)
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	9100      	str	r1, [sp, #0]
 8003006:	2105      	movs	r1, #5
 8003008:	f001 f9f0 	bl	80043ec <libswd_log>
    
    if (!libswdctx) return LIBSWD_ERROR_NULLCONTEXT;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d102      	bne.n	8003018 <libswd_debug_detect+0x34>
 8003012:	230a      	movs	r3, #10
 8003014:	425b      	negs	r3, r3
 8003016:	e066      	b.n	80030e6 <libswd_debug_detect+0x102>
    int retval=0, cpuid;
 8003018:	2300      	movs	r3, #0
 800301a:	613b      	str	r3, [r7, #16]
    unsigned int i;
    
    if (!libswdctx->log.memap.initialized)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	223d      	movs	r2, #61	; 0x3d
 8003020:	5c9b      	ldrb	r3, [r3, r2]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d10d      	bne.n	8003042 <libswd_debug_detect+0x5e>
    {
        retval=libswd_memap_init(libswdctx, operation);
 8003026:	1cfb      	adds	r3, r7, #3
 8003028:	781a      	ldrb	r2, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	0011      	movs	r1, r2
 800302e:	0018      	movs	r0, r3
 8003030:	f001 fca8 	bl	8004984 <libswd_memap_init>
 8003034:	0003      	movs	r3, r0
 8003036:	613b      	str	r3, [r7, #16]
        if (retval<0) return retval;
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	2b00      	cmp	r3, #0
 800303c:	da01      	bge.n	8003042 <libswd_debug_detect+0x5e>
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	e051      	b.n	80030e6 <libswd_debug_detect+0x102>
    }
    
    retval=libswd_memap_read_int_32(libswdctx, LIBSWD_OPERATION_EXECUTE, LIBSWD_ARM_DEBUG_CPUID_ADDR, 1, &cpuid);
 8003042:	4a2c      	ldr	r2, [pc, #176]	; (80030f4 <libswd_debug_detect+0x110>)
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	230c      	movs	r3, #12
 8003048:	18fb      	adds	r3, r7, r3
 800304a:	9300      	str	r3, [sp, #0]
 800304c:	2301      	movs	r3, #1
 800304e:	2102      	movs	r1, #2
 8003050:	f001 ff98 	bl	8004f84 <libswd_memap_read_int_32>
 8003054:	0003      	movs	r3, r0
 8003056:	613b      	str	r3, [r7, #16]
    if (retval<0) return retval;
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	2b00      	cmp	r3, #0
 800305c:	da01      	bge.n	8003062 <libswd_debug_detect+0x7e>
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	e041      	b.n	80030e6 <libswd_debug_detect+0x102>
    
    for (i=0;i<LIBSWD_NUM_SUPPORTED_CPUIDS;i++)
 8003062:	2300      	movs	r3, #0
 8003064:	617b      	str	r3, [r7, #20]
 8003066:	e027      	b.n	80030b8 <libswd_debug_detect+0xd4>
    {
        if (cpuid==libswd_arm_debug_CPUID[i].default_value)
 8003068:	4923      	ldr	r1, [pc, #140]	; (80030f8 <libswd_debug_detect+0x114>)
 800306a:	697a      	ldr	r2, [r7, #20]
 800306c:	0013      	movs	r3, r2
 800306e:	005b      	lsls	r3, r3, #1
 8003070:	189b      	adds	r3, r3, r2
 8003072:	011b      	lsls	r3, r3, #4
 8003074:	18cb      	adds	r3, r1, r3
 8003076:	3324      	adds	r3, #36	; 0x24
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	429a      	cmp	r2, r3
 800307e:	d118      	bne.n	80030b2 <libswd_debug_detect+0xce>
        {
            libswd_log(libswdctx, LIBSWD_LOGLEVEL_INFO,
 8003080:	491d      	ldr	r1, [pc, #116]	; (80030f8 <libswd_debug_detect+0x114>)
 8003082:	697a      	ldr	r2, [r7, #20]
 8003084:	0013      	movs	r3, r2
 8003086:	005b      	lsls	r3, r3, #1
 8003088:	189b      	adds	r3, r3, r2
 800308a:	011b      	lsls	r3, r3, #4
 800308c:	18cb      	adds	r3, r1, r3
 800308e:	3324      	adds	r3, #36	; 0x24
 8003090:	6819      	ldr	r1, [r3, #0]
                       "LIBSWD_I: libswd_debug_detect(): Found supported CPUID=0x%08X (%s).\n",
                       libswd_arm_debug_CPUID[i].default_value, libswd_arm_debug_CPUID[i].name );
 8003092:	697a      	ldr	r2, [r7, #20]
 8003094:	0013      	movs	r3, r2
 8003096:	005b      	lsls	r3, r3, #1
 8003098:	189b      	adds	r3, r3, r2
 800309a:	011b      	lsls	r3, r3, #4
 800309c:	4a16      	ldr	r2, [pc, #88]	; (80030f8 <libswd_debug_detect+0x114>)
 800309e:	189b      	adds	r3, r3, r2
 80030a0:	3304      	adds	r3, #4
            libswd_log(libswdctx, LIBSWD_LOGLEVEL_INFO,
 80030a2:	4a16      	ldr	r2, [pc, #88]	; (80030fc <libswd_debug_detect+0x118>)
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	9300      	str	r3, [sp, #0]
 80030a8:	000b      	movs	r3, r1
 80030aa:	2104      	movs	r1, #4
 80030ac:	f001 f99e 	bl	80043ec <libswd_log>
            break;
 80030b0:	e005      	b.n	80030be <libswd_debug_detect+0xda>
    for (i=0;i<LIBSWD_NUM_SUPPORTED_CPUIDS;i++)
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	3301      	adds	r3, #1
 80030b6:	617b      	str	r3, [r7, #20]
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	2b05      	cmp	r3, #5
 80030bc:	d9d4      	bls.n	8003068 <libswd_debug_detect+0x84>
        }
    }
    if (i==LIBSWD_NUM_SUPPORTED_CPUIDS) return LIBSWD_ERROR_UNSUPPORTED;
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	2b06      	cmp	r3, #6
 80030c2:	d102      	bne.n	80030ca <libswd_debug_detect+0xe6>
 80030c4:	232e      	movs	r3, #46	; 0x2e
 80030c6:	425b      	negs	r3, r3
 80030c8:	e00d      	b.n	80030e6 <libswd_debug_detect+0x102>
    libswd_log(libswdctx, LIBSWD_LOGLEVEL_DEBUG, "LIBSWD_I: libswd_debug_detect(*libswdctx=%p, operation=%s) execution OK...\n", (void*)libswdctx, libswd_operation_string(operation));
 80030ca:	1cfb      	adds	r3, r7, #3
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	0018      	movs	r0, r3
 80030d0:	f001 f9d0 	bl	8004474 <libswd_operation_string>
 80030d4:	0001      	movs	r1, r0
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a09      	ldr	r2, [pc, #36]	; (8003100 <libswd_debug_detect+0x11c>)
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	9100      	str	r1, [sp, #0]
 80030de:	2105      	movs	r1, #5
 80030e0:	f001 f984 	bl	80043ec <libswd_log>
    return LIBSWD_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	0018      	movs	r0, r3
 80030e8:	46bd      	mov	sp, r7
 80030ea:	b006      	add	sp, #24
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	46c0      	nop			; (mov r8, r8)
 80030f0:	08009a8c 	.word	0x08009a8c
 80030f4:	e000ed00 	.word	0xe000ed00
 80030f8:	0800be3c 	.word	0x0800be3c
 80030fc:	08009ad4 	.word	0x08009ad4
 8003100:	08009b1c 	.word	0x08009b1c

08003104 <libswd_debug_init>:


int libswd_debug_init(libswd_ctx_t *libswdctx, libswd_operation_t operation)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	000a      	movs	r2, r1
 800310e:	1cfb      	adds	r3, r7, #3
 8003110:	701a      	strb	r2, [r3, #0]
    if (!libswdctx) return LIBSWD_ERROR_NULLCONTEXT;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d102      	bne.n	800311e <libswd_debug_init+0x1a>
 8003118:	230a      	movs	r3, #10
 800311a:	425b      	negs	r3, r3
 800311c:	e01d      	b.n	800315a <libswd_debug_init+0x56>
    if ( operation!=LIBSWD_OPERATION_EXECUTE && operation!=LIBSWD_OPERATION_ENQUEUE) return LIBSWD_ERROR_BADOPCODE;
 800311e:	1cfb      	adds	r3, r7, #3
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	2b02      	cmp	r3, #2
 8003124:	d006      	beq.n	8003134 <libswd_debug_init+0x30>
 8003126:	1cfb      	adds	r3, r7, #3
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d002      	beq.n	8003134 <libswd_debug_init+0x30>
 800312e:	2318      	movs	r3, #24
 8003130:	425b      	negs	r3, r3
 8003132:	e012      	b.n	800315a <libswd_debug_init+0x56>
    
    int retval;
    retval=libswd_debug_detect(libswdctx, operation);
 8003134:	1cfb      	adds	r3, r7, #3
 8003136:	781a      	ldrb	r2, [r3, #0]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	0011      	movs	r1, r2
 800313c:	0018      	movs	r0, r3
 800313e:	f7ff ff51 	bl	8002fe4 <libswd_debug_detect>
 8003142:	0003      	movs	r3, r0
 8003144:	60fb      	str	r3, [r7, #12]
    if (retval<0) return retval;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2b00      	cmp	r3, #0
 800314a:	da01      	bge.n	8003150 <libswd_debug_init+0x4c>
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	e004      	b.n	800315a <libswd_debug_init+0x56>
    libswdctx->log.debug.initialized=1;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2268      	movs	r2, #104	; 0x68
 8003154:	2101      	movs	r1, #1
 8003156:	5499      	strb	r1, [r3, r2]
    return LIBSWD_OK;
 8003158:	2300      	movs	r3, #0
}
 800315a:	0018      	movs	r0, r3
 800315c:	46bd      	mov	sp, r7
 800315e:	b004      	add	sp, #16
 8003160:	bd80      	pop	{r7, pc}
	...

08003164 <libswd_debug_halt>:


int libswd_debug_halt(libswd_ctx_t *libswdctx, libswd_operation_t operation)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b088      	sub	sp, #32
 8003168:	af02      	add	r7, sp, #8
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	000a      	movs	r2, r1
 800316e:	1cfb      	adds	r3, r7, #3
 8003170:	701a      	strb	r2, [r3, #0]
    if (libswdctx==NULL) return LIBSWD_ERROR_NULLCONTEXT;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d102      	bne.n	800317e <libswd_debug_halt+0x1a>
 8003178:	230a      	movs	r3, #10
 800317a:	425b      	negs	r3, r3
 800317c:	e085      	b.n	800328a <libswd_debug_halt+0x126>
    if (operation!=LIBSWD_OPERATION_EXECUTE && operation!=LIBSWD_OPERATION_ENQUEUE) return LIBSWD_ERROR_PARAM;
 800317e:	1cfb      	adds	r3, r7, #3
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	2b02      	cmp	r3, #2
 8003184:	d006      	beq.n	8003194 <libswd_debug_halt+0x30>
 8003186:	1cfb      	adds	r3, r7, #3
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	2b01      	cmp	r3, #1
 800318c:	d002      	beq.n	8003194 <libswd_debug_halt+0x30>
 800318e:	2305      	movs	r3, #5
 8003190:	425b      	negs	r3, r3
 8003192:	e07a      	b.n	800328a <libswd_debug_halt+0x126>
    
    int retval, i, dbgdhcsr;
    
    if (!libswdctx->log.debug.initialized)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2268      	movs	r2, #104	; 0x68
 8003198:	5c9b      	ldrb	r3, [r3, r2]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d10d      	bne.n	80031ba <libswd_debug_halt+0x56>
    {
        retval=libswd_debug_init(libswdctx, operation);
 800319e:	1cfb      	adds	r3, r7, #3
 80031a0:	781a      	ldrb	r2, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	0011      	movs	r1, r2
 80031a6:	0018      	movs	r0, r3
 80031a8:	f7ff ffac 	bl	8003104 <libswd_debug_init>
 80031ac:	0003      	movs	r3, r0
 80031ae:	613b      	str	r3, [r7, #16]
        if (retval<0) return retval;
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	da01      	bge.n	80031ba <libswd_debug_halt+0x56>
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	e067      	b.n	800328a <libswd_debug_halt+0x126>
    }
    // Halt the CPU.
    retval=libswd_memap_read_int_32(libswdctx, operation, LIBSWD_ARM_DEBUG_DHCSR_ADDR, 1, &dbgdhcsr);
 80031ba:	4a36      	ldr	r2, [pc, #216]	; (8003294 <libswd_debug_halt+0x130>)
 80031bc:	1cfb      	adds	r3, r7, #3
 80031be:	7819      	ldrb	r1, [r3, #0]
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	230c      	movs	r3, #12
 80031c4:	18fb      	adds	r3, r7, r3
 80031c6:	9300      	str	r3, [sp, #0]
 80031c8:	2301      	movs	r3, #1
 80031ca:	f001 fedb 	bl	8004f84 <libswd_memap_read_int_32>
 80031ce:	0003      	movs	r3, r0
 80031d0:	613b      	str	r3, [r7, #16]
    if (retval<0) return retval;
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	da01      	bge.n	80031dc <libswd_debug_halt+0x78>
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	e056      	b.n	800328a <libswd_debug_halt+0x126>
    for (i=LIBSWD_RETRY_COUNT_DEFAULT;i;i--)
 80031dc:	230a      	movs	r3, #10
 80031de:	617b      	str	r3, [r7, #20]
 80031e0:	e048      	b.n	8003274 <libswd_debug_halt+0x110>
    {
        dbgdhcsr=LIBSWD_ARM_DEBUG_DHCSR_DBGKEY;
 80031e2:	4b2d      	ldr	r3, [pc, #180]	; (8003298 <libswd_debug_halt+0x134>)
 80031e4:	60fb      	str	r3, [r7, #12]
        dbgdhcsr|=LIBSWD_ARM_DEBUG_DHCSR_CDEBUGEN;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2201      	movs	r2, #1
 80031ea:	4313      	orrs	r3, r2
 80031ec:	60fb      	str	r3, [r7, #12]
        dbgdhcsr|=LIBSWD_ARM_DEBUG_DHCSR_CHALT;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2202      	movs	r2, #2
 80031f2:	4313      	orrs	r3, r2
 80031f4:	60fb      	str	r3, [r7, #12]
        dbgdhcsr&=~LIBSWD_ARM_DEBUG_DHCSR_CMASKINTS;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2208      	movs	r2, #8
 80031fa:	4393      	bics	r3, r2
 80031fc:	60fb      	str	r3, [r7, #12]
        retval=libswd_memap_write_int_32(libswdctx, operation, LIBSWD_ARM_DEBUG_DHCSR_ADDR, 1, &dbgdhcsr);
 80031fe:	4a25      	ldr	r2, [pc, #148]	; (8003294 <libswd_debug_halt+0x130>)
 8003200:	1cfb      	adds	r3, r7, #3
 8003202:	7819      	ldrb	r1, [r3, #0]
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	230c      	movs	r3, #12
 8003208:	18fb      	adds	r3, r7, r3
 800320a:	9300      	str	r3, [sp, #0]
 800320c:	2301      	movs	r3, #1
 800320e:	f002 f87d 	bl	800530c <libswd_memap_write_int_32>
 8003212:	0003      	movs	r3, r0
 8003214:	613b      	str	r3, [r7, #16]
        if (retval<0) return retval;
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	2b00      	cmp	r3, #0
 800321a:	da01      	bge.n	8003220 <libswd_debug_halt+0xbc>
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	e034      	b.n	800328a <libswd_debug_halt+0x126>
        retval=libswd_memap_read_int_32(libswdctx, operation, LIBSWD_ARM_DEBUG_DHCSR_ADDR, 1, &dbgdhcsr);
 8003220:	4a1c      	ldr	r2, [pc, #112]	; (8003294 <libswd_debug_halt+0x130>)
 8003222:	1cfb      	adds	r3, r7, #3
 8003224:	7819      	ldrb	r1, [r3, #0]
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	230c      	movs	r3, #12
 800322a:	18fb      	adds	r3, r7, r3
 800322c:	9300      	str	r3, [sp, #0]
 800322e:	2301      	movs	r3, #1
 8003230:	f001 fea8 	bl	8004f84 <libswd_memap_read_int_32>
 8003234:	0003      	movs	r3, r0
 8003236:	613b      	str	r3, [r7, #16]
        if (retval<0) return retval;
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	2b00      	cmp	r3, #0
 800323c:	da01      	bge.n	8003242 <libswd_debug_halt+0xde>
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	e023      	b.n	800328a <libswd_debug_halt+0x126>
        if (dbgdhcsr&LIBSWD_ARM_DEBUG_DHCSR_SHALT)
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	2380      	movs	r3, #128	; 0x80
 8003246:	029b      	lsls	r3, r3, #10
 8003248:	4013      	ands	r3, r2
 800324a:	d010      	beq.n	800326e <libswd_debug_halt+0x10a>
        {
            libswd_log(libswdctx, LIBSWD_LOGLEVEL_INFO, "LIBSWD_I: libswd_debug_halt(): DHCSR=0x%08X\n", dbgdhcsr);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	4a13      	ldr	r2, [pc, #76]	; (800329c <libswd_debug_halt+0x138>)
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	2104      	movs	r1, #4
 8003254:	f001 f8ca 	bl	80043ec <libswd_log>
            libswd_log(libswdctx, LIBSWD_LOGLEVEL_NORMAL, "LIBSWD_N: libswd_debug_halt(): TARGET HALT OK!\n");
 8003258:	4a11      	ldr	r2, [pc, #68]	; (80032a0 <libswd_debug_halt+0x13c>)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2101      	movs	r1, #1
 800325e:	0018      	movs	r0, r3
 8003260:	f001 f8c4 	bl	80043ec <libswd_log>
            libswdctx->log.debug.dhcsr=dbgdhcsr;
 8003264:	68fa      	ldr	r2, [r7, #12]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	66da      	str	r2, [r3, #108]	; 0x6c
            return LIBSWD_OK;
 800326a:	2300      	movs	r3, #0
 800326c:	e00d      	b.n	800328a <libswd_debug_halt+0x126>
    for (i=LIBSWD_RETRY_COUNT_DEFAULT;i;i--)
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	3b01      	subs	r3, #1
 8003272:	617b      	str	r3, [r7, #20]
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1b3      	bne.n	80031e2 <libswd_debug_halt+0x7e>
        }
    }
    libswd_log(libswdctx, LIBSWD_LOGLEVEL_ERROR, "LIBSWD_E: libswd_debug_halt(): TARGET HALT ERROR!\n");
 800327a:	4a0a      	ldr	r2, [pc, #40]	; (80032a4 <libswd_debug_halt+0x140>)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2102      	movs	r1, #2
 8003280:	0018      	movs	r0, r3
 8003282:	f001 f8b3 	bl	80043ec <libswd_log>
    return LIBSWD_ERROR_MAXRETRY;
 8003286:	232b      	movs	r3, #43	; 0x2b
 8003288:	425b      	negs	r3, r3
}
 800328a:	0018      	movs	r0, r3
 800328c:	46bd      	mov	sp, r7
 800328e:	b006      	add	sp, #24
 8003290:	bd80      	pop	{r7, pc}
 8003292:	46c0      	nop			; (mov r8, r8)
 8003294:	e000edf0 	.word	0xe000edf0
 8003298:	a05f0000 	.word	0xa05f0000
 800329c:	08009b68 	.word	0x08009b68
 80032a0:	08009b98 	.word	0x08009b98
 80032a4:	08009bc8 	.word	0x08009bc8

080032a8 <libswd_debug_is_halted>:
    libswd_log(libswdctx, LIBSWD_LOGLEVEL_ERROR, "LIBSWD_E: libswd_debug_run(): TARGET RUN ERROR!\n");
    return LIBSWD_ERROR_MAXRETRY;
}

int libswd_debug_is_halted(libswd_ctx_t *libswdctx, libswd_operation_t operation)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	000a      	movs	r2, r1
 80032b2:	1cfb      	adds	r3, r7, #3
 80032b4:	701a      	strb	r2, [r3, #0]
    if (libswdctx==NULL) return LIBSWD_ERROR_NULLCONTEXT;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d102      	bne.n	80032c2 <libswd_debug_is_halted+0x1a>
 80032bc:	230a      	movs	r3, #10
 80032be:	425b      	negs	r3, r3
 80032c0:	e00f      	b.n	80032e2 <libswd_debug_is_halted+0x3a>
    if (operation!=LIBSWD_OPERATION_EXECUTE && operation!=LIBSWD_OPERATION_ENQUEUE) return LIBSWD_ERROR_PARAM;
 80032c2:	1cfb      	adds	r3, r7, #3
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d006      	beq.n	80032d8 <libswd_debug_is_halted+0x30>
 80032ca:	1cfb      	adds	r3, r7, #3
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d002      	beq.n	80032d8 <libswd_debug_is_halted+0x30>
 80032d2:	2305      	movs	r3, #5
 80032d4:	425b      	negs	r3, r3
 80032d6:	e004      	b.n	80032e2 <libswd_debug_is_halted+0x3a>
    
    return (libswdctx->log.debug.dhcsr&LIBSWD_ARM_DEBUG_DHCSR_SHALT)?1:0;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032dc:	145b      	asrs	r3, r3, #17
 80032de:	2201      	movs	r2, #1
 80032e0:	4013      	ands	r3, r2
}
 80032e2:	0018      	movs	r0, r3
 80032e4:	46bd      	mov	sp, r7
 80032e6:	b002      	add	sp, #8
 80032e8:	bd80      	pop	{r7, pc}
	...

080032ec <libswd_drv_transmit>:
* When CTRL/STAT:STICKYORUN=1 ACK={WAIT,FAULT] requires additional data phase.
* \param *libswdctx swd context pointer.
* \param *cmd pointer to the command to be sent.
* \return number of commands transmitted (1), or LIBSWD_ERROR_CODE on failure.
*/
int libswd_drv_transmit(libswd_ctx_t *libswdctx, libswd_cmd_t *cmd){
 80032ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032ee:	b08d      	sub	sp, #52	; 0x34
 80032f0:	af06      	add	r7, sp, #24
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
    if (libswdctx==NULL) return LIBSWD_ERROR_NULLCONTEXT;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d102      	bne.n	8003302 <libswd_drv_transmit+0x16>
 80032fc:	230a      	movs	r3, #10
 80032fe:	425b      	negs	r3, r3
 8003300:	e2f9      	b.n	80038f6 <libswd_drv_transmit+0x60a>
    if (cmd==NULL) return LIBSWD_ERROR_NULLPOINTER;
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d102      	bne.n	800330e <libswd_drv_transmit+0x22>
 8003308:	2302      	movs	r3, #2
 800330a:	425b      	negs	r3, r3
 800330c:	e2f3      	b.n	80038f6 <libswd_drv_transmit+0x60a>
    
    int res=LIBSWD_ERROR_BADCMDTYPE, errcode=LIBSWD_ERROR_RESULT;
 800330e:	2320      	movs	r3, #32
 8003310:	425b      	negs	r3, r3
 8003312:	617b      	str	r3, [r7, #20]
 8003314:	2307      	movs	r3, #7
 8003316:	425b      	negs	r3, r3
 8003318:	613b      	str	r3, [r7, #16]
    
    switch (cmd->cmdtype){
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	7a5b      	ldrb	r3, [r3, #9]
 800331e:	b25b      	sxtb	r3, r3
 8003320:	3307      	adds	r3, #7
 8003322:	2b0d      	cmp	r3, #13
 8003324:	d900      	bls.n	8003328 <libswd_drv_transmit+0x3c>
 8003326:	e16a      	b.n	80035fe <libswd_drv_transmit+0x312>
 8003328:	009a      	lsls	r2, r3, #2
 800332a:	4bcd      	ldr	r3, [pc, #820]	; (8003660 <libswd_drv_transmit+0x374>)
 800332c:	18d3      	adds	r3, r2, r3
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	469f      	mov	pc, r3
    case LIBSWD_CMDTYPE_MOSI:
    case LIBSWD_CMDTYPE_MISO:
        libswd_log(libswdctx, LIBSWD_LOGLEVEL_WARNING, "LIBSWD_W: libswd_drv_transmit(): This command does not contain payload.");
 8003332:	4acc      	ldr	r2, [pc, #816]	; (8003664 <libswd_drv_transmit+0x378>)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2103      	movs	r1, #3
 8003338:	0018      	movs	r0, r3
 800333a:	f001 f857 	bl	80043ec <libswd_log>
        break;
 800333e:	e172      	b.n	8003626 <libswd_drv_transmit+0x33a>
        
    case LIBSWD_CMDTYPE_MOSI_CONTROL:
        // 8 clock cycles.
        if (cmd->bits!=8) return LIBSWD_ERROR_BADCMDDATA;
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	7a1b      	ldrb	r3, [r3, #8]
 8003344:	2b08      	cmp	r3, #8
 8003346:	d002      	beq.n	800334e <libswd_drv_transmit+0x62>
 8003348:	2321      	movs	r3, #33	; 0x21
 800334a:	425b      	negs	r3, r3
 800334c:	e2d3      	b.n	80038f6 <libswd_drv_transmit+0x60a>
        res=libswd_drv_mosi_8(libswdctx, cmd, cmd->control, 8, LIBSWD_DIR_LSBFIRST);
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	781a      	ldrb	r2, [r3, #0]
 8003352:	6839      	ldr	r1, [r7, #0]
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	2300      	movs	r3, #0
 8003358:	9300      	str	r3, [sp, #0]
 800335a:	2308      	movs	r3, #8
 800335c:	f000 fe30 	bl	8003fc0 <libswd_drv_mosi_8>
 8003360:	0003      	movs	r3, r0
 8003362:	617b      	str	r3, [r7, #20]
        if (res>=0) libswdctx->log.write.control = cmd->control;
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	2b00      	cmp	r3, #0
 8003368:	da00      	bge.n	800336c <libswd_drv_transmit+0x80>
 800336a:	e14b      	b.n	8003604 <libswd_drv_transmit+0x318>
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	0019      	movs	r1, r3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	22bc      	movs	r2, #188	; 0xbc
 8003376:	5099      	str	r1, [r3, r2]
        break;
 8003378:	e144      	b.n	8003604 <libswd_drv_transmit+0x318>
        
    case LIBSWD_CMDTYPE_MOSI_BITBANG:
        // 1 clock cycle.
        if (cmd->bits!=1) return LIBSWD_ERROR_BADCMDDATA;
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	7a1b      	ldrb	r3, [r3, #8]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d002      	beq.n	8003388 <libswd_drv_transmit+0x9c>
 8003382:	2321      	movs	r3, #33	; 0x21
 8003384:	425b      	negs	r3, r3
 8003386:	e2b6      	b.n	80038f6 <libswd_drv_transmit+0x60a>
        res=libswd_drv_mosi_8(libswdctx, cmd, cmd->mosibit, 1, LIBSWD_DIR_LSBFIRST);
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	781a      	ldrb	r2, [r3, #0]
 800338c:	6839      	ldr	r1, [r7, #0]
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	2300      	movs	r3, #0
 8003392:	9300      	str	r3, [sp, #0]
 8003394:	2301      	movs	r3, #1
 8003396:	f000 fe13 	bl	8003fc0 <libswd_drv_mosi_8>
 800339a:	0003      	movs	r3, r0
 800339c:	617b      	str	r3, [r7, #20]
        if (res>=0) libswdctx->log.write.bitbang = cmd->mosibit;
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	da00      	bge.n	80033a6 <libswd_drv_transmit+0xba>
 80033a4:	e130      	b.n	8003608 <libswd_drv_transmit+0x31c>
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	7819      	ldrb	r1, [r3, #0]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	22c0      	movs	r2, #192	; 0xc0
 80033ae:	5499      	strb	r1, [r3, r2]
        break;
 80033b0:	e12a      	b.n	8003608 <libswd_drv_transmit+0x31c>
        
    case LIBSWD_CMDTYPE_MOSI_PARITY:
        // 1 clock cycle.
        if (cmd->bits!=1) return LIBSWD_ERROR_BADCMDDATA;
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	7a1b      	ldrb	r3, [r3, #8]
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d002      	beq.n	80033c0 <libswd_drv_transmit+0xd4>
 80033ba:	2321      	movs	r3, #33	; 0x21
 80033bc:	425b      	negs	r3, r3
 80033be:	e29a      	b.n	80038f6 <libswd_drv_transmit+0x60a>
        res=libswd_drv_mosi_8(libswdctx, cmd, cmd->mosiparity, 1, LIBSWD_DIR_LSBFIRST);
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	781a      	ldrb	r2, [r3, #0]
 80033c4:	6839      	ldr	r1, [r7, #0]
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	2300      	movs	r3, #0
 80033ca:	9300      	str	r3, [sp, #0]
 80033cc:	2301      	movs	r3, #1
 80033ce:	f000 fdf7 	bl	8003fc0 <libswd_drv_mosi_8>
 80033d2:	0003      	movs	r3, r0
 80033d4:	617b      	str	r3, [r7, #20]
        if (res>=0) libswdctx->log.write.parity = cmd->mosiparity;
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	da00      	bge.n	80033de <libswd_drv_transmit+0xf2>
 80033dc:	e116      	b.n	800360c <libswd_drv_transmit+0x320>
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	7819      	ldrb	r1, [r3, #0]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	22c1      	movs	r2, #193	; 0xc1
 80033e6:	5499      	strb	r1, [r3, r2]
        break;
 80033e8:	e110      	b.n	800360c <libswd_drv_transmit+0x320>
        
    case LIBSWD_CMDTYPE_MOSI_TRN:
        // 1..4-bit clock cycle.
        if (cmd->bits<LIBSWD_TURNROUND_MIN_VAL && cmd->bits>LIBSWD_TURNROUND_MAX_VAL)
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	7a1b      	ldrb	r3, [r3, #8]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d106      	bne.n	8003400 <libswd_drv_transmit+0x114>
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	7a1b      	ldrb	r3, [r3, #8]
 80033f6:	2b04      	cmp	r3, #4
 80033f8:	d902      	bls.n	8003400 <libswd_drv_transmit+0x114>
            return LIBSWD_ERROR_BADCMDDATA;
 80033fa:	2321      	movs	r3, #33	; 0x21
 80033fc:	425b      	negs	r3, r3
 80033fe:	e27a      	b.n	80038f6 <libswd_drv_transmit+0x60a>
        res=libswd_drv_mosi_trn(libswdctx, cmd->bits);
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	7a1b      	ldrb	r3, [r3, #8]
 8003404:	001a      	movs	r2, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	0011      	movs	r1, r2
 800340a:	0018      	movs	r0, r3
 800340c:	f000 ff5e 	bl	80042cc <libswd_drv_mosi_trn>
 8003410:	0003      	movs	r3, r0
 8003412:	617b      	str	r3, [r7, #20]
        break;
 8003414:	e107      	b.n	8003626 <libswd_drv_transmit+0x33a>
        
    case LIBSWD_CMDTYPE_MOSI_REQUEST:
        // 8 clock cycles.
        if (cmd->bits!=LIBSWD_REQUEST_BITLEN) return LIBSWD_ERROR_BADCMDDATA;
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	7a1b      	ldrb	r3, [r3, #8]
 800341a:	2b08      	cmp	r3, #8
 800341c:	d002      	beq.n	8003424 <libswd_drv_transmit+0x138>
 800341e:	2321      	movs	r3, #33	; 0x21
 8003420:	425b      	negs	r3, r3
 8003422:	e268      	b.n	80038f6 <libswd_drv_transmit+0x60a>
        res=libswd_drv_mosi_8(libswdctx, cmd, cmd->request, 8, LIBSWD_DIR_LSBFIRST);
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	781a      	ldrb	r2, [r3, #0]
 8003428:	6839      	ldr	r1, [r7, #0]
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	2300      	movs	r3, #0
 800342e:	9300      	str	r3, [sp, #0]
 8003430:	2308      	movs	r3, #8
 8003432:	f000 fdc5 	bl	8003fc0 <libswd_drv_mosi_8>
 8003436:	0003      	movs	r3, r0
 8003438:	617b      	str	r3, [r7, #20]
        if (res>=0){
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	2b00      	cmp	r3, #0
 800343e:	da00      	bge.n	8003442 <libswd_drv_transmit+0x156>
 8003440:	e0e6      	b.n	8003610 <libswd_drv_transmit+0x324>
            libswdctx->log.write.request=cmd->request;
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	7819      	ldrb	r1, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	22b4      	movs	r2, #180	; 0xb4
 800344a:	5499      	strb	r1, [r3, r2]
            // Log human-readable request fields for easier transmission debug.
            libswd_log(libswdctx, LIBSWD_LOGLEVEL_DEBUG, "LIBSWD_D: Sending Request: %s\n", \
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	781a      	ldrb	r2, [r3, #0]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	0011      	movs	r1, r2
 8003454:	0018      	movs	r0, r3
 8003456:	f001 f829 	bl	80044ac <libswd_request_string>
 800345a:	0003      	movs	r3, r0
 800345c:	4a82      	ldr	r2, [pc, #520]	; (8003668 <libswd_drv_transmit+0x37c>)
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	2105      	movs	r1, #5
 8003462:	f000 ffc3 	bl	80043ec <libswd_log>
                libswd_request_string(libswdctx, cmd->request));
        }
        break;
 8003466:	e0d3      	b.n	8003610 <libswd_drv_transmit+0x324>
        
    case LIBSWD_CMDTYPE_MOSI_DATA:
        // 32 clock cycles.
        if (cmd->bits!=LIBSWD_DATA_BITLEN) return LIBSWD_ERROR_BADCMDDATA;
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	7a1b      	ldrb	r3, [r3, #8]
 800346c:	2b20      	cmp	r3, #32
 800346e:	d002      	beq.n	8003476 <libswd_drv_transmit+0x18a>
 8003470:	2321      	movs	r3, #33	; 0x21
 8003472:	425b      	negs	r3, r3
 8003474:	e23f      	b.n	80038f6 <libswd_drv_transmit+0x60a>
        res=libswd_drv_mosi_32(libswdctx, cmd, cmd->mosidata, 32, LIBSWD_DIR_LSBFIRST);
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	6839      	ldr	r1, [r7, #0]
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	2300      	movs	r3, #0
 8003480:	9300      	str	r3, [sp, #0]
 8003482:	2320      	movs	r3, #32
 8003484:	f000 fdfe 	bl	8004084 <libswd_drv_mosi_32>
 8003488:	0003      	movs	r3, r0
 800348a:	617b      	str	r3, [r7, #20]
        if (res>=0) libswdctx->log.write.data = cmd->mosidata;
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	2b00      	cmp	r3, #0
 8003490:	da00      	bge.n	8003494 <libswd_drv_transmit+0x1a8>
 8003492:	e0bf      	b.n	8003614 <libswd_drv_transmit+0x328>
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	21b8      	movs	r1, #184	; 0xb8
 800349c:	505a      	str	r2, [r3, r1]
        break;
 800349e:	e0b9      	b.n	8003614 <libswd_drv_transmit+0x328>
        
    case LIBSWD_CMDTYPE_MISO_ACK:
        // 3 clock cycles.
        if (cmd->bits!=LIBSWD_ACK_BITLEN) return LIBSWD_ERROR_BADCMDDATA;
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	7a1b      	ldrb	r3, [r3, #8]
 80034a4:	2b03      	cmp	r3, #3
 80034a6:	d002      	beq.n	80034ae <libswd_drv_transmit+0x1c2>
 80034a8:	2321      	movs	r3, #33	; 0x21
 80034aa:	425b      	negs	r3, r3
 80034ac:	e223      	b.n	80038f6 <libswd_drv_transmit+0x60a>
        res=libswd_drv_miso_8(libswdctx, cmd, &cmd->ack, cmd->bits, LIBSWD_DIR_LSBFIRST);
 80034ae:	683a      	ldr	r2, [r7, #0]
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	7a1b      	ldrb	r3, [r3, #8]
 80034b4:	001c      	movs	r4, r3
 80034b6:	6839      	ldr	r1, [r7, #0]
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	2300      	movs	r3, #0
 80034bc:	9300      	str	r3, [sp, #0]
 80034be:	0023      	movs	r3, r4
 80034c0:	f000 fe40 	bl	8004144 <libswd_drv_miso_8>
 80034c4:	0003      	movs	r3, r0
 80034c6:	617b      	str	r3, [r7, #20]
        if (res>=0) 
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	da00      	bge.n	80034d0 <libswd_drv_transmit+0x1e4>
 80034ce:	e0a3      	b.n	8003618 <libswd_drv_transmit+0x32c>
        {
            libswdctx->log.read.ack = cmd->ack;
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	7819      	ldrb	r1, [r3, #0]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	22a5      	movs	r2, #165	; 0xa5
 80034d8:	5499      	strb	r1, [r3, r2]
            if (cmd->ack_p != NULL)
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d100      	bne.n	80034e4 <libswd_drv_transmit+0x1f8>
 80034e2:	e099      	b.n	8003618 <libswd_drv_transmit+0x32c>
            {
                *cmd->ack_p = cmd->ack;   
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	683a      	ldr	r2, [r7, #0]
 80034ea:	7812      	ldrb	r2, [r2, #0]
 80034ec:	701a      	strb	r2, [r3, #0]
            }
        }
        break;
 80034ee:	e093      	b.n	8003618 <libswd_drv_transmit+0x32c>
        
    case LIBSWD_CMDTYPE_MISO_BITBANG:
        // 1 clock cycle.
        if (cmd->bits!=1) return LIBSWD_ERROR_BADCMDDATA;
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	7a1b      	ldrb	r3, [r3, #8]
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d002      	beq.n	80034fe <libswd_drv_transmit+0x212>
 80034f8:	2321      	movs	r3, #33	; 0x21
 80034fa:	425b      	negs	r3, r3
 80034fc:	e1fb      	b.n	80038f6 <libswd_drv_transmit+0x60a>
        res=libswd_drv_miso_8(libswdctx, cmd, &cmd->misobit, 1, LIBSWD_DIR_LSBFIRST);
 80034fe:	683a      	ldr	r2, [r7, #0]
 8003500:	6839      	ldr	r1, [r7, #0]
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	2300      	movs	r3, #0
 8003506:	9300      	str	r3, [sp, #0]
 8003508:	2301      	movs	r3, #1
 800350a:	f000 fe1b 	bl	8004144 <libswd_drv_miso_8>
 800350e:	0003      	movs	r3, r0
 8003510:	617b      	str	r3, [r7, #20]
        if (res>=0) 
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	2b00      	cmp	r3, #0
 8003516:	da00      	bge.n	800351a <libswd_drv_transmit+0x22e>
 8003518:	e080      	b.n	800361c <libswd_drv_transmit+0x330>
        {
            libswdctx->log.read.bitbang = cmd->misobit;
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	7819      	ldrb	r1, [r3, #0]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	22b0      	movs	r2, #176	; 0xb0
 8003522:	5499      	strb	r1, [r3, r2]
            if (cmd->misobit_p != NULL)
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d100      	bne.n	800352e <libswd_drv_transmit+0x242>
 800352c:	e076      	b.n	800361c <libswd_drv_transmit+0x330>
            {
                *cmd->misobit_p = cmd->misobit;
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	683a      	ldr	r2, [r7, #0]
 8003534:	7812      	ldrb	r2, [r2, #0]
 8003536:	701a      	strb	r2, [r3, #0]
            }
        }
        break;
 8003538:	e070      	b.n	800361c <libswd_drv_transmit+0x330>
        
    case LIBSWD_CMDTYPE_MISO_PARITY:
        // 1 clock cycle.
        if (cmd->bits!=1) return LIBSWD_ERROR_BADCMDDATA;
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	7a1b      	ldrb	r3, [r3, #8]
 800353e:	2b01      	cmp	r3, #1
 8003540:	d002      	beq.n	8003548 <libswd_drv_transmit+0x25c>
 8003542:	2321      	movs	r3, #33	; 0x21
 8003544:	425b      	negs	r3, r3
 8003546:	e1d6      	b.n	80038f6 <libswd_drv_transmit+0x60a>
        res=libswd_drv_miso_8(libswdctx, cmd, &cmd->misoparity, 1, LIBSWD_DIR_LSBFIRST);
 8003548:	683a      	ldr	r2, [r7, #0]
 800354a:	6839      	ldr	r1, [r7, #0]
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	2300      	movs	r3, #0
 8003550:	9300      	str	r3, [sp, #0]
 8003552:	2301      	movs	r3, #1
 8003554:	f000 fdf6 	bl	8004144 <libswd_drv_miso_8>
 8003558:	0003      	movs	r3, r0
 800355a:	617b      	str	r3, [r7, #20]
        if (res>=0)
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	2b00      	cmp	r3, #0
 8003560:	db5e      	blt.n	8003620 <libswd_drv_transmit+0x334>
        {
            libswdctx->log.read.parity = cmd->misoparity;
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	7819      	ldrb	r1, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	22b1      	movs	r2, #177	; 0xb1
 800356a:	5499      	strb	r1, [r3, r2]
            if (cmd->misoparity_p != NULL)
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d055      	beq.n	8003620 <libswd_drv_transmit+0x334>
            {
                *cmd->misoparity_p = cmd->misoparity;
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	683a      	ldr	r2, [r7, #0]
 800357a:	7812      	ldrb	r2, [r2, #0]
 800357c:	701a      	strb	r2, [r3, #0]
            }
        }
        break;
 800357e:	e04f      	b.n	8003620 <libswd_drv_transmit+0x334>
        
    case LIBSWD_CMDTYPE_MISO_TRN:
        // 1..4 clock cycles
        if (cmd->bits<LIBSWD_TURNROUND_MIN_VAL && cmd->bits>LIBSWD_TURNROUND_MAX_VAL)
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	7a1b      	ldrb	r3, [r3, #8]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d106      	bne.n	8003596 <libswd_drv_transmit+0x2aa>
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	7a1b      	ldrb	r3, [r3, #8]
 800358c:	2b04      	cmp	r3, #4
 800358e:	d902      	bls.n	8003596 <libswd_drv_transmit+0x2aa>
            return LIBSWD_ERROR_BADCMDDATA;
 8003590:	2321      	movs	r3, #33	; 0x21
 8003592:	425b      	negs	r3, r3
 8003594:	e1af      	b.n	80038f6 <libswd_drv_transmit+0x60a>
        res=libswd_drv_miso_trn(libswdctx, cmd->bits);
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	7a1b      	ldrb	r3, [r3, #8]
 800359a:	001a      	movs	r2, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	0011      	movs	r1, r2
 80035a0:	0018      	movs	r0, r3
 80035a2:	f000 fee7 	bl	8004374 <libswd_drv_miso_trn>
 80035a6:	0003      	movs	r3, r0
 80035a8:	617b      	str	r3, [r7, #20]
        break;
 80035aa:	e03c      	b.n	8003626 <libswd_drv_transmit+0x33a>
        
    case LIBSWD_CMDTYPE_MISO_DATA:
        // 32 clock cycles
        if (cmd->bits!=LIBSWD_DATA_BITLEN) return LIBSWD_ERROR_BADCMDDATA;
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	7a1b      	ldrb	r3, [r3, #8]
 80035b0:	2b20      	cmp	r3, #32
 80035b2:	d002      	beq.n	80035ba <libswd_drv_transmit+0x2ce>
 80035b4:	2321      	movs	r3, #33	; 0x21
 80035b6:	425b      	negs	r3, r3
 80035b8:	e19d      	b.n	80038f6 <libswd_drv_transmit+0x60a>
        res=libswd_drv_miso_32(libswdctx, cmd, &cmd->misodata, cmd->bits, LIBSWD_DIR_LSBFIRST);
 80035ba:	683a      	ldr	r2, [r7, #0]
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	7a1b      	ldrb	r3, [r3, #8]
 80035c0:	001c      	movs	r4, r3
 80035c2:	6839      	ldr	r1, [r7, #0]
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	2300      	movs	r3, #0
 80035c8:	9300      	str	r3, [sp, #0]
 80035ca:	0023      	movs	r3, r4
 80035cc:	f000 fe1c 	bl	8004208 <libswd_drv_miso_32>
 80035d0:	0003      	movs	r3, r0
 80035d2:	617b      	str	r3, [r7, #20]
        if (res>=0)
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	db24      	blt.n	8003624 <libswd_drv_transmit+0x338>
        {
            libswdctx->log.read.data = cmd->misodata;
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	21a8      	movs	r1, #168	; 0xa8
 80035e2:	505a      	str	r2, [r3, r1]
            if (cmd->misodata_p != NULL)
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d01b      	beq.n	8003624 <libswd_drv_transmit+0x338>
            {
                *cmd->misodata_p = cmd->misodata;
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	683a      	ldr	r2, [r7, #0]
 80035f2:	6812      	ldr	r2, [r2, #0]
 80035f4:	601a      	str	r2, [r3, #0]
            }
        }
        break;
 80035f6:	e015      	b.n	8003624 <libswd_drv_transmit+0x338>
        
    case LIBSWD_CMDTYPE_UNDEFINED:
        res=0;
 80035f8:	2300      	movs	r3, #0
 80035fa:	617b      	str	r3, [r7, #20]
        break;
 80035fc:	e013      	b.n	8003626 <libswd_drv_transmit+0x33a>
        
    default:
        return LIBSWD_ERROR_BADCMDTYPE;
 80035fe:	2320      	movs	r3, #32
 8003600:	425b      	negs	r3, r3
 8003602:	e178      	b.n	80038f6 <libswd_drv_transmit+0x60a>
        break;
 8003604:	46c0      	nop			; (mov r8, r8)
 8003606:	e00e      	b.n	8003626 <libswd_drv_transmit+0x33a>
        break;
 8003608:	46c0      	nop			; (mov r8, r8)
 800360a:	e00c      	b.n	8003626 <libswd_drv_transmit+0x33a>
        break;
 800360c:	46c0      	nop			; (mov r8, r8)
 800360e:	e00a      	b.n	8003626 <libswd_drv_transmit+0x33a>
        break;
 8003610:	46c0      	nop			; (mov r8, r8)
 8003612:	e008      	b.n	8003626 <libswd_drv_transmit+0x33a>
        break;
 8003614:	46c0      	nop			; (mov r8, r8)
 8003616:	e006      	b.n	8003626 <libswd_drv_transmit+0x33a>
        break;
 8003618:	46c0      	nop			; (mov r8, r8)
 800361a:	e004      	b.n	8003626 <libswd_drv_transmit+0x33a>
        break;
 800361c:	46c0      	nop			; (mov r8, r8)
 800361e:	e002      	b.n	8003626 <libswd_drv_transmit+0x33a>
        break;
 8003620:	46c0      	nop			; (mov r8, r8)
 8003622:	e000      	b.n	8003626 <libswd_drv_transmit+0x33a>
        break;
 8003624:	46c0      	nop			; (mov r8, r8)
    }
    
    libswd_log(libswdctx, LIBSWD_LOGLEVEL_PAYLOAD,
               "LIBSWD_P: libswd_drv_transmit(libswdctx=@%p, cmd=@%p) bits=%-2d cmdtype=%-12s returns=%-3d payload=0x%08x (%s)\n",
               libswdctx, cmd, cmd->bits, libswd_cmd_string_cmdtype(cmd), res,
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	7a1b      	ldrb	r3, [r3, #8]
    libswd_log(libswdctx, LIBSWD_LOGLEVEL_PAYLOAD,
 800362a:	001e      	movs	r6, r3
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	0018      	movs	r0, r3
 8003630:	f7fd fee0 	bl	80013f4 <libswd_cmd_string_cmdtype>
 8003634:	0005      	movs	r5, r0
               (cmd->bits>8)?cmd->data32:cmd->data8,
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	7a1b      	ldrb	r3, [r3, #8]
    libswd_log(libswdctx, LIBSWD_LOGLEVEL_PAYLOAD,
 800363a:	2b08      	cmp	r3, #8
 800363c:	d902      	bls.n	8003644 <libswd_drv_transmit+0x358>
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	681c      	ldr	r4, [r3, #0]
 8003642:	e002      	b.n	800364a <libswd_drv_transmit+0x35e>
               (cmd->bits>8)?cmd->data32:cmd->data8,
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	781b      	ldrb	r3, [r3, #0]
    libswd_log(libswdctx, LIBSWD_LOGLEVEL_PAYLOAD,
 8003648:	001c      	movs	r4, r3
               (cmd->bits<=8)?libswd_bin8_string(cmd->data8):libswd_bin32_string(cmd->data32));
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	7a1b      	ldrb	r3, [r3, #8]
    libswd_log(libswdctx, LIBSWD_LOGLEVEL_PAYLOAD,
 800364e:	2b08      	cmp	r3, #8
 8003650:	d80c      	bhi.n	800366c <libswd_drv_transmit+0x380>
               (cmd->bits<=8)?libswd_bin8_string(cmd->data8):libswd_bin32_string(cmd->data32));
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	0018      	movs	r0, r3
 8003658:	f7fc ffa0 	bl	800059c <libswd_bin8_string>
 800365c:	0003      	movs	r3, r0
 800365e:	e00b      	b.n	8003678 <libswd_drv_transmit+0x38c>
 8003660:	0800bf5c 	.word	0x0800bf5c
 8003664:	08009c60 	.word	0x08009c60
 8003668:	08009ca8 	.word	0x08009ca8
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	0018      	movs	r0, r3
 8003672:	f7fc ffcd 	bl	8000610 <libswd_bin32_string>
 8003676:	0003      	movs	r3, r0
    libswd_log(libswdctx, LIBSWD_LOGLEVEL_PAYLOAD,
 8003678:	6879      	ldr	r1, [r7, #4]
 800367a:	4aa1      	ldr	r2, [pc, #644]	; (8003900 <libswd_drv_transmit+0x614>)
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	9305      	str	r3, [sp, #20]
 8003680:	9404      	str	r4, [sp, #16]
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	9303      	str	r3, [sp, #12]
 8003686:	9502      	str	r5, [sp, #8]
 8003688:	9601      	str	r6, [sp, #4]
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	9300      	str	r3, [sp, #0]
 800368e:	000b      	movs	r3, r1
 8003690:	2106      	movs	r1, #6
 8003692:	f000 feab 	bl	80043ec <libswd_log>
    
    if (res<0) return res;
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	2b00      	cmp	r3, #0
 800369a:	da01      	bge.n	80036a0 <libswd_drv_transmit+0x3b4>
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	e12a      	b.n	80038f6 <libswd_drv_transmit+0x60a>
    cmd->done=1;
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	2201      	movs	r2, #1
 80036a4:	729a      	strb	r2, [r3, #10]
    
    /* Now verify the ACK value, notify caller about possible errors, truncate cmdq if libswdctx.config.autofixerrors is not set.
    * Accodring to ADIv5.0 specification (ARM IHI 0031A, section 5.4.5) data phase is required when STICKYORUN=1.
    * Unfortunately at this point we cannot read the CTRL/STAT flag, so we will write zeros to avoid random Request.
    */
    if (cmd->cmdtype==LIBSWD_CMDTYPE_MISO_ACK){
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	7a5b      	ldrb	r3, [r3, #9]
 80036aa:	b25b      	sxtb	r3, r3
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d000      	beq.n	80036b2 <libswd_drv_transmit+0x3c6>
 80036b0:	e0b6      	b.n	8003820 <libswd_drv_transmit+0x534>
        switch(cmd->ack){
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	2b04      	cmp	r3, #4
 80036b8:	d007      	beq.n	80036ca <libswd_drv_transmit+0x3de>
 80036ba:	dc20      	bgt.n	80036fe <libswd_drv_transmit+0x412>
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d002      	beq.n	80036c6 <libswd_drv_transmit+0x3da>
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d00f      	beq.n	80036e4 <libswd_drv_transmit+0x3f8>
 80036c4:	e01b      	b.n	80036fe <libswd_drv_transmit+0x412>
            // If the ACK was OK then simply return to the caller.
        case LIBSWD_ACK_OK_VAL: return res;
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	e115      	b.n	80038f6 <libswd_drv_transmit+0x60a>
        // For other ACK codes produce a warning and remember the code.
        case LIBSWD_ACK_FAULT_VAL:
            libswd_log(libswdctx, LIBSWD_LOGLEVEL_WARNING,
 80036ca:	6879      	ldr	r1, [r7, #4]
 80036cc:	4a8d      	ldr	r2, [pc, #564]	; (8003904 <libswd_drv_transmit+0x618>)
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	9300      	str	r3, [sp, #0]
 80036d4:	000b      	movs	r3, r1
 80036d6:	2103      	movs	r1, #3
 80036d8:	f000 fe88 	bl	80043ec <libswd_log>
                       "LIBSWD_W: libswd_drv_transmit(libswdctx=@%p, cmd=@%p): LIBSWD_ACK_FAULT detected!\n",
                       (void*)libswdctx, (void*)cmd );
            errcode=LIBSWD_ERROR_ACK_FAULT;
 80036dc:	2325      	movs	r3, #37	; 0x25
 80036de:	425b      	negs	r3, r3
 80036e0:	613b      	str	r3, [r7, #16]
            break;
 80036e2:	e018      	b.n	8003716 <libswd_drv_transmit+0x42a>
        case LIBSWD_ACK_WAIT_VAL:
            libswd_log(libswdctx, LIBSWD_LOGLEVEL_DEBUG,
 80036e4:	6879      	ldr	r1, [r7, #4]
 80036e6:	4a88      	ldr	r2, [pc, #544]	; (8003908 <libswd_drv_transmit+0x61c>)
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	9300      	str	r3, [sp, #0]
 80036ee:	000b      	movs	r3, r1
 80036f0:	2105      	movs	r1, #5
 80036f2:	f000 fe7b 	bl	80043ec <libswd_log>
                       "LIBSWD_D: libswd_drv_transmit(libswdctx=@%p, cmd=@%p): LIBSWD_ACK_WAIT detectd!\n",
                       (void*)libswdctx, (void*)cmd );
            errcode=LIBSWD_ERROR_ACK_WAIT;
 80036f6:	2324      	movs	r3, #36	; 0x24
 80036f8:	425b      	negs	r3, r3
 80036fa:	613b      	str	r3, [r7, #16]
            break;
 80036fc:	e00b      	b.n	8003716 <libswd_drv_transmit+0x42a>
        default:
            libswd_log(libswdctx, LIBSWD_LOGLEVEL_WARNING,
 80036fe:	6879      	ldr	r1, [r7, #4]
 8003700:	4a82      	ldr	r2, [pc, #520]	; (800390c <libswd_drv_transmit+0x620>)
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	9300      	str	r3, [sp, #0]
 8003708:	000b      	movs	r3, r1
 800370a:	2103      	movs	r1, #3
 800370c:	f000 fe6e 	bl	80043ec <libswd_log>
                       "LIBSWD_W: libswd_drv_transmit(libswdctx=@%p, cmd=@%p): UnknownACK/ProtocolErrorSequence! Target Powered Off?\n",
                       (void*)libswdctx, (void*)cmd );
            errcode=LIBSWD_ERROR_ACKUNKNOWN;
 8003710:	2313      	movs	r3, #19
 8003712:	425b      	negs	r3, r3
 8003714:	613b      	str	r3, [r7, #16]
        }
        // If libswdctx.config.autofixerrors is not set, on error truncate cmdq, append+execute dummy data phase, then let caller handle situation.
        // The reason for clearing out the queue is to preserve synchronization with Target.
        // As data phase is required in some situations and data are already enqueued use data pointers not to crash applications that rely on that poiters...
        if (!libswdctx->config.autofixerrors){
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	7b5b      	ldrb	r3, [r3, #13]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d158      	bne.n	80037d0 <libswd_drv_transmit+0x4e4>
            libswd_log(libswdctx, LIBSWD_LOGLEVEL_DEBUG,
 800371e:	6879      	ldr	r1, [r7, #4]
 8003720:	4a7b      	ldr	r2, [pc, #492]	; (8003910 <libswd_drv_transmit+0x624>)
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	9300      	str	r3, [sp, #0]
 8003728:	000b      	movs	r3, r1
 800372a:	2105      	movs	r1, #5
 800372c:	f000 fe5e 	bl	80043ec <libswd_log>
                       "LIBSWD_D: libswd_drv_transmit(libswdctx=@%p, cmd=@%p): ACK!=OK, clearing cmdq tail to preserve synchronization...\n",
                       (void*)libswdctx, (void*)cmd );
            // Save DATA and PARITY queue elements for ACK={WAIT,FAULT} as they may be referenced by application.
            if (errcode==LIBSWD_ERROR_ACK_WAIT || errcode==LIBSWD_ERROR_ACK_FAULT)
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	3324      	adds	r3, #36	; 0x24
 8003734:	d002      	beq.n	800373c <libswd_drv_transmit+0x450>
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	3325      	adds	r3, #37	; 0x25
 800373a:	d10c      	bne.n	8003756 <libswd_drv_transmit+0x46a>
                if (cmd->next3) if(cmd->next3->next3) cmd=cmd->next3->next3;
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	691b      	ldr	r3, [r3, #16]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d008      	beq.n	8003756 <libswd_drv_transmit+0x46a>
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	691b      	ldr	r3, [r3, #16]
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d003      	beq.n	8003756 <libswd_drv_transmit+0x46a>
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	691b      	ldr	r3, [r3, #16]
 8003754:	603b      	str	r3, [r7, #0]
            // Now free the queue tail.
            if (libswd_cmdq_free_tail(cmd)<0) {
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	0018      	movs	r0, r3
 800375a:	f7fe f834 	bl	80017c6 <libswd_cmdq_free_tail>
 800375e:	1e03      	subs	r3, r0, #0
 8003760:	da0b      	bge.n	800377a <libswd_drv_transmit+0x48e>
                libswd_log(libswdctx, LIBSWD_LOGLEVEL_WARNING,
 8003762:	6879      	ldr	r1, [r7, #4]
 8003764:	4a6b      	ldr	r2, [pc, #428]	; (8003914 <libswd_drv_transmit+0x628>)
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	9300      	str	r3, [sp, #0]
 800376c:	000b      	movs	r3, r1
 800376e:	2103      	movs	r1, #3
 8003770:	f000 fe3c 	bl	80043ec <libswd_log>
                           "LIBSWD_W: libswd_drv_transmit(libswdctx=@%p, cmd=@%p): Cannot free cmdq tail in ACK error handling routine, Protocol Error Sequence imminent...\n",
                           (void*)libswdctx, (void*)cmd );
                return LIBSWD_ERROR_QUEUENOTFREE;
 8003774:	2326      	movs	r3, #38	; 0x26
 8003776:	425b      	negs	r3, r3
 8003778:	e0bd      	b.n	80038f6 <libswd_drv_transmit+0x60a>
            }
            // TODO: MOVE THIS INTO SEPARATE ERROR HANDLING ROUTINE
            // If ACK={WAIT,FAULT} then append data phase and again flush the queue to maintain sync.
            // MOSI_TRN + 33 zero data cycles should be universal for STICKYORUN={0,1} ???
            if (errcode==LIBSWD_ERROR_ACK_WAIT || errcode==LIBSWD_ERROR_ACK_FAULT){
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	3324      	adds	r3, #36	; 0x24
 800377e:	d002      	beq.n	8003786 <libswd_drv_transmit+0x49a>
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	3325      	adds	r3, #37	; 0x25
 8003784:	d14a      	bne.n	800381c <libswd_drv_transmit+0x530>
                libswd_log(libswdctx, LIBSWD_LOGLEVEL_DEBUG, "LIBSWD_D: libswd_drv_transmit(libswdctx=@%p, cmd=@%p): Performing data phase after ACK={WAIT,FAULT}...\n", (void*)libswdctx, (void*)cmd);
 8003786:	6879      	ldr	r1, [r7, #4]
 8003788:	4a63      	ldr	r2, [pc, #396]	; (8003918 <libswd_drv_transmit+0x62c>)
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	9300      	str	r3, [sp, #0]
 8003790:	000b      	movs	r3, r1
 8003792:	2105      	movs	r1, #5
 8003794:	f000 fe2a 	bl	80043ec <libswd_log>
                int data=0;
 8003798:	2300      	movs	r3, #0
 800379a:	60fb      	str	r3, [r7, #12]
                char parity=0;
 800379c:	210b      	movs	r1, #11
 800379e:	187b      	adds	r3, r7, r1
 80037a0:	2200      	movs	r2, #0
 80037a2:	701a      	strb	r2, [r3, #0]
                res=libswd_bus_write_data_p(libswdctx, LIBSWD_OPERATION_EXECUTE, data, parity);
 80037a4:	187b      	adds	r3, r7, r1
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	68fa      	ldr	r2, [r7, #12]
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	2102      	movs	r1, #2
 80037ae:	f7fd fa1b 	bl	8000be8 <libswd_bus_write_data_p>
 80037b2:	0003      	movs	r3, r0
 80037b4:	617b      	str	r3, [r7, #20]
                if (res<0){
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	da2f      	bge.n	800381c <libswd_drv_transmit+0x530>
                    libswd_log(libswdctx, LIBSWD_LOGLEVEL_WARNING,
 80037bc:	6879      	ldr	r1, [r7, #4]
 80037be:	4a57      	ldr	r2, [pc, #348]	; (800391c <libswd_drv_transmit+0x630>)
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	9300      	str	r3, [sp, #0]
 80037c6:	000b      	movs	r3, r1
 80037c8:	2103      	movs	r1, #3
 80037ca:	f000 fe0f 	bl	80043ec <libswd_log>
 80037ce:	e025      	b.n	800381c <libswd_drv_transmit+0x530>
                               (void*)libswdctx, (void*)cmd );
                }
                // Caller now should read CTRL/STAT and clear STICKY Error Flags at this point.
            }
        } else {
            libswd_log(libswdctx, LIBSWD_LOGLEVEL_DEBUG,
 80037d0:	6879      	ldr	r1, [r7, #4]
 80037d2:	4a53      	ldr	r2, [pc, #332]	; (8003920 <libswd_drv_transmit+0x634>)
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	9300      	str	r3, [sp, #0]
 80037da:	000b      	movs	r3, r1
 80037dc:	2105      	movs	r1, #5
 80037de:	f000 fe05 	bl	80043ec <libswd_log>
                       "LIBSWD_D: libswd_drv_transmit(libswdctx=@%p, cmd=@%p): libswdctx->config.autofixerrors is set, applying error handling...\n", (void*)libswdctx, (void*)cmd );
            res=libswd_error_handle(libswdctx);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	0018      	movs	r0, r3
 80037e6:	f000 f979 	bl	8003adc <libswd_error_handle>
 80037ea:	0003      	movs	r3, r0
 80037ec:	617b      	str	r3, [r7, #20]
            if (res<0){
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	da11      	bge.n	8003818 <libswd_drv_transmit+0x52c>
                libswd_log(libswdctx, LIBSWD_LOGLEVEL_ERROR, "libswd_drv_transmit(libswdctx=@%p, @%p): error handling failed, %s\n", (void*)libswdctx, (void*)cmd, libswd_error_string((libswd_error_code_t)res));
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	b25b      	sxtb	r3, r3
 80037f8:	0018      	movs	r0, r3
 80037fa:	f000 f89f 	bl	800393c <libswd_error_string>
 80037fe:	0003      	movs	r3, r0
 8003800:	6879      	ldr	r1, [r7, #4]
 8003802:	4a48      	ldr	r2, [pc, #288]	; (8003924 <libswd_drv_transmit+0x638>)
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	9301      	str	r3, [sp, #4]
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	9300      	str	r3, [sp, #0]
 800380c:	000b      	movs	r3, r1
 800380e:	2102      	movs	r1, #2
 8003810:	f000 fdec 	bl	80043ec <libswd_log>
                return res;
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	e06e      	b.n	80038f6 <libswd_drv_transmit+0x60a>
            }
            errcode=LIBSWD_OK;
 8003818:	2300      	movs	r3, #0
 800381a:	613b      	str	r3, [r7, #16]
        }
        return errcode;
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	e06a      	b.n	80038f6 <libswd_drv_transmit+0x60a>
    
    
    /* Verify the PARITY value and notify caller about possible errors.
    * If error was detected, delete trailing queue elements.
    */
    if (cmd->cmdtype==LIBSWD_CMDTYPE_MISO_PARITY){
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	7a5b      	ldrb	r3, [r3, #9]
 8003824:	b25b      	sxtb	r3, r3
 8003826:	2b04      	cmp	r3, #4
 8003828:	d164      	bne.n	80038f4 <libswd_drv_transmit+0x608>
        if (cmd->prev3 == NULL)
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d102      	bne.n	8003838 <libswd_drv_transmit+0x54c>
        {
            return LIBSWD_ERROR_RECYCLED;
 8003832:	2332      	movs	r3, #50	; 0x32
 8003834:	425b      	negs	r3, r3
 8003836:	e05e      	b.n	80038f6 <libswd_drv_transmit+0x60a>
        }
        // Parity must be preceded with data, look for that data and verify parity.
        if (cmd->prev3->cmdtype==LIBSWD_CMDTYPE_MISO_DATA){
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	7a5b      	ldrb	r3, [r3, #9]
 800383e:	b25b      	sxtb	r3, r3
 8003840:	2b06      	cmp	r3, #6
 8003842:	d14c      	bne.n	80038de <libswd_drv_transmit+0x5f2>
            char testparity;
            // Calculate parity based on data value or give warning it cannot be performed.
            if (libswd_bin32_parity_even(cmd->prev3->misodata, &testparity)<0)
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	220a      	movs	r2, #10
 800384c:	18ba      	adds	r2, r7, r2
 800384e:	0011      	movs	r1, r2
 8003850:	0018      	movs	r0, r3
 8003852:	f7fc fe74 	bl	800053e <libswd_bin32_parity_even>
 8003856:	1e03      	subs	r3, r0, #0
 8003858:	da08      	bge.n	800386c <libswd_drv_transmit+0x580>
                libswd_log(libswdctx, LIBSWD_LOGLEVEL_WARNING,
 800385a:	6879      	ldr	r1, [r7, #4]
 800385c:	4a32      	ldr	r2, [pc, #200]	; (8003928 <libswd_drv_transmit+0x63c>)
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	9300      	str	r3, [sp, #0]
 8003864:	000b      	movs	r3, r1
 8003866:	2103      	movs	r1, #3
 8003868:	f000 fdc0 	bl	80043ec <libswd_log>
                           "LIBSWD_W: libswd_drv_transmit(libswdctx=@%p, cmd=@%p): Cannot perform parity check (calculation error).\n",
                           (void*)libswdctx, (void*)cmd );
            // Verify calculated data parity with value received from target.
            if (cmd->misoparity != testparity){
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	781a      	ldrb	r2, [r3, #0]
 8003870:	230a      	movs	r3, #10
 8003872:	18fb      	adds	r3, r7, r3
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	429a      	cmp	r2, r3
 8003878:	d03c      	beq.n	80038f4 <libswd_drv_transmit+0x608>
                // Give error message.
                libswd_log(libswdctx, LIBSWD_LOGLEVEL_WARNING,
                           "LIBSWD_W: libswd_drv_transmit(libswdctx=@%p, cmd=@%p): Parity mismatch detected (%s/%d)!\n",
                           (void*)libswdctx, (void*)cmd, libswd_bin32_string(cmd->prev3->misodata), cmd->misoparity );
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	68db      	ldr	r3, [r3, #12]
                libswd_log(libswdctx, LIBSWD_LOGLEVEL_WARNING,
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	0018      	movs	r0, r3
 8003882:	f7fc fec5 	bl	8000610 <libswd_bin32_string>
 8003886:	0004      	movs	r4, r0
                           (void*)libswdctx, (void*)cmd, libswd_bin32_string(cmd->prev3->misodata), cmd->misoparity );
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	781b      	ldrb	r3, [r3, #0]
                libswd_log(libswdctx, LIBSWD_LOGLEVEL_WARNING,
 800388c:	6879      	ldr	r1, [r7, #4]
 800388e:	4a27      	ldr	r2, [pc, #156]	; (800392c <libswd_drv_transmit+0x640>)
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	9302      	str	r3, [sp, #8]
 8003894:	9401      	str	r4, [sp, #4]
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	9300      	str	r3, [sp, #0]
 800389a:	000b      	movs	r3, r1
 800389c:	2103      	movs	r1, #3
 800389e:	f000 fda5 	bl	80043ec <libswd_log>
                // Clean the cmdq tail (as it contains invalid operations).
                libswd_log(libswdctx, LIBSWD_LOGLEVEL_WARNING,
 80038a2:	6879      	ldr	r1, [r7, #4]
 80038a4:	4a22      	ldr	r2, [pc, #136]	; (8003930 <libswd_drv_transmit+0x644>)
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	9300      	str	r3, [sp, #0]
 80038ac:	000b      	movs	r3, r1
 80038ae:	2103      	movs	r1, #3
 80038b0:	f000 fd9c 	bl	80043ec <libswd_log>
                           "LIBSWD_W: libswd_drv_transmit(libswdctx=@%p, cmd=@%p): Bad PARITY, clearing cmdq tail to preserve synchronization...\n",
                           (void*)libswdctx, (void*)cmd );
                if (libswd_cmdq_free_tail(cmd)<0) {
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	0018      	movs	r0, r3
 80038b8:	f7fd ff85 	bl	80017c6 <libswd_cmdq_free_tail>
 80038bc:	1e03      	subs	r3, r0, #0
 80038be:	da0b      	bge.n	80038d8 <libswd_drv_transmit+0x5ec>
                    libswd_log(libswdctx, LIBSWD_LOGLEVEL_WARNING,
 80038c0:	6879      	ldr	r1, [r7, #4]
 80038c2:	4a1c      	ldr	r2, [pc, #112]	; (8003934 <libswd_drv_transmit+0x648>)
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	9300      	str	r3, [sp, #0]
 80038ca:	000b      	movs	r3, r1
 80038cc:	2103      	movs	r1, #3
 80038ce:	f000 fd8d 	bl	80043ec <libswd_log>
                               "LIBSWD_W: libswd_drv_transmit(libswdctx=@%p, cmd=@%p): Cannot free cmdq tail in PARITY error hanlig routine!\n",
                               (void*)libswdctx, (void*)cmd);
                    return LIBSWD_ERROR_QUEUENOTFREE;
 80038d2:	2326      	movs	r3, #38	; 0x26
 80038d4:	425b      	negs	r3, r3
 80038d6:	e00e      	b.n	80038f6 <libswd_drv_transmit+0x60a>
                }
                // Return parity error.
                return LIBSWD_ERROR_PARITY;
 80038d8:	230f      	movs	r3, #15
 80038da:	425b      	negs	r3, r3
 80038dc:	e00b      	b.n	80038f6 <libswd_drv_transmit+0x60a>
            }
        } else {
            // If data element was not found then parity cannot be calculated.
            // Give warning about that but does not return an error, as queue might be cleaned just before.
            libswd_log(libswdctx, LIBSWD_LOGLEVEL_WARNING,
 80038de:	6879      	ldr	r1, [r7, #4]
 80038e0:	4a15      	ldr	r2, [pc, #84]	; (8003938 <libswd_drv_transmit+0x64c>)
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	9300      	str	r3, [sp, #0]
 80038e8:	000b      	movs	r3, r1
 80038ea:	2103      	movs	r1, #3
 80038ec:	f000 fd7e 	bl	80043ec <libswd_log>
                       "LIBSWD_W: libswd_drv_transmit(libswdctx=@%p, cmd=@%p): Cannot perform parity check (data missing).\n",
                       (void*)libswdctx, (void*)cmd );
            return res;
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	e000      	b.n	80038f6 <libswd_drv_transmit+0x60a>
        }
    }
    
    /* Everyting went fine, return number of elements processed. */
    return res;
 80038f4:	697b      	ldr	r3, [r7, #20]
}
 80038f6:	0018      	movs	r0, r3
 80038f8:	46bd      	mov	sp, r7
 80038fa:	b007      	add	sp, #28
 80038fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038fe:	46c0      	nop			; (mov r8, r8)
 8003900:	08009cc8 	.word	0x08009cc8
 8003904:	08009d38 	.word	0x08009d38
 8003908:	08009d8c 	.word	0x08009d8c
 800390c:	08009de0 	.word	0x08009de0
 8003910:	08009e50 	.word	0x08009e50
 8003914:	08009ec4 	.word	0x08009ec4
 8003918:	08009f58 	.word	0x08009f58
 800391c:	08009fc0 	.word	0x08009fc0
 8003920:	0800a04c 	.word	0x0800a04c
 8003924:	0800a0c8 	.word	0x0800a0c8
 8003928:	0800a10c 	.word	0x0800a10c
 800392c:	0800a178 	.word	0x0800a178
 8003930:	0800a1d4 	.word	0x0800a1d4
 8003934:	0800a24c 	.word	0x0800a24c
 8003938:	0800a2bc 	.word	0x0800a2bc

0800393c <libswd_error_string>:
/*******************************************************************************
* \defgroup libswd_error Error handling and information routines.
* @{
******************************************************************************/

char *libswd_error_string(libswd_error_code_t error){
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
 8003942:	0002      	movs	r2, r0
 8003944:	1dfb      	adds	r3, r7, #7
 8003946:	701a      	strb	r2, [r3, #0]
    switch (error){
 8003948:	1dfb      	adds	r3, r7, #7
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	b25b      	sxtb	r3, r3
 800394e:	3330      	adds	r3, #48	; 0x30
 8003950:	2b30      	cmp	r3, #48	; 0x30
 8003952:	d900      	bls.n	8003956 <libswd_error_string+0x1a>
 8003954:	e05e      	b.n	8003a14 <libswd_error_string+0xd8>
 8003956:	009a      	lsls	r2, r3, #2
 8003958:	4b31      	ldr	r3, [pc, #196]	; (8003a20 <libswd_error_string+0xe4>)
 800395a:	18d3      	adds	r3, r2, r3
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	469f      	mov	pc, r3
    case LIBSWD_OK:                 return "[LIBSWD_OK] hmm, there was no error";
 8003960:	4b30      	ldr	r3, [pc, #192]	; (8003a24 <libswd_error_string+0xe8>)
 8003962:	e058      	b.n	8003a16 <libswd_error_string+0xda>
    case LIBSWD_ERROR_GENERAL:      return "[LIBSWD_ERROR_GENERAL] general error";
 8003964:	4b30      	ldr	r3, [pc, #192]	; (8003a28 <libswd_error_string+0xec>)
 8003966:	e056      	b.n	8003a16 <libswd_error_string+0xda>
    case LIBSWD_ERROR_NULLPOINTER:  return "[LIBSWD_ERROR_NULLPOINTER] null pointer";
 8003968:	4b30      	ldr	r3, [pc, #192]	; (8003a2c <libswd_error_string+0xf0>)
 800396a:	e054      	b.n	8003a16 <libswd_error_string+0xda>
    case LIBSWD_ERROR_NULLQUEUE:    return "[LIBSWD_ERROR_NULLQUEUE] null queue";
 800396c:	4b30      	ldr	r3, [pc, #192]	; (8003a30 <libswd_error_string+0xf4>)
 800396e:	e052      	b.n	8003a16 <libswd_error_string+0xda>
    case LIBSWD_ERROR_NULLTRN:      return "[LIBSWD_ERROR_NULLTRN] null turnaround";
 8003970:	4b30      	ldr	r3, [pc, #192]	; (8003a34 <libswd_error_string+0xf8>)
 8003972:	e050      	b.n	8003a16 <libswd_error_string+0xda>
    case LIBSWD_ERROR_PARAM:        return "[LIBSWD_ERROR_PARAM] bad parameter";
 8003974:	4b30      	ldr	r3, [pc, #192]	; (8003a38 <libswd_error_string+0xfc>)
 8003976:	e04e      	b.n	8003a16 <libswd_error_string+0xda>
    case LIBSWD_ERROR_OUTOFMEM:     return "[LIBSWD_ERROR_OUTOFMEM] out of memory";
 8003978:	4b30      	ldr	r3, [pc, #192]	; (8003a3c <libswd_error_string+0x100>)
 800397a:	e04c      	b.n	8003a16 <libswd_error_string+0xda>
    case LIBSWD_ERROR_RESULT:       return "[LIBSWD_ERROR_RESULT] bad result";
 800397c:	4b30      	ldr	r3, [pc, #192]	; (8003a40 <libswd_error_string+0x104>)
 800397e:	e04a      	b.n	8003a16 <libswd_error_string+0xda>
    case LIBSWD_ERROR_RANGE:        return "[LIBSWD_ERROR_RANGE] out of range";
 8003980:	4b30      	ldr	r3, [pc, #192]	; (8003a44 <libswd_error_string+0x108>)
 8003982:	e048      	b.n	8003a16 <libswd_error_string+0xda>
    case LIBSWD_ERROR_DEFINITION:   return "[LIBSWD_ERROR_DEFINITION] definition error";
 8003984:	4b30      	ldr	r3, [pc, #192]	; (8003a48 <libswd_error_string+0x10c>)
 8003986:	e046      	b.n	8003a16 <libswd_error_string+0xda>
    case LIBSWD_ERROR_NULLCONTEXT:  return "[LIBSWD_ERROR_NULLCONTEXT] null context";
 8003988:	4b30      	ldr	r3, [pc, #192]	; (8003a4c <libswd_error_string+0x110>)
 800398a:	e044      	b.n	8003a16 <libswd_error_string+0xda>
    case LIBSWD_ERROR_QUEUE:        return "[LIBSWD_ERROR_QUEUE] queue error";
 800398c:	4b30      	ldr	r3, [pc, #192]	; (8003a50 <libswd_error_string+0x114>)
 800398e:	e042      	b.n	8003a16 <libswd_error_string+0xda>
    case LIBSWD_ERROR_ADDR:         return "[LIBSWD_ERROR_ADDR] addressing error";
 8003990:	4b30      	ldr	r3, [pc, #192]	; (8003a54 <libswd_error_string+0x118>)
 8003992:	e040      	b.n	8003a16 <libswd_error_string+0xda>
    case LIBSWD_ERROR_APnDP:        return "[LIBSWD_ERROR_APnDP] bad APnDP value";
 8003994:	4b30      	ldr	r3, [pc, #192]	; (8003a58 <libswd_error_string+0x11c>)
 8003996:	e03e      	b.n	8003a16 <libswd_error_string+0xda>
    case LIBSWD_ERROR_RnW:          return "[LIBSWD_ERROR_RnW] bad RnW value";
 8003998:	4b30      	ldr	r3, [pc, #192]	; (8003a5c <libswd_error_string+0x120>)
 800399a:	e03c      	b.n	8003a16 <libswd_error_string+0xda>
    case LIBSWD_ERROR_PARITY:       return "[LIBSWD_ERROR_PARITY] parity error";
 800399c:	4b30      	ldr	r3, [pc, #192]	; (8003a60 <libswd_error_string+0x124>)
 800399e:	e03a      	b.n	8003a16 <libswd_error_string+0xda>
    case LIBSWD_ERROR_ACK:          return "[LIBSWD_ERROR_ACK] acknowledge error";
 80039a0:	4b30      	ldr	r3, [pc, #192]	; (8003a64 <libswd_error_string+0x128>)
 80039a2:	e038      	b.n	8003a16 <libswd_error_string+0xda>
    case LIBSWD_ERROR_ACKUNKNOWN:   return "[LIBSWD_ERROR_ACKUNKNOWN] got unknown acknowledge";
 80039a4:	4b30      	ldr	r3, [pc, #192]	; (8003a68 <libswd_error_string+0x12c>)
 80039a6:	e036      	b.n	8003a16 <libswd_error_string+0xda>
    case LIBSWD_ERROR_ACKNOTDONE:   return "[LIBSWD_ERROR_ACKNOTDONE] not yet executed on target";
 80039a8:	4b30      	ldr	r3, [pc, #192]	; (8003a6c <libswd_error_string+0x130>)
 80039aa:	e034      	b.n	8003a16 <libswd_error_string+0xda>
    case LIBSWD_ERROR_ACKMISSING:   return "[LIBSWD_ERROR_ACKMISSING] command not found on the queue";
 80039ac:	4b30      	ldr	r3, [pc, #192]	; (8003a70 <libswd_error_string+0x134>)
 80039ae:	e032      	b.n	8003a16 <libswd_error_string+0xda>
    case LIBSWD_ERROR_ACKMISMATCH:  return "[LIBSWD_ERROR_ACKMISMATCH] different result address/value expected";
 80039b0:	4b30      	ldr	r3, [pc, #192]	; (8003a74 <libswd_error_string+0x138>)
 80039b2:	e030      	b.n	8003a16 <libswd_error_string+0xda>
    case LIBSWD_ERROR_ACKORDER:     return "[LIBSWD_ERROR_ACKORDER] cmdq not in sequence REQ->TRN->ACK";
 80039b4:	4b30      	ldr	r3, [pc, #192]	; (8003a78 <libswd_error_string+0x13c>)
 80039b6:	e02e      	b.n	8003a16 <libswd_error_string+0xda>
    case LIBSWD_ERROR_BADOPCODE:    return "[LIBSWD_ERROR_BADOPCODE] unsupported operation requested";
 80039b8:	4b30      	ldr	r3, [pc, #192]	; (8003a7c <libswd_error_string+0x140>)
 80039ba:	e02c      	b.n	8003a16 <libswd_error_string+0xda>
    case LIBSWD_ERROR_NODATACMD:    return "[LIBSWD_ERROR_NODATACMD] command not found on the queue";
 80039bc:	4b30      	ldr	r3, [pc, #192]	; (8003a80 <libswd_error_string+0x144>)
 80039be:	e02a      	b.n	8003a16 <libswd_error_string+0xda>
    case LIBSWD_ERROR_DATAPTR:      return "[LIBSWD_ERROR_DATAPTR] bad data pointer address";
 80039c0:	4b30      	ldr	r3, [pc, #192]	; (8003a84 <libswd_error_string+0x148>)
 80039c2:	e028      	b.n	8003a16 <libswd_error_string+0xda>
    case LIBSWD_ERROR_NOPARITYCMD:  return "[LIBSWD_ERROR_NOPARITYCMD] parity command missing or misplaced";
 80039c4:	4b30      	ldr	r3, [pc, #192]	; (8003a88 <libswd_error_string+0x14c>)
 80039c6:	e026      	b.n	8003a16 <libswd_error_string+0xda>
    case LIBSWD_ERROR_PARITYPTR:    return "[LIBSWD_ERROR_PARITYPTR] bad parity pointer address";
 80039c8:	4b30      	ldr	r3, [pc, #192]	; (8003a8c <libswd_error_string+0x150>)
 80039ca:	e024      	b.n	8003a16 <libswd_error_string+0xda>
    case LIBSWD_ERROR_NOTDONE:      return "[LIBSWD_ERROR_NOTDONE] could not end selected task";
 80039cc:	4b30      	ldr	r3, [pc, #192]	; (8003a90 <libswd_error_string+0x154>)
 80039ce:	e022      	b.n	8003a16 <libswd_error_string+0xda>
    case LIBSWD_ERROR_QUEUEROOT:    return "[LIBSWD_ERROR_QUEUEROOT] queue root not found or null";
 80039d0:	4b30      	ldr	r3, [pc, #192]	; (8003a94 <libswd_error_string+0x158>)
 80039d2:	e020      	b.n	8003a16 <libswd_error_string+0xda>
    case LIBSWD_ERROR_QUEUETAIL:    return "[LIBSWD_ERROR_QUEUETAIL] queue tail not found or null";
 80039d4:	4b30      	ldr	r3, [pc, #192]	; (8003a98 <libswd_error_string+0x15c>)
 80039d6:	e01e      	b.n	8003a16 <libswd_error_string+0xda>
    case LIBSWD_ERROR_BADCMDTYPE:   return "[LIBSWD_ERROR_BADCMDTYPE] unknown command detected";
 80039d8:	4b30      	ldr	r3, [pc, #192]	; (8003a9c <libswd_error_string+0x160>)
 80039da:	e01c      	b.n	8003a16 <libswd_error_string+0xda>
    case LIBSWD_ERROR_BADCMDDATA:   return "[LIBSWD_ERROR_BADCMDDATA] command contains bad data (out of range, etc)";
 80039dc:	4b30      	ldr	r3, [pc, #192]	; (8003aa0 <libswd_error_string+0x164>)
 80039de:	e01a      	b.n	8003a16 <libswd_error_string+0xda>
    case LIBSWD_ERROR_ACK_WAIT:     return "[LIBSWD_ERROR_ACK_WAIT] got ACK_WAIT response";
 80039e0:	4b30      	ldr	r3, [pc, #192]	; (8003aa4 <libswd_error_string+0x168>)
 80039e2:	e018      	b.n	8003a16 <libswd_error_string+0xda>
    case LIBSWD_ERROR_ACK_FAULT:    return "[LIBSWD_ERROR_ACK_FAULT] got ACK_FAULT response";
 80039e4:	4b30      	ldr	r3, [pc, #192]	; (8003aa8 <libswd_error_string+0x16c>)
 80039e6:	e016      	b.n	8003a16 <libswd_error_string+0xda>
    case LIBSWD_ERROR_QUEUENOTFREE: return "[LIBSWD_ERROR_QUEUENOTFREE] cannot free resources, queue not empty";
 80039e8:	4b30      	ldr	r3, [pc, #192]	; (8003aac <libswd_error_string+0x170>)
 80039ea:	e014      	b.n	8003a16 <libswd_error_string+0xda>
    case LIBSWD_ERROR_TRANSPORT:    return "[LIBSWD_ERROR_TRANSPORT] transport error or undefined";
 80039ec:	4b30      	ldr	r3, [pc, #192]	; (8003ab0 <libswd_error_string+0x174>)
 80039ee:	e012      	b.n	8003a16 <libswd_error_string+0xda>
    case LIBSWD_ERROR_DIRECTION:    return "[LIBSWD_ERROR_DIRECTION] MSb/LSb direction error";
 80039f0:	4b30      	ldr	r3, [pc, #192]	; (8003ab4 <libswd_error_string+0x178>)
 80039f2:	e010      	b.n	8003a16 <libswd_error_string+0xda>
    case LIBSWD_ERROR_LOGLEVEL:     return "[LIBSWD_ERROR_LOGLEVEL] invalid loglevel value";
 80039f4:	4b30      	ldr	r3, [pc, #192]	; (8003ab8 <libswd_error_string+0x17c>)
 80039f6:	e00e      	b.n	8003a16 <libswd_error_string+0xda>
    case LIBSWD_ERROR_UNHANDLED:    return "[LIBSWD_ERROR_UNHANDLED] cannot handle that error automatically";
 80039f8:	4b30      	ldr	r3, [pc, #192]	; (8003abc <libswd_error_string+0x180>)
 80039fa:	e00c      	b.n	8003a16 <libswd_error_string+0xda>
    case LIBSWD_ERROR_MAXRETRY:     return "[LIBSWD_ERROR_MAXRETRY] maximum retry count exceeded";
 80039fc:	4b30      	ldr	r3, [pc, #192]	; (8003ac0 <libswd_error_string+0x184>)
 80039fe:	e00a      	b.n	8003a16 <libswd_error_string+0xda>
    case LIBSWD_ERROR_CLISYNTAX:    return "[LIBSWD_ERROR_CLISYNTAX] CLI syntax error, see '?' for help";
 8003a00:	4b30      	ldr	r3, [pc, #192]	; (8003ac4 <libswd_error_string+0x188>)
 8003a02:	e008      	b.n	8003a16 <libswd_error_string+0xda>
    case LIBSWD_ERROR_FILE:         return "[LIBSWD_ERROR_FILE] file I/O related problem";
 8003a04:	4b30      	ldr	r3, [pc, #192]	; (8003ac8 <libswd_error_string+0x18c>)
 8003a06:	e006      	b.n	8003a16 <libswd_error_string+0xda>
    case LIBSWD_ERROR_UNSUPPORTED:  return "[LIBSWD_ERROR_UNSUPPORTED] Target not supported";
 8003a08:	4b30      	ldr	r3, [pc, #192]	; (8003acc <libswd_error_string+0x190>)
 8003a0a:	e004      	b.n	8003a16 <libswd_error_string+0xda>
    case LIBSWD_ERROR_MEMAPACCSIZE: return "[LIBSWD_ERROR_MEMAPACCSIZE] Invalid MEM-AP access size";
 8003a0c:	4b30      	ldr	r3, [pc, #192]	; (8003ad0 <libswd_error_string+0x194>)
 8003a0e:	e002      	b.n	8003a16 <libswd_error_string+0xda>
    case LIBSWD_ERROR_MEMAPALIGN:   return "[LIBSWD_ERROR_MEMAPALIGN] Invalid address alignment for access size";
 8003a10:	4b30      	ldr	r3, [pc, #192]	; (8003ad4 <libswd_error_string+0x198>)
 8003a12:	e000      	b.n	8003a16 <libswd_error_string+0xda>
    default:                        return "undefined error";
 8003a14:	4b30      	ldr	r3, [pc, #192]	; (8003ad8 <libswd_error_string+0x19c>)
    }
}
 8003a16:	0018      	movs	r0, r3
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	b002      	add	sp, #8
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	46c0      	nop			; (mov r8, r8)
 8003a20:	0800bf94 	.word	0x0800bf94
 8003a24:	0800a320 	.word	0x0800a320
 8003a28:	0800a344 	.word	0x0800a344
 8003a2c:	0800a36c 	.word	0x0800a36c
 8003a30:	0800a394 	.word	0x0800a394
 8003a34:	0800a3b8 	.word	0x0800a3b8
 8003a38:	0800a3e0 	.word	0x0800a3e0
 8003a3c:	0800a404 	.word	0x0800a404
 8003a40:	0800a42c 	.word	0x0800a42c
 8003a44:	0800a450 	.word	0x0800a450
 8003a48:	0800a474 	.word	0x0800a474
 8003a4c:	0800a4a0 	.word	0x0800a4a0
 8003a50:	0800a4c8 	.word	0x0800a4c8
 8003a54:	0800a4ec 	.word	0x0800a4ec
 8003a58:	0800a514 	.word	0x0800a514
 8003a5c:	0800a53c 	.word	0x0800a53c
 8003a60:	0800a560 	.word	0x0800a560
 8003a64:	0800a584 	.word	0x0800a584
 8003a68:	0800a5ac 	.word	0x0800a5ac
 8003a6c:	0800a5e0 	.word	0x0800a5e0
 8003a70:	0800a618 	.word	0x0800a618
 8003a74:	0800a654 	.word	0x0800a654
 8003a78:	0800a698 	.word	0x0800a698
 8003a7c:	0800a6d4 	.word	0x0800a6d4
 8003a80:	0800a710 	.word	0x0800a710
 8003a84:	0800a748 	.word	0x0800a748
 8003a88:	0800a778 	.word	0x0800a778
 8003a8c:	0800a7b8 	.word	0x0800a7b8
 8003a90:	0800a7ec 	.word	0x0800a7ec
 8003a94:	0800a820 	.word	0x0800a820
 8003a98:	0800a858 	.word	0x0800a858
 8003a9c:	0800a890 	.word	0x0800a890
 8003aa0:	0800a8c4 	.word	0x0800a8c4
 8003aa4:	0800a90c 	.word	0x0800a90c
 8003aa8:	0800a93c 	.word	0x0800a93c
 8003aac:	0800a96c 	.word	0x0800a96c
 8003ab0:	0800a9b0 	.word	0x0800a9b0
 8003ab4:	0800a9e8 	.word	0x0800a9e8
 8003ab8:	0800aa1c 	.word	0x0800aa1c
 8003abc:	0800aa4c 	.word	0x0800aa4c
 8003ac0:	0800aa8c 	.word	0x0800aa8c
 8003ac4:	0800aac4 	.word	0x0800aac4
 8003ac8:	0800ab00 	.word	0x0800ab00
 8003acc:	0800ab30 	.word	0x0800ab30
 8003ad0:	0800ab60 	.word	0x0800ab60
 8003ad4:	0800ab98 	.word	0x0800ab98
 8003ad8:	0800abdc 	.word	0x0800abdc

08003adc <libswd_error_handle>:


int libswd_error_handle(libswd_ctx_t *libswdctx){
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b086      	sub	sp, #24
 8003ae0:	af02      	add	r7, sp, #8
 8003ae2:	6078      	str	r0, [r7, #4]
    // libswdctx->cmdq should point to the last element executed that produced error.
    int retval;
    libswd_cmd_t *exectail;
    
    // Verify if libswdctx->cmdq contains last executed element, correct if necessary.
    exectail=libswd_cmdq_find_exectail(libswdctx->cmdq);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	0018      	movs	r0, r3
 8003aea:	f7fd fd49 	bl	8001580 <libswd_cmdq_find_exectail>
 8003aee:	0003      	movs	r3, r0
 8003af0:	60fb      	str	r3, [r7, #12]
    if (exectail==NULL) {
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d108      	bne.n	8003b0a <libswd_error_handle+0x2e>
        libswd_log(libswdctx, LIBSWD_LOGLEVEL_ERROR, "LIBSWD_E: libswd_error_handle(libswdctx=@%p): Cannot find last executed element on the queue!\n", (void*)libswdctx);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	4a1c      	ldr	r2, [pc, #112]	; (8003b6c <libswd_error_handle+0x90>)
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	2102      	movs	r1, #2
 8003b00:	f000 fc74 	bl	80043ec <libswd_log>
        return LIBSWD_ERROR_QUEUE;
 8003b04:	230b      	movs	r3, #11
 8003b06:	425b      	negs	r3, r3
 8003b08:	e02c      	b.n	8003b64 <libswd_error_handle+0x88>
    }
    if (exectail!=libswdctx->cmdq){
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	68fa      	ldr	r2, [r7, #12]
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d008      	beq.n	8003b26 <libswd_error_handle+0x4a>
        libswd_log(libswdctx, LIBSWD_LOGLEVEL_INFO, "LIBSWD_I: libswd_error_handle(libswdctx=@%p): Correcting libswdctx->cmdq to match last executed element...\n", (void*)libswdctx);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	4a16      	ldr	r2, [pc, #88]	; (8003b70 <libswd_error_handle+0x94>)
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	2104      	movs	r1, #4
 8003b1c:	f000 fc66 	bl	80043ec <libswd_log>
        libswdctx->cmdq=exectail;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	68fa      	ldr	r2, [r7, #12]
 8003b24:	601a      	str	r2, [r3, #0]
    }
    
    switch (libswdctx->cmdq->cmdtype){
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	7a5b      	ldrb	r3, [r3, #9]
 8003b2c:	b25b      	sxtb	r3, r3
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d10a      	bne.n	8003b48 <libswd_error_handle+0x6c>
    case LIBSWD_CMDTYPE_MISO_ACK:
        retval=libswd_error_handle_ack(libswdctx);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	0018      	movs	r0, r3
 8003b36:	f000 f81f 	bl	8003b78 <libswd_error_handle_ack>
 8003b3a:	0003      	movs	r3, r0
 8003b3c:	60bb      	str	r3, [r7, #8]
        break;
 8003b3e:	46c0      	nop			; (mov r8, r8)
    default:
        return LIBSWD_ERROR_UNHANDLED;
    }
    
    if (retval<0){
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	da0d      	bge.n	8003b62 <libswd_error_handle+0x86>
 8003b46:	e002      	b.n	8003b4e <libswd_error_handle+0x72>
        return LIBSWD_ERROR_UNHANDLED;
 8003b48:	232a      	movs	r3, #42	; 0x2a
 8003b4a:	425b      	negs	r3, r3
 8003b4c:	e00a      	b.n	8003b64 <libswd_error_handle+0x88>
        libswd_log(libswdctx, LIBSWD_LOGLEVEL_WARNING, "LIBSWD_W: libswd_error_handle(@%p) failed! on cmdq=@%p", (void*)libswdctx, (void*)libswdctx->cmdq);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	6879      	ldr	r1, [r7, #4]
 8003b54:	4a07      	ldr	r2, [pc, #28]	; (8003b74 <libswd_error_handle+0x98>)
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	9300      	str	r3, [sp, #0]
 8003b5a:	000b      	movs	r3, r1
 8003b5c:	2103      	movs	r1, #3
 8003b5e:	f000 fc45 	bl	80043ec <libswd_log>
    }
    return retval;
 8003b62:	68bb      	ldr	r3, [r7, #8]
}
 8003b64:	0018      	movs	r0, r3
 8003b66:	46bd      	mov	sp, r7
 8003b68:	b004      	add	sp, #16
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	0800abec 	.word	0x0800abec
 8003b70:	0800ac4c 	.word	0x0800ac4c
 8003b74:	0800acb8 	.word	0x0800acb8

08003b78 <libswd_error_handle_ack>:

int libswd_error_handle_ack(libswd_ctx_t *libswdctx){
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
    if (libswdctx==NULL) return LIBSWD_ERROR_NULLCONTEXT;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d102      	bne.n	8003b8c <libswd_error_handle_ack+0x14>
 8003b86:	230a      	movs	r3, #10
 8003b88:	425b      	negs	r3, r3
 8003b8a:	e02c      	b.n	8003be6 <libswd_error_handle_ack+0x6e>
    // Make sure we are working on the ACK cmdq element.
    if (libswdctx->cmdq->cmdtype!=LIBSWD_CMDTYPE_MISO_ACK){
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	7a5b      	ldrb	r3, [r3, #9]
 8003b92:	b25b      	sxtb	r3, r3
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d008      	beq.n	8003baa <libswd_error_handle_ack+0x32>
        libswd_log(libswdctx, LIBSWD_LOGLEVEL_ERROR, "LIBSWD_E: libswd_error_handle_ack(@%p):libswdctx->cmdq does not point to ACK!", (void*)libswdctx);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	4a15      	ldr	r2, [pc, #84]	; (8003bf0 <libswd_error_handle_ack+0x78>)
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	2102      	movs	r1, #2
 8003ba0:	f000 fc24 	bl	80043ec <libswd_log>
        return LIBSWD_ERROR_UNHANDLED; //do we want to handle this kind of error here?
 8003ba4:	232a      	movs	r3, #42	; 0x2a
 8003ba6:	425b      	negs	r3, r3
 8003ba8:	e01d      	b.n	8003be6 <libswd_error_handle_ack+0x6e>
    }
    
    switch (libswdctx->cmdq->ack) {
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	2b04      	cmp	r3, #4
 8003bb2:	d013      	beq.n	8003bdc <libswd_error_handle_ack+0x64>
 8003bb4:	dc15      	bgt.n	8003be2 <libswd_error_handle_ack+0x6a>
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d002      	beq.n	8003bc0 <libswd_error_handle_ack+0x48>
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d008      	beq.n	8003bd0 <libswd_error_handle_ack+0x58>
 8003bbe:	e010      	b.n	8003be2 <libswd_error_handle_ack+0x6a>
    case LIBSWD_ACK_OK_VAL:
        // Uhm, there was no error.
        // Should we return OK or search for next ACK recursively?
        libswd_log(libswdctx, LIBSWD_LOGLEVEL_WARNING, "LIBSWD_W: libswd_error_handle_ack(libswdctx=@%p): ACK=OK, handling wrong element?\n", (void*)libswdctx);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a0c      	ldr	r2, [pc, #48]	; (8003bf4 <libswd_error_handle_ack+0x7c>)
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	2103      	movs	r1, #3
 8003bc8:	f000 fc10 	bl	80043ec <libswd_log>
        return LIBSWD_OK;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	e00a      	b.n	8003be6 <libswd_error_handle_ack+0x6e>
    case LIBSWD_ACK_WAIT_VAL:
        return libswd_error_handle_ack_wait(libswdctx);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	0018      	movs	r0, r3
 8003bd4:	f000 f810 	bl	8003bf8 <libswd_error_handle_ack_wait>
 8003bd8:	0003      	movs	r3, r0
 8003bda:	e004      	b.n	8003be6 <libswd_error_handle_ack+0x6e>
    case LIBSWD_ACK_FAULT_VAL:
        // TODO: Handle ACK=FAULT accordingly.
        return LIBSWD_ERROR_UNHANDLED;
 8003bdc:	232a      	movs	r3, #42	; 0x2a
 8003bde:	425b      	negs	r3, r3
 8003be0:	e001      	b.n	8003be6 <libswd_error_handle_ack+0x6e>
    default:
        // TODO: By default we assume lost synchronization, handle accordingly.
        return LIBSWD_ERROR_UNHANDLED;
 8003be2:	232a      	movs	r3, #42	; 0x2a
 8003be4:	425b      	negs	r3, r3
    }
}
 8003be6:	0018      	movs	r0, r3
 8003be8:	46bd      	mov	sp, r7
 8003bea:	b002      	add	sp, #8
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	46c0      	nop			; (mov r8, r8)
 8003bf0:	0800acf0 	.word	0x0800acf0
 8003bf4:	0800ad40 	.word	0x0800ad40

08003bf8 <libswd_error_handle_ack_wait>:

int libswd_error_handle_ack_wait(libswd_ctx_t *libswdctx){
 8003bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bfa:	4cce      	ldr	r4, [pc, #824]	; (8003f34 <libswd_error_handle_ack_wait+0x33c>)
 8003bfc:	44a5      	add	sp, r4
 8003bfe:	af02      	add	r7, sp, #8
 8003c00:	6078      	str	r0, [r7, #4]
    if (libswdctx==NULL) return LIBSWD_ERROR_NULLCONTEXT;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d102      	bne.n	8003c0e <libswd_error_handle_ack_wait+0x16>
 8003c08:	230a      	movs	r3, #10
 8003c0a:	425b      	negs	r3, r3
 8003c0c:	e1ce      	b.n	8003fac <libswd_error_handle_ack_wait+0x3b4>
    // Make sure we are working on the ACK cmdq element.
    if (libswdctx->cmdq->cmdtype!=LIBSWD_CMDTYPE_MISO_ACK){
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	7a5b      	ldrb	r3, [r3, #9]
 8003c14:	b25b      	sxtb	r3, r3
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d008      	beq.n	8003c2c <libswd_error_handle_ack_wait+0x34>
        libswd_log(libswdctx, LIBSWD_LOGLEVEL_WARNING, "LIBSWD_W: libswd_error_handle_ack_wait(libswdctx=@%p):libswdctx->cmdq does not point to ACK!", (void*)libswdctx);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4ac6      	ldr	r2, [pc, #792]	; (8003f38 <libswd_error_handle_ack_wait+0x340>)
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	2103      	movs	r1, #3
 8003c22:	f000 fbe3 	bl	80043ec <libswd_log>
        return LIBSWD_ERROR_UNHANDLED; //do we want to handle this kind of error here?
 8003c26:	232a      	movs	r3, #42	; 0x2a
 8003c28:	425b      	negs	r3, r3
 8003c2a:	e1bf      	b.n	8003fac <libswd_error_handle_ack_wait+0x3b4>
    }
    // Make sure the ACK contains WAIT response.
    if (libswdctx->cmdq->ack!=LIBSWD_ACK_WAIT_VAL){
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d008      	beq.n	8003c48 <libswd_error_handle_ack_wait+0x50>
        libswd_log(libswdctx, LIBSWD_LOGLEVEL_WARNING, "LIBSWD_W: libswd_error_handle_ack_wait(libswdctx=@%p):libswdctx->cmdq->ack does not contain WAIT response!", (void*)libswdctx);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4ac0      	ldr	r2, [pc, #768]	; (8003f3c <libswd_error_handle_ack_wait+0x344>)
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	2103      	movs	r1, #3
 8003c3e:	f000 fbd5 	bl	80043ec <libswd_log>
        return LIBSWD_ERROR_ACKMISMATCH;
 8003c42:	2316      	movs	r3, #22
 8003c44:	425b      	negs	r3, r3
 8003c46:	e1b1      	b.n	8003fac <libswd_error_handle_ack_wait+0x3b4>
    
    //TODO: NOW DECIDE IF AN OPERATION WAS READ OR WRITE AND PERFORM RETRY ACCORDINGLY
    // READ AND WRITE WILL HAVE DIFFERENT RETRY SEQUENCES
    
    char request; 
    if (libswdctx->cmdq->prev3 != NULL && libswdctx->cmdq->prev3->prev3 != NULL)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d035      	beq.n	8003cbe <libswd_error_handle_ack_wait+0xc6>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d02f      	beq.n	8003cbe <libswd_error_handle_ack_wait+0xc6>
    {
        request = libswdctx->cmdq->prev3->prev3->request;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	68da      	ldr	r2, [r3, #12]
 8003c66:	4bb6      	ldr	r3, [pc, #728]	; (8003f40 <libswd_error_handle_ack_wait+0x348>)
 8003c68:	18fb      	adds	r3, r7, r3
 8003c6a:	7812      	ldrb	r2, [r2, #0]
 8003c6c:	701a      	strb	r2, [r3, #0]
    else
    {
        return LIBSWD_ERROR_RECYCLED;
    }
    char ack, rparity;
    char parity=0;
 8003c6e:	4bb5      	ldr	r3, [pc, #724]	; (8003f44 <libswd_error_handle_ack_wait+0x34c>)
 8003c70:	18fb      	adds	r3, r7, r3
 8003c72:	2200      	movs	r2, #0
 8003c74:	701a      	strb	r2, [r3, #0]
    
    // Remember original cmdq, restore on return.
    libswd_cmd_t *mastercmdq = libswdctx->cmdq;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	229e      	movs	r2, #158	; 0x9e
 8003c7c:	0092      	lsls	r2, r2, #2
 8003c7e:	18ba      	adds	r2, r7, r2
 8003c80:	6013      	str	r3, [r2, #0]
    
    // Append dummy data phase, fix sticky flags and retry operation.
    int retval=0, ctrlstat, rdata, abort, retrycnt=50, data=0;
 8003c82:	2300      	movs	r3, #0
 8003c84:	24a1      	movs	r4, #161	; 0xa1
 8003c86:	00a4      	lsls	r4, r4, #2
 8003c88:	193a      	adds	r2, r7, r4
 8003c8a:	6013      	str	r3, [r2, #0]
 8003c8c:	2332      	movs	r3, #50	; 0x32
 8003c8e:	22a0      	movs	r2, #160	; 0xa0
 8003c90:	0092      	lsls	r2, r2, #2
 8003c92:	18ba      	adds	r2, r7, r2
 8003c94:	6013      	str	r3, [r2, #0]
 8003c96:	2300      	movs	r3, #0
 8003c98:	229d      	movs	r2, #157	; 0x9d
 8003c9a:	0092      	lsls	r2, r2, #2
 8003c9c:	18ba      	adds	r2, r7, r2
 8003c9e:	6013      	str	r3, [r2, #0]
    
    libswd_cmd_t error_queue[LIBSWD_ERROR_QUEUE_SIZE];
    retval = libswd_cmdq_init_error(error_queue, LIBSWD_ERROR_QUEUE_SIZE);
 8003ca0:	230c      	movs	r3, #12
 8003ca2:	18fb      	adds	r3, r7, r3
 8003ca4:	211e      	movs	r1, #30
 8003ca6:	0018      	movs	r0, r3
 8003ca8:	f7fd fc1a 	bl	80014e0 <libswd_cmdq_init_error>
 8003cac:	0003      	movs	r3, r0
 8003cae:	193a      	adds	r2, r7, r4
 8003cb0:	6013      	str	r3, [r2, #0]
    if (retval < 0) 
 8003cb2:	193b      	adds	r3, r7, r4
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	da00      	bge.n	8003cbc <libswd_error_handle_ack_wait+0xc4>
 8003cba:	e12d      	b.n	8003f18 <libswd_error_handle_ack_wait+0x320>
 8003cbc:	e002      	b.n	8003cc4 <libswd_error_handle_ack_wait+0xcc>
        return LIBSWD_ERROR_RECYCLED;
 8003cbe:	2332      	movs	r3, #50	; 0x32
 8003cc0:	425b      	negs	r3, r3
 8003cc2:	e173      	b.n	8003fac <libswd_error_handle_ack_wait+0x3b4>
    {
        goto libswd_error_handle_ack_wait_end;
    }
    // From now, this becomes out main cmdq for use with standard functions.
    libswdctx->cmdq=error_queue; 
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	220c      	movs	r2, #12
 8003cc8:	18ba      	adds	r2, r7, r2
 8003cca:	601a      	str	r2, [r3, #0]
    libswd_log(libswdctx, LIBSWD_LOGLEVEL_DEBUG, "LIBSWD_D: libswd_error_handle_ack_wait(libswdctx=@%p): Performing data phase after ACK={WAIT,FAULT}...\n", (void*)libswdctx);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	4a9e      	ldr	r2, [pc, #632]	; (8003f48 <libswd_error_handle_ack_wait+0x350>)
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	2105      	movs	r1, #5
 8003cd4:	f000 fb8a 	bl	80043ec <libswd_log>
    data = 0;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	229d      	movs	r2, #157	; 0x9d
 8003cdc:	0092      	lsls	r2, r2, #2
 8003cde:	18b9      	adds	r1, r7, r2
 8003ce0:	600b      	str	r3, [r1, #0]
    retval=libswd_bus_write_data_p(libswdctx, LIBSWD_OPERATION_EXECUTE, data, parity);
 8003ce2:	4b98      	ldr	r3, [pc, #608]	; (8003f44 <libswd_error_handle_ack_wait+0x34c>)
 8003ce4:	18fb      	adds	r3, r7, r3
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	18ba      	adds	r2, r7, r2
 8003cea:	6812      	ldr	r2, [r2, #0]
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	2102      	movs	r1, #2
 8003cf0:	f7fc ff7a 	bl	8000be8 <libswd_bus_write_data_p>
 8003cf4:	0003      	movs	r3, r0
 8003cf6:	22a1      	movs	r2, #161	; 0xa1
 8003cf8:	0092      	lsls	r2, r2, #2
 8003cfa:	18b9      	adds	r1, r7, r2
 8003cfc:	600b      	str	r3, [r1, #0]
    if (retval<0) goto libswd_error_handle_ack_wait_end;
 8003cfe:	18bb      	adds	r3, r7, r2
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	da00      	bge.n	8003d08 <libswd_error_handle_ack_wait+0x110>
 8003d06:	e109      	b.n	8003f1c <libswd_error_handle_ack_wait+0x324>
    // 1. READ STICKY FLAGS FROM CTRL/STAT
    // 2. CLEAR STICKY FLAGS IN ABORT - this will discard AP transaction
    // 3. RETRY MEM-AP DRW READ - now it must be ACK=OK (it will return last mem-ap read result).
    // 4. READ DP RDBUFF TO OBTAIN READ DATA
    
    for (retrycnt=50/*LIBSWD_RETRY_COUNT_DEFAULT*/; retrycnt>0; retrycnt--){
 8003d08:	2332      	movs	r3, #50	; 0x32
 8003d0a:	22a0      	movs	r2, #160	; 0xa0
 8003d0c:	0092      	lsls	r2, r2, #2
 8003d0e:	18ba      	adds	r2, r7, r2
 8003d10:	6013      	str	r3, [r2, #0]
 8003d12:	e083      	b.n	8003e1c <libswd_error_handle_ack_wait+0x224>
        retval=libswd_dp_read(libswdctx, LIBSWD_OPERATION_EXECUTE, LIBSWD_DP_CTRLSTAT_ADDR, &ctrlstat);
 8003d14:	259a      	movs	r5, #154	; 0x9a
 8003d16:	00ad      	lsls	r5, r5, #2
 8003d18:	197b      	adds	r3, r7, r5
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	2204      	movs	r2, #4
 8003d1e:	2102      	movs	r1, #2
 8003d20:	f7fe fae0 	bl	80022e4 <libswd_dp_read>
 8003d24:	0003      	movs	r3, r0
 8003d26:	24a1      	movs	r4, #161	; 0xa1
 8003d28:	00a4      	lsls	r4, r4, #2
 8003d2a:	193a      	adds	r2, r7, r4
 8003d2c:	6013      	str	r3, [r2, #0]
        if (retval<0) goto libswd_error_handle_ack_wait_end;
 8003d2e:	193b      	adds	r3, r7, r4
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	da00      	bge.n	8003d38 <libswd_error_handle_ack_wait+0x140>
 8003d36:	e0f3      	b.n	8003f20 <libswd_error_handle_ack_wait+0x328>
        abort=0x00000014;
 8003d38:	2314      	movs	r3, #20
 8003d3a:	229c      	movs	r2, #156	; 0x9c
 8003d3c:	0092      	lsls	r2, r2, #2
 8003d3e:	18b9      	adds	r1, r7, r2
 8003d40:	600b      	str	r3, [r1, #0]
        retval=libswd_dp_write(libswdctx, LIBSWD_OPERATION_EXECUTE, LIBSWD_DP_ABORT_ADDR, abort);
 8003d42:	18bb      	adds	r3, r7, r2
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	2102      	movs	r1, #2
 8003d4c:	f7fe fc5c 	bl	8002608 <libswd_dp_write>
 8003d50:	0003      	movs	r3, r0
 8003d52:	193a      	adds	r2, r7, r4
 8003d54:	6013      	str	r3, [r2, #0]
        if (retval<0) goto libswd_error_handle_ack_wait_end;
 8003d56:	193b      	adds	r3, r7, r4
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	da00      	bge.n	8003d60 <libswd_error_handle_ack_wait+0x168>
 8003d5e:	e0e1      	b.n	8003f24 <libswd_error_handle_ack_wait+0x32c>
        retval=libswd_bus_write_request_raw(libswdctx, LIBSWD_OPERATION_ENQUEUE, request);
 8003d60:	4b77      	ldr	r3, [pc, #476]	; (8003f40 <libswd_error_handle_ack_wait+0x348>)
 8003d62:	18fb      	adds	r3, r7, r3
 8003d64:	781a      	ldrb	r2, [r3, #0]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2101      	movs	r1, #1
 8003d6a:	0018      	movs	r0, r3
 8003d6c:	f7fc fd86 	bl	800087c <libswd_bus_write_request_raw>
 8003d70:	0003      	movs	r3, r0
 8003d72:	193a      	adds	r2, r7, r4
 8003d74:	6013      	str	r3, [r2, #0]
        retval=libswd_bus_read_ack(libswdctx, LIBSWD_OPERATION_EXECUTE, &ack);
 8003d76:	4e75      	ldr	r6, [pc, #468]	; (8003f4c <libswd_error_handle_ack_wait+0x354>)
 8003d78:	19ba      	adds	r2, r7, r6
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2102      	movs	r1, #2
 8003d7e:	0018      	movs	r0, r3
 8003d80:	f7fc fe7b 	bl	8000a7a <libswd_bus_read_ack>
 8003d84:	0003      	movs	r3, r0
 8003d86:	193a      	adds	r2, r7, r4
 8003d88:	6013      	str	r3, [r2, #0]
        if (retval<0 || ack!=LIBSWD_ACK_OK_VAL) goto libswd_error_handle_ack_wait_end;
 8003d8a:	193b      	adds	r3, r7, r4
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	da00      	bge.n	8003d94 <libswd_error_handle_ack_wait+0x19c>
 8003d92:	e0c9      	b.n	8003f28 <libswd_error_handle_ack_wait+0x330>
 8003d94:	19bb      	adds	r3, r7, r6
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d000      	beq.n	8003d9e <libswd_error_handle_ack_wait+0x1a6>
 8003d9c:	e0c4      	b.n	8003f28 <libswd_error_handle_ack_wait+0x330>
        retval=libswd_bus_read_data_p(libswdctx, LIBSWD_OPERATION_EXECUTE, &rdata, &rparity);
 8003d9e:	4b6c      	ldr	r3, [pc, #432]	; (8003f50 <libswd_error_handle_ack_wait+0x358>)
 8003da0:	18fb      	adds	r3, r7, r3
 8003da2:	2699      	movs	r6, #153	; 0x99
 8003da4:	00b6      	lsls	r6, r6, #2
 8003da6:	19ba      	adds	r2, r7, r6
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	2102      	movs	r1, #2
 8003dac:	f7fc ffe6 	bl	8000d7c <libswd_bus_read_data_p>
 8003db0:	0003      	movs	r3, r0
 8003db2:	193a      	adds	r2, r7, r4
 8003db4:	6013      	str	r3, [r2, #0]
        if (retval<0) goto libswd_error_handle_ack_wait_end;
 8003db6:	193b      	adds	r3, r7, r4
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	da00      	bge.n	8003dc0 <libswd_error_handle_ack_wait+0x1c8>
 8003dbe:	e0b5      	b.n	8003f2c <libswd_error_handle_ack_wait+0x334>
        
        retval=libswd_dp_read(libswdctx, LIBSWD_OPERATION_EXECUTE, LIBSWD_DP_CTRLSTAT_ADDR, &ctrlstat);
 8003dc0:	197b      	adds	r3, r7, r5
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	2204      	movs	r2, #4
 8003dc6:	2102      	movs	r1, #2
 8003dc8:	f7fe fa8c 	bl	80022e4 <libswd_dp_read>
 8003dcc:	0003      	movs	r3, r0
 8003dce:	193a      	adds	r2, r7, r4
 8003dd0:	6013      	str	r3, [r2, #0]
        if (retval<0) goto libswd_error_handle_ack_wait_end;
 8003dd2:	193b      	adds	r3, r7, r4
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	da00      	bge.n	8003ddc <libswd_error_handle_ack_wait+0x1e4>
 8003dda:	e0a9      	b.n	8003f30 <libswd_error_handle_ack_wait+0x338>
        
        
        if (ctrlstat&LIBSWD_DP_CTRLSTAT_READOK){
 8003ddc:	197b      	adds	r3, r7, r5
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2240      	movs	r2, #64	; 0x40
 8003de2:	4013      	ands	r3, r2
 8003de4:	d013      	beq.n	8003e0e <libswd_error_handle_ack_wait+0x216>
            libswd_log(libswdctx, LIBSWD_LOGLEVEL_DEBUG, "=========================GOT RESPONSE===========================\n\n\n");
 8003de6:	4a5b      	ldr	r2, [pc, #364]	; (8003f54 <libswd_error_handle_ack_wait+0x35c>)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2105      	movs	r1, #5
 8003dec:	0018      	movs	r0, r3
 8003dee:	f000 fafd 	bl	80043ec <libswd_log>
            retval=libswd_dp_read(libswdctx, LIBSWD_OPERATION_EXECUTE, LIBSWD_DP_RDBUFF_ADDR, &rdata);
 8003df2:	19bb      	adds	r3, r7, r6
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	220c      	movs	r2, #12
 8003df8:	2102      	movs	r1, #2
 8003dfa:	f7fe fa73 	bl	80022e4 <libswd_dp_read>
 8003dfe:	0003      	movs	r3, r0
 8003e00:	193a      	adds	r2, r7, r4
 8003e02:	6013      	str	r3, [r2, #0]
            if (retval<0) goto libswd_error_handle_ack_wait_end;
 8003e04:	193b      	adds	r3, r7, r4
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	da0f      	bge.n	8003e2c <libswd_error_handle_ack_wait+0x234>
 8003e0c:	e0a7      	b.n	8003f5e <libswd_error_handle_ack_wait+0x366>
    for (retrycnt=50/*LIBSWD_RETRY_COUNT_DEFAULT*/; retrycnt>0; retrycnt--){
 8003e0e:	22a0      	movs	r2, #160	; 0xa0
 8003e10:	0092      	lsls	r2, r2, #2
 8003e12:	18bb      	adds	r3, r7, r2
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	3b01      	subs	r3, #1
 8003e18:	18ba      	adds	r2, r7, r2
 8003e1a:	6013      	str	r3, [r2, #0]
 8003e1c:	23a0      	movs	r3, #160	; 0xa0
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	18fb      	adds	r3, r7, r3
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	dd00      	ble.n	8003e2a <libswd_error_handle_ack_wait+0x232>
 8003e28:	e774      	b.n	8003d14 <libswd_error_handle_ack_wait+0x11c>
 8003e2a:	e000      	b.n	8003e2e <libswd_error_handle_ack_wait+0x236>
            break;
 8003e2c:	46c0      	nop			; (mov r8, r8)
        }
    }
    if (retrycnt==0){
 8003e2e:	23a0      	movs	r3, #160	; 0xa0
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	18fb      	adds	r3, r7, r3
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d106      	bne.n	8003e48 <libswd_error_handle_ack_wait+0x250>
        retval=LIBSWD_ERROR_MAXRETRY;
 8003e3a:	232b      	movs	r3, #43	; 0x2b
 8003e3c:	425b      	negs	r3, r3
 8003e3e:	22a1      	movs	r2, #161	; 0xa1
 8003e40:	0092      	lsls	r2, r2, #2
 8003e42:	18ba      	adds	r2, r7, r2
 8003e44:	6013      	str	r3, [r2, #0]
        goto libswd_error_handle_ack_wait_end;
 8003e46:	e08a      	b.n	8003f5e <libswd_error_handle_ack_wait+0x366>
    }
    
    //Make sure we have RDATA and PARITY elements after libswdctx->cmdq.
    //Should we check for this at the procedure start???
    libswdctx->cmdq=mastercmdq;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	229e      	movs	r2, #158	; 0x9e
 8003e4c:	0092      	lsls	r2, r2, #2
 8003e4e:	18ba      	adds	r2, r7, r2
 8003e50:	6812      	ldr	r2, [r2, #0]
 8003e52:	601a      	str	r2, [r3, #0]
    retval = libswd_cmdq_free_error_queue();
 8003e54:	f7fd fc90 	bl	8001778 <libswd_cmdq_free_error_queue>
 8003e58:	0003      	movs	r3, r0
 8003e5a:	22a1      	movs	r2, #161	; 0xa1
 8003e5c:	0092      	lsls	r2, r2, #2
 8003e5e:	18b9      	adds	r1, r7, r2
 8003e60:	600b      	str	r3, [r1, #0]
    if (retval<0) 
 8003e62:	18bb      	adds	r3, r7, r2
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	da00      	bge.n	8003e6c <libswd_error_handle_ack_wait+0x274>
 8003e6a:	e077      	b.n	8003f5c <libswd_error_handle_ack_wait+0x364>
    {
        goto libswd_error_handle_ack_wait_end;
    }
    if (libswdctx->cmdq->cmdtype==LIBSWD_CMDTYPE_MISO_ACK && libswdctx->cmdq->next3->cmdtype==LIBSWD_CMDTYPE_MISO_DATA && libswdctx->cmdq->next3->next3->cmdtype==LIBSWD_CMDTYPE_MISO_PARITY){
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	7a5b      	ldrb	r3, [r3, #9]
 8003e72:	b25b      	sxtb	r3, r3
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d148      	bne.n	8003f0a <libswd_error_handle_ack_wait+0x312>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	691b      	ldr	r3, [r3, #16]
 8003e7e:	7a5b      	ldrb	r3, [r3, #9]
 8003e80:	b25b      	sxtb	r3, r3
 8003e82:	2b06      	cmp	r3, #6
 8003e84:	d141      	bne.n	8003f0a <libswd_error_handle_ack_wait+0x312>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	691b      	ldr	r3, [r3, #16]
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	7a5b      	ldrb	r3, [r3, #9]
 8003e90:	b25b      	sxtb	r3, r3
 8003e92:	2b04      	cmp	r3, #4
 8003e94:	d139      	bne.n	8003f0a <libswd_error_handle_ack_wait+0x312>
        libswdctx->cmdq->ack=LIBSWD_ACK_OK_VAL;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	701a      	strb	r2, [r3, #0]
        *libswdctx->cmdq->ack_p = libswdctx->cmdq->ack;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	7812      	ldrb	r2, [r2, #0]
 8003eaa:	701a      	strb	r2, [r3, #0]
        libswdctx->cmdq=libswdctx->cmdq->next3;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	691a      	ldr	r2, [r3, #16]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	601a      	str	r2, [r3, #0]
        libswdctx->cmdq->misodata=rdata;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2299      	movs	r2, #153	; 0x99
 8003ebc:	0092      	lsls	r2, r2, #2
 8003ebe:	18ba      	adds	r2, r7, r2
 8003ec0:	6812      	ldr	r2, [r2, #0]
 8003ec2:	601a      	str	r2, [r3, #0]
        *libswdctx->cmdq->misodata_p=libswdctx->cmdq->misodata;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	6812      	ldr	r2, [r2, #0]
 8003ed0:	601a      	str	r2, [r3, #0]
        libswdctx->cmdq->done=1;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	729a      	strb	r2, [r3, #10]
        libswdctx->cmdq=libswdctx->cmdq->next3;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	691a      	ldr	r2, [r3, #16]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	601a      	str	r2, [r3, #0]
        //libswd_bin8_parity_even(rdata, &parity);
        libswdctx->cmdq->misoparity=rparity;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a19      	ldr	r2, [pc, #100]	; (8003f50 <libswd_error_handle_ack_wait+0x358>)
 8003eea:	18ba      	adds	r2, r7, r2
 8003eec:	7812      	ldrb	r2, [r2, #0]
 8003eee:	701a      	strb	r2, [r3, #0]
        *libswdctx->cmdq->misoparity_p=libswdctx->cmdq->misoparity;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	7812      	ldrb	r2, [r2, #0]
 8003efc:	701a      	strb	r2, [r3, #0]
        libswdctx->cmdq->done=1;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2201      	movs	r2, #1
 8003f04:	729a      	strb	r2, [r3, #10]
        return LIBSWD_OK;
 8003f06:	2300      	movs	r3, #0
 8003f08:	e050      	b.n	8003fac <libswd_error_handle_ack_wait+0x3b4>
    } else libswd_log(libswdctx, LIBSWD_LOGLEVEL_ERROR, "LIBSWD_E: UNSUPPORTED COMMAND SEQUENCE ON CMDQ (NOT ACK->RDATA->PARITY)\n");
 8003f0a:	4a13      	ldr	r2, [pc, #76]	; (8003f58 <libswd_error_handle_ack_wait+0x360>)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2102      	movs	r1, #2
 8003f10:	0018      	movs	r0, r3
 8003f12:	f000 fa6b 	bl	80043ec <libswd_log>
 8003f16:	e022      	b.n	8003f5e <libswd_error_handle_ack_wait+0x366>
        goto libswd_error_handle_ack_wait_end;
 8003f18:	46c0      	nop			; (mov r8, r8)
 8003f1a:	e020      	b.n	8003f5e <libswd_error_handle_ack_wait+0x366>
    if (retval<0) goto libswd_error_handle_ack_wait_end;
 8003f1c:	46c0      	nop			; (mov r8, r8)
 8003f1e:	e01e      	b.n	8003f5e <libswd_error_handle_ack_wait+0x366>
        if (retval<0) goto libswd_error_handle_ack_wait_end;
 8003f20:	46c0      	nop			; (mov r8, r8)
 8003f22:	e01c      	b.n	8003f5e <libswd_error_handle_ack_wait+0x366>
        if (retval<0) goto libswd_error_handle_ack_wait_end;
 8003f24:	46c0      	nop			; (mov r8, r8)
 8003f26:	e01a      	b.n	8003f5e <libswd_error_handle_ack_wait+0x366>
        if (retval<0 || ack!=LIBSWD_ACK_OK_VAL) goto libswd_error_handle_ack_wait_end;
 8003f28:	46c0      	nop			; (mov r8, r8)
 8003f2a:	e018      	b.n	8003f5e <libswd_error_handle_ack_wait+0x366>
        if (retval<0) goto libswd_error_handle_ack_wait_end;
 8003f2c:	46c0      	nop			; (mov r8, r8)
 8003f2e:	e016      	b.n	8003f5e <libswd_error_handle_ack_wait+0x366>
        if (retval<0) goto libswd_error_handle_ack_wait_end;
 8003f30:	46c0      	nop			; (mov r8, r8)
 8003f32:	e014      	b.n	8003f5e <libswd_error_handle_ack_wait+0x366>
 8003f34:	fffffd6c 	.word	0xfffffd6c
 8003f38:	0800ad94 	.word	0x0800ad94
 8003f3c:	0800adf4 	.word	0x0800adf4
 8003f40:	0000027f 	.word	0x0000027f
 8003f44:	0000027e 	.word	0x0000027e
 8003f48:	0800ae60 	.word	0x0800ae60
 8003f4c:	0000026f 	.word	0x0000026f
 8003f50:	0000026e 	.word	0x0000026e
 8003f54:	0800aec8 	.word	0x0800aec8
 8003f58:	0800af0c 	.word	0x0800af0c
        goto libswd_error_handle_ack_wait_end;
 8003f5c:	46c0      	nop			; (mov r8, r8)
    // At this point we should have the read result from RDBUFF ready for MEM-AP read fix.
    
    
libswd_error_handle_ack_wait_end:
    // Exit ACK WAIT handling routine, verify retval before return.
    if (retval<0||retrycnt==0){
 8003f5e:	23a1      	movs	r3, #161	; 0xa1
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	18fb      	adds	r3, r7, r3
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	db05      	blt.n	8003f76 <libswd_error_handle_ack_wait+0x37e>
 8003f6a:	23a0      	movs	r3, #160	; 0xa0
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	18fb      	adds	r3, r7, r3
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d10f      	bne.n	8003f96 <libswd_error_handle_ack_wait+0x39e>
        libswd_log(libswdctx, LIBSWD_LOGLEVEL_ERROR, "LIBSWD_E: libswd_error_handle_ack_wait(libswdctx=@%p) ejecting: %s\n", (void*)libswdctx, libswd_error_string((libswd_error_code_t)retval));
 8003f76:	23a1      	movs	r3, #161	; 0xa1
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	18fb      	adds	r3, r7, r3
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	b25b      	sxtb	r3, r3
 8003f80:	0018      	movs	r0, r3
 8003f82:	f7ff fcdb 	bl	800393c <libswd_error_string>
 8003f86:	0001      	movs	r1, r0
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4a0b      	ldr	r2, [pc, #44]	; (8003fb8 <libswd_error_handle_ack_wait+0x3c0>)
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	9100      	str	r1, [sp, #0]
 8003f90:	2102      	movs	r1, #2
 8003f92:	f000 fa2b 	bl	80043ec <libswd_log>
    }
    
    libswdctx->cmdq=mastercmdq;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	229e      	movs	r2, #158	; 0x9e
 8003f9a:	0092      	lsls	r2, r2, #2
 8003f9c:	18ba      	adds	r2, r7, r2
 8003f9e:	6812      	ldr	r2, [r2, #0]
 8003fa0:	601a      	str	r2, [r3, #0]
    while (1)
    {printf("ACK WAIT HANDLER\n");
 8003fa2:	4b06      	ldr	r3, [pc, #24]	; (8003fbc <libswd_error_handle_ack_wait+0x3c4>)
 8003fa4:	0018      	movs	r0, r3
 8003fa6:	f004 f8d1 	bl	800814c <puts>
 8003faa:	e7fa      	b.n	8003fa2 <libswd_error_handle_ack_wait+0x3aa>
   // DWT_Delay_us(1000);
    }  // TODO PW
    return retval;
}
 8003fac:	0018      	movs	r0, r3
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	23a3      	movs	r3, #163	; 0xa3
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	449d      	add	sp, r3
 8003fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fb8:	0800af58 	.word	0x0800af58
 8003fbc:	0800af9c 	.word	0x0800af9c

08003fc0 <libswd_drv_mosi_8>:
#include "main.h"
//#include <GPIOConfig.h>
//#include "intrinsics.h"

int libswd_drv_mosi_8(libswd_ctx_t *libswdctx, libswd_cmd_t *cmd, char data, int bits, int nLSBfirst)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b088      	sub	sp, #32
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	60b9      	str	r1, [r7, #8]
 8003fca:	603b      	str	r3, [r7, #0]
 8003fcc:	1dfb      	adds	r3, r7, #7
 8003fce:	701a      	strb	r2, [r3, #0]
    if (bits < 0 && bits > 8) 
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	da05      	bge.n	8003fe2 <libswd_drv_mosi_8+0x22>
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	2b08      	cmp	r3, #8
 8003fda:	dd02      	ble.n	8003fe2 <libswd_drv_mosi_8+0x22>
    {
        return LIBSWD_ERROR_PARAM;
 8003fdc:	2305      	movs	r3, #5
 8003fde:	425b      	negs	r3, r3
 8003fe0:	e048      	b.n	8004074 <libswd_drv_mosi_8+0xb4>
    }
    if (nLSBfirst != LIBSWD_DIR_LSBFIRST && nLSBfirst != LIBSWD_DIR_MSBFIRST)
 8003fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d005      	beq.n	8003ff4 <libswd_drv_mosi_8+0x34>
 8003fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d002      	beq.n	8003ff4 <libswd_drv_mosi_8+0x34>
    {
        return LIBSWD_ERROR_PARAM;
 8003fee:	2305      	movs	r3, #5
 8003ff0:	425b      	negs	r3, r3
 8003ff2:	e03f      	b.n	8004074 <libswd_drv_mosi_8+0xb4>
    }
    
    uint32_t mask = 1;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	61fb      	str	r3, [r7, #28]
    uint32_t copy = data; 
 8003ff8:	1dfb      	adds	r3, r7, #7
 8003ffa:	781b      	ldrb	r3, [r3, #0]
 8003ffc:	61bb      	str	r3, [r7, #24]
    if (nLSBfirst != LIBSWD_DIR_LSBFIRST)
 8003ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004000:	2b00      	cmp	r3, #0
 8004002:	d005      	beq.n	8004010 <libswd_drv_mosi_8+0x50>
    {
        mask = 1U << (bits - 1);
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	3b01      	subs	r3, #1
 8004008:	2201      	movs	r2, #1
 800400a:	409a      	lsls	r2, r3
 800400c:	0013      	movs	r3, r2
 800400e:	61fb      	str	r3, [r7, #28]
    }
    
    for (uint32_t i = 0; i < bits; i++) 
 8004010:	2300      	movs	r3, #0
 8004012:	617b      	str	r3, [r7, #20]
 8004014:	e029      	b.n	800406a <libswd_drv_mosi_8+0xaa>
    {
        copy & mask ? (SWDIO_High) : (SWDIO_Low);
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	69fa      	ldr	r2, [r7, #28]
 800401a:	4013      	ands	r3, r2
 800401c:	d007      	beq.n	800402e <libswd_drv_mosi_8+0x6e>
 800401e:	4b17      	ldr	r3, [pc, #92]	; (800407c <libswd_drv_mosi_8+0xbc>)
 8004020:	695a      	ldr	r2, [r3, #20]
 8004022:	4b16      	ldr	r3, [pc, #88]	; (800407c <libswd_drv_mosi_8+0xbc>)
 8004024:	2180      	movs	r1, #128	; 0x80
 8004026:	00c9      	lsls	r1, r1, #3
 8004028:	430a      	orrs	r2, r1
 800402a:	615a      	str	r2, [r3, #20]
 800402c:	e005      	b.n	800403a <libswd_drv_mosi_8+0x7a>
 800402e:	4b13      	ldr	r3, [pc, #76]	; (800407c <libswd_drv_mosi_8+0xbc>)
 8004030:	695a      	ldr	r2, [r3, #20]
 8004032:	4b12      	ldr	r3, [pc, #72]	; (800407c <libswd_drv_mosi_8+0xbc>)
 8004034:	4912      	ldr	r1, [pc, #72]	; (8004080 <libswd_drv_mosi_8+0xc0>)
 8004036:	400a      	ands	r2, r1
 8004038:	615a      	str	r2, [r3, #20]
        copy = (nLSBfirst == LIBSWD_DIR_LSBFIRST) ? copy >> 1 : copy << 1;
 800403a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800403c:	2b00      	cmp	r3, #0
 800403e:	d102      	bne.n	8004046 <libswd_drv_mosi_8+0x86>
 8004040:	69bb      	ldr	r3, [r7, #24]
 8004042:	085b      	lsrs	r3, r3, #1
 8004044:	e001      	b.n	800404a <libswd_drv_mosi_8+0x8a>
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	005b      	lsls	r3, r3, #1
 800404a:	61bb      	str	r3, [r7, #24]
        SWCLK_High;                 //reading on up edge
 800404c:	4b0b      	ldr	r3, [pc, #44]	; (800407c <libswd_drv_mosi_8+0xbc>)
 800404e:	695a      	ldr	r2, [r3, #20]
 8004050:	4b0a      	ldr	r3, [pc, #40]	; (800407c <libswd_drv_mosi_8+0xbc>)
 8004052:	2101      	movs	r1, #1
 8004054:	430a      	orrs	r2, r1
 8004056:	615a      	str	r2, [r3, #20]
        SWCLK_Low;
 8004058:	4b08      	ldr	r3, [pc, #32]	; (800407c <libswd_drv_mosi_8+0xbc>)
 800405a:	695a      	ldr	r2, [r3, #20]
 800405c:	4b07      	ldr	r3, [pc, #28]	; (800407c <libswd_drv_mosi_8+0xbc>)
 800405e:	2101      	movs	r1, #1
 8004060:	438a      	bics	r2, r1
 8004062:	615a      	str	r2, [r3, #20]
    for (uint32_t i = 0; i < bits; i++) 
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	3301      	adds	r3, #1
 8004068:	617b      	str	r3, [r7, #20]
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	697a      	ldr	r2, [r7, #20]
 800406e:	429a      	cmp	r2, r3
 8004070:	d3d1      	bcc.n	8004016 <libswd_drv_mosi_8+0x56>
    }
    return bits;
 8004072:	683b      	ldr	r3, [r7, #0]
}
 8004074:	0018      	movs	r0, r3
 8004076:	46bd      	mov	sp, r7
 8004078:	b008      	add	sp, #32
 800407a:	bd80      	pop	{r7, pc}
 800407c:	50000400 	.word	0x50000400
 8004080:	fffffbff 	.word	0xfffffbff

08004084 <libswd_drv_mosi_32>:


int libswd_drv_mosi_32(libswd_ctx_t *libswdctx, libswd_cmd_t *cmd, int data, int bits, int nLSBfirst)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b088      	sub	sp, #32
 8004088:	af00      	add	r7, sp, #0
 800408a:	60f8      	str	r0, [r7, #12]
 800408c:	60b9      	str	r1, [r7, #8]
 800408e:	607a      	str	r2, [r7, #4]
 8004090:	603b      	str	r3, [r7, #0]
    if (bits < 0 && bits > 32) 
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	2b00      	cmp	r3, #0
 8004096:	da05      	bge.n	80040a4 <libswd_drv_mosi_32+0x20>
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	2b20      	cmp	r3, #32
 800409c:	dd02      	ble.n	80040a4 <libswd_drv_mosi_32+0x20>
    {
        return LIBSWD_ERROR_PARAM;
 800409e:	2305      	movs	r3, #5
 80040a0:	425b      	negs	r3, r3
 80040a2:	e047      	b.n	8004134 <libswd_drv_mosi_32+0xb0>
    }
    if (nLSBfirst != LIBSWD_DIR_LSBFIRST && nLSBfirst != LIBSWD_DIR_MSBFIRST)
 80040a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d005      	beq.n	80040b6 <libswd_drv_mosi_32+0x32>
 80040aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d002      	beq.n	80040b6 <libswd_drv_mosi_32+0x32>
    {
        return LIBSWD_ERROR_PARAM;
 80040b0:	2305      	movs	r3, #5
 80040b2:	425b      	negs	r3, r3
 80040b4:	e03e      	b.n	8004134 <libswd_drv_mosi_32+0xb0>
    }

    uint32_t mask = 1;
 80040b6:	2301      	movs	r3, #1
 80040b8:	61fb      	str	r3, [r7, #28]
    uint32_t copy = data; 
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	61bb      	str	r3, [r7, #24]
    if (nLSBfirst != LIBSWD_DIR_LSBFIRST)
 80040be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d005      	beq.n	80040d0 <libswd_drv_mosi_32+0x4c>
    {
        mask = 1U << (bits - 1);
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	3b01      	subs	r3, #1
 80040c8:	2201      	movs	r2, #1
 80040ca:	409a      	lsls	r2, r3
 80040cc:	0013      	movs	r3, r2
 80040ce:	61fb      	str	r3, [r7, #28]
    }
    
    for (uint32_t i = 0; i < bits; i++) 
 80040d0:	2300      	movs	r3, #0
 80040d2:	617b      	str	r3, [r7, #20]
 80040d4:	e029      	b.n	800412a <libswd_drv_mosi_32+0xa6>
    {
        copy & mask ? (SWDIO_High) : (SWDIO_Low);
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	69fa      	ldr	r2, [r7, #28]
 80040da:	4013      	ands	r3, r2
 80040dc:	d007      	beq.n	80040ee <libswd_drv_mosi_32+0x6a>
 80040de:	4b17      	ldr	r3, [pc, #92]	; (800413c <libswd_drv_mosi_32+0xb8>)
 80040e0:	695a      	ldr	r2, [r3, #20]
 80040e2:	4b16      	ldr	r3, [pc, #88]	; (800413c <libswd_drv_mosi_32+0xb8>)
 80040e4:	2180      	movs	r1, #128	; 0x80
 80040e6:	00c9      	lsls	r1, r1, #3
 80040e8:	430a      	orrs	r2, r1
 80040ea:	615a      	str	r2, [r3, #20]
 80040ec:	e005      	b.n	80040fa <libswd_drv_mosi_32+0x76>
 80040ee:	4b13      	ldr	r3, [pc, #76]	; (800413c <libswd_drv_mosi_32+0xb8>)
 80040f0:	695a      	ldr	r2, [r3, #20]
 80040f2:	4b12      	ldr	r3, [pc, #72]	; (800413c <libswd_drv_mosi_32+0xb8>)
 80040f4:	4912      	ldr	r1, [pc, #72]	; (8004140 <libswd_drv_mosi_32+0xbc>)
 80040f6:	400a      	ands	r2, r1
 80040f8:	615a      	str	r2, [r3, #20]
        copy = (nLSBfirst == LIBSWD_DIR_LSBFIRST) ? copy >> 1 : copy << 1;
 80040fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d102      	bne.n	8004106 <libswd_drv_mosi_32+0x82>
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	085b      	lsrs	r3, r3, #1
 8004104:	e001      	b.n	800410a <libswd_drv_mosi_32+0x86>
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	005b      	lsls	r3, r3, #1
 800410a:	61bb      	str	r3, [r7, #24]
        SWCLK_High;                 //reading on up edge
 800410c:	4b0b      	ldr	r3, [pc, #44]	; (800413c <libswd_drv_mosi_32+0xb8>)
 800410e:	695a      	ldr	r2, [r3, #20]
 8004110:	4b0a      	ldr	r3, [pc, #40]	; (800413c <libswd_drv_mosi_32+0xb8>)
 8004112:	2101      	movs	r1, #1
 8004114:	430a      	orrs	r2, r1
 8004116:	615a      	str	r2, [r3, #20]
        SWCLK_Low;
 8004118:	4b08      	ldr	r3, [pc, #32]	; (800413c <libswd_drv_mosi_32+0xb8>)
 800411a:	695a      	ldr	r2, [r3, #20]
 800411c:	4b07      	ldr	r3, [pc, #28]	; (800413c <libswd_drv_mosi_32+0xb8>)
 800411e:	2101      	movs	r1, #1
 8004120:	438a      	bics	r2, r1
 8004122:	615a      	str	r2, [r3, #20]
    for (uint32_t i = 0; i < bits; i++) 
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	3301      	adds	r3, #1
 8004128:	617b      	str	r3, [r7, #20]
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	697a      	ldr	r2, [r7, #20]
 800412e:	429a      	cmp	r2, r3
 8004130:	d3d1      	bcc.n	80040d6 <libswd_drv_mosi_32+0x52>
    }
    
    return bits;
 8004132:	683b      	ldr	r3, [r7, #0]
}
 8004134:	0018      	movs	r0, r3
 8004136:	46bd      	mov	sp, r7
 8004138:	b008      	add	sp, #32
 800413a:	bd80      	pop	{r7, pc}
 800413c:	50000400 	.word	0x50000400
 8004140:	fffffbff 	.word	0xfffffbff

08004144 <libswd_drv_miso_8>:

int libswd_drv_miso_8(libswd_ctx_t *libswdctx, libswd_cmd_t *cmd, char *data, int bits, int nLSBfirst)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b088      	sub	sp, #32
 8004148:	af00      	add	r7, sp, #0
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	607a      	str	r2, [r7, #4]
 8004150:	603b      	str	r3, [r7, #0]
    if (data == NULL) 
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d102      	bne.n	800415e <libswd_drv_miso_8+0x1a>
    {
        return LIBSWD_ERROR_NULLPOINTER;
 8004158:	2302      	movs	r3, #2
 800415a:	425b      	negs	r3, r3
 800415c:	e04e      	b.n	80041fc <libswd_drv_miso_8+0xb8>
    }
    if (bits < 0 && bits > 8) 
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	2b00      	cmp	r3, #0
 8004162:	da05      	bge.n	8004170 <libswd_drv_miso_8+0x2c>
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	2b08      	cmp	r3, #8
 8004168:	dd02      	ble.n	8004170 <libswd_drv_miso_8+0x2c>
    {
        return LIBSWD_ERROR_PARAM;
 800416a:	2305      	movs	r3, #5
 800416c:	425b      	negs	r3, r3
 800416e:	e045      	b.n	80041fc <libswd_drv_miso_8+0xb8>
    }
    if (nLSBfirst != LIBSWD_DIR_LSBFIRST && nLSBfirst != LIBSWD_DIR_MSBFIRST)
 8004170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004172:	2b00      	cmp	r3, #0
 8004174:	d005      	beq.n	8004182 <libswd_drv_miso_8+0x3e>
 8004176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004178:	2b01      	cmp	r3, #1
 800417a:	d002      	beq.n	8004182 <libswd_drv_miso_8+0x3e>
    {
        return LIBSWD_ERROR_PARAM;
 800417c:	2305      	movs	r3, #5
 800417e:	425b      	negs	r3, r3
 8004180:	e03c      	b.n	80041fc <libswd_drv_miso_8+0xb8>
    }

    uint32_t mask = 1;
 8004182:	2301      	movs	r3, #1
 8004184:	61fb      	str	r3, [r7, #28]
    uint32_t input = 0;
 8004186:	2300      	movs	r3, #0
 8004188:	61bb      	str	r3, [r7, #24]
    if (nLSBfirst == LIBSWD_DIR_LSBFIRST)
 800418a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800418c:	2b00      	cmp	r3, #0
 800418e:	d105      	bne.n	800419c <libswd_drv_miso_8+0x58>
    {
        mask = 1U << (bits - 1);
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	3b01      	subs	r3, #1
 8004194:	2201      	movs	r2, #1
 8004196:	409a      	lsls	r2, r3
 8004198:	0013      	movs	r3, r2
 800419a:	61fb      	str	r3, [r7, #28]
    }
    for (uint32_t i = 0; i < bits; i++) 
 800419c:	2300      	movs	r3, #0
 800419e:	617b      	str	r3, [r7, #20]
 80041a0:	e023      	b.n	80041ea <libswd_drv_miso_8+0xa6>
    {
        SWCLK_High;
 80041a2:	4b18      	ldr	r3, [pc, #96]	; (8004204 <libswd_drv_miso_8+0xc0>)
 80041a4:	695a      	ldr	r2, [r3, #20]
 80041a6:	4b17      	ldr	r3, [pc, #92]	; (8004204 <libswd_drv_miso_8+0xc0>)
 80041a8:	2101      	movs	r1, #1
 80041aa:	430a      	orrs	r2, r1
 80041ac:	615a      	str	r2, [r3, #20]
        input = (nLSBfirst == LIBSWD_DIR_LSBFIRST) ? input >> 1 : input << 1;
 80041ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d102      	bne.n	80041ba <libswd_drv_miso_8+0x76>
 80041b4:	69bb      	ldr	r3, [r7, #24]
 80041b6:	085b      	lsrs	r3, r3, #1
 80041b8:	e001      	b.n	80041be <libswd_drv_miso_8+0x7a>
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	005b      	lsls	r3, r3, #1
 80041be:	61bb      	str	r3, [r7, #24]
        SWCLK_Low;
 80041c0:	4b10      	ldr	r3, [pc, #64]	; (8004204 <libswd_drv_miso_8+0xc0>)
 80041c2:	695a      	ldr	r2, [r3, #20]
 80041c4:	4b0f      	ldr	r3, [pc, #60]	; (8004204 <libswd_drv_miso_8+0xc0>)
 80041c6:	2101      	movs	r1, #1
 80041c8:	438a      	bics	r2, r1
 80041ca:	615a      	str	r2, [r3, #20]
        input |= SWDIO_Input ? mask : 0;
 80041cc:	4b0d      	ldr	r3, [pc, #52]	; (8004204 <libswd_drv_miso_8+0xc0>)
 80041ce:	691a      	ldr	r2, [r3, #16]
 80041d0:	2380      	movs	r3, #128	; 0x80
 80041d2:	00db      	lsls	r3, r3, #3
 80041d4:	4013      	ands	r3, r2
 80041d6:	d001      	beq.n	80041dc <libswd_drv_miso_8+0x98>
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	e000      	b.n	80041de <libswd_drv_miso_8+0x9a>
 80041dc:	2300      	movs	r3, #0
 80041de:	69ba      	ldr	r2, [r7, #24]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	61bb      	str	r3, [r7, #24]
    for (uint32_t i = 0; i < bits; i++) 
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	3301      	adds	r3, #1
 80041e8:	617b      	str	r3, [r7, #20]
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	697a      	ldr	r2, [r7, #20]
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d3d7      	bcc.n	80041a2 <libswd_drv_miso_8+0x5e>
    }
    *data = input;
 80041f2:	69bb      	ldr	r3, [r7, #24]
 80041f4:	b2da      	uxtb	r2, r3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	701a      	strb	r2, [r3, #0]
    return bits;
 80041fa:	683b      	ldr	r3, [r7, #0]
}
 80041fc:	0018      	movs	r0, r3
 80041fe:	46bd      	mov	sp, r7
 8004200:	b008      	add	sp, #32
 8004202:	bd80      	pop	{r7, pc}
 8004204:	50000400 	.word	0x50000400

08004208 <libswd_drv_miso_32>:

int libswd_drv_miso_32(libswd_ctx_t *libswdctx, libswd_cmd_t *cmd, int *data, int bits, int nLSBfirst)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b088      	sub	sp, #32
 800420c:	af00      	add	r7, sp, #0
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	60b9      	str	r1, [r7, #8]
 8004212:	607a      	str	r2, [r7, #4]
 8004214:	603b      	str	r3, [r7, #0]
    if (data == NULL) 
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d102      	bne.n	8004222 <libswd_drv_miso_32+0x1a>
    {
        return LIBSWD_ERROR_NULLPOINTER;
 800421c:	2302      	movs	r3, #2
 800421e:	425b      	negs	r3, r3
 8004220:	e04d      	b.n	80042be <libswd_drv_miso_32+0xb6>
    }
    if (bits < 0 && bits > 32)
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	2b00      	cmp	r3, #0
 8004226:	da05      	bge.n	8004234 <libswd_drv_miso_32+0x2c>
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	2b20      	cmp	r3, #32
 800422c:	dd02      	ble.n	8004234 <libswd_drv_miso_32+0x2c>
    {
        return LIBSWD_ERROR_PARAM;
 800422e:	2305      	movs	r3, #5
 8004230:	425b      	negs	r3, r3
 8004232:	e044      	b.n	80042be <libswd_drv_miso_32+0xb6>
    }
    if (nLSBfirst != LIBSWD_DIR_LSBFIRST && nLSBfirst != LIBSWD_DIR_MSBFIRST)
 8004234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004236:	2b00      	cmp	r3, #0
 8004238:	d005      	beq.n	8004246 <libswd_drv_miso_32+0x3e>
 800423a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800423c:	2b01      	cmp	r3, #1
 800423e:	d002      	beq.n	8004246 <libswd_drv_miso_32+0x3e>
    {
        return LIBSWD_ERROR_PARAM;
 8004240:	2305      	movs	r3, #5
 8004242:	425b      	negs	r3, r3
 8004244:	e03b      	b.n	80042be <libswd_drv_miso_32+0xb6>
    }
    
    uint32_t mask = 1;
 8004246:	2301      	movs	r3, #1
 8004248:	61fb      	str	r3, [r7, #28]
    uint32_t input = 0;
 800424a:	2300      	movs	r3, #0
 800424c:	61bb      	str	r3, [r7, #24]
    if (nLSBfirst == LIBSWD_DIR_LSBFIRST)
 800424e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004250:	2b00      	cmp	r3, #0
 8004252:	d105      	bne.n	8004260 <libswd_drv_miso_32+0x58>
    {
        mask = 1U << (bits - 1);
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	3b01      	subs	r3, #1
 8004258:	2201      	movs	r2, #1
 800425a:	409a      	lsls	r2, r3
 800425c:	0013      	movs	r3, r2
 800425e:	61fb      	str	r3, [r7, #28]
    }
    for (uint32_t i = 0; i < bits; i++) 
 8004260:	2300      	movs	r3, #0
 8004262:	617b      	str	r3, [r7, #20]
 8004264:	e023      	b.n	80042ae <libswd_drv_miso_32+0xa6>
    {
        SWCLK_High;
 8004266:	4b18      	ldr	r3, [pc, #96]	; (80042c8 <libswd_drv_miso_32+0xc0>)
 8004268:	695a      	ldr	r2, [r3, #20]
 800426a:	4b17      	ldr	r3, [pc, #92]	; (80042c8 <libswd_drv_miso_32+0xc0>)
 800426c:	2101      	movs	r1, #1
 800426e:	430a      	orrs	r2, r1
 8004270:	615a      	str	r2, [r3, #20]
        input = (nLSBfirst == LIBSWD_DIR_LSBFIRST) ? input >> 1 : input << 1;
 8004272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004274:	2b00      	cmp	r3, #0
 8004276:	d102      	bne.n	800427e <libswd_drv_miso_32+0x76>
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	085b      	lsrs	r3, r3, #1
 800427c:	e001      	b.n	8004282 <libswd_drv_miso_32+0x7a>
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	005b      	lsls	r3, r3, #1
 8004282:	61bb      	str	r3, [r7, #24]
        SWCLK_Low;
 8004284:	4b10      	ldr	r3, [pc, #64]	; (80042c8 <libswd_drv_miso_32+0xc0>)
 8004286:	695a      	ldr	r2, [r3, #20]
 8004288:	4b0f      	ldr	r3, [pc, #60]	; (80042c8 <libswd_drv_miso_32+0xc0>)
 800428a:	2101      	movs	r1, #1
 800428c:	438a      	bics	r2, r1
 800428e:	615a      	str	r2, [r3, #20]
        input |= SWDIO_Input ? mask : 0;
 8004290:	4b0d      	ldr	r3, [pc, #52]	; (80042c8 <libswd_drv_miso_32+0xc0>)
 8004292:	691a      	ldr	r2, [r3, #16]
 8004294:	2380      	movs	r3, #128	; 0x80
 8004296:	00db      	lsls	r3, r3, #3
 8004298:	4013      	ands	r3, r2
 800429a:	d001      	beq.n	80042a0 <libswd_drv_miso_32+0x98>
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	e000      	b.n	80042a2 <libswd_drv_miso_32+0x9a>
 80042a0:	2300      	movs	r3, #0
 80042a2:	69ba      	ldr	r2, [r7, #24]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	61bb      	str	r3, [r7, #24]
    for (uint32_t i = 0; i < bits; i++) 
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	3301      	adds	r3, #1
 80042ac:	617b      	str	r3, [r7, #20]
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	697a      	ldr	r2, [r7, #20]
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d3d7      	bcc.n	8004266 <libswd_drv_miso_32+0x5e>
    }
    *data = input;
 80042b6:	69ba      	ldr	r2, [r7, #24]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	601a      	str	r2, [r3, #0]
    return bits;
 80042bc:	683b      	ldr	r3, [r7, #0]
}
 80042be:	0018      	movs	r0, r3
 80042c0:	46bd      	mov	sp, r7
 80042c2:	b008      	add	sp, #32
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	46c0      	nop			; (mov r8, r8)
 80042c8:	50000400 	.word	0x50000400

080042cc <libswd_drv_mosi_trn>:

/* This function sets interface buffers to MOSI direction.
 * Master Output Slave Input - SWD Write operation.
 * bits specify how many clock cycles must be used. */
int libswd_drv_mosi_trn(libswd_ctx_t *libswdctx, int bits)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b088      	sub	sp, #32
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6039      	str	r1, [r7, #0]
    if (bits < LIBSWD_TURNROUND_MIN_VAL && bits > LIBSWD_TURNROUND_MAX_VAL)
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	dc05      	bgt.n	80042e8 <libswd_drv_mosi_trn+0x1c>
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	2b04      	cmp	r3, #4
 80042e0:	dd02      	ble.n	80042e8 <libswd_drv_mosi_trn+0x1c>
    {
        return LIBSWD_ERROR_TURNAROUND;
 80042e2:	2322      	movs	r3, #34	; 0x22
 80042e4:	425b      	negs	r3, r3
 80042e6:	e03f      	b.n	8004368 <libswd_drv_mosi_trn+0x9c>
    }
 
    SWCLK_High;
 80042e8:	4b21      	ldr	r3, [pc, #132]	; (8004370 <libswd_drv_mosi_trn+0xa4>)
 80042ea:	695a      	ldr	r2, [r3, #20]
 80042ec:	4b20      	ldr	r3, [pc, #128]	; (8004370 <libswd_drv_mosi_trn+0xa4>)
 80042ee:	2101      	movs	r1, #1
 80042f0:	430a      	orrs	r2, r1
 80042f2:	615a      	str	r2, [r3, #20]
  
    // Set pin as digital output
    GPIO_InitTypeDef GPIO_InitStruct; 
    GPIO_InitStruct.Pin = GPIO_PIN_10;   
 80042f4:	2108      	movs	r1, #8
 80042f6:	187b      	adds	r3, r7, r1
 80042f8:	2280      	movs	r2, #128	; 0x80
 80042fa:	00d2      	lsls	r2, r2, #3
 80042fc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;      
 80042fe:	187b      	adds	r3, r7, r1
 8004300:	2201      	movs	r2, #1
 8004302:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;   
 8004304:	187b      	adds	r3, r7, r1
 8004306:	2203      	movs	r2, #3
 8004308:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800430a:	187b      	adds	r3, r7, r1
 800430c:	4a18      	ldr	r2, [pc, #96]	; (8004370 <libswd_drv_mosi_trn+0xa4>)
 800430e:	0019      	movs	r1, r3
 8004310:	0010      	movs	r0, r2
 8004312:	f002 f971 	bl	80065f8 <HAL_GPIO_Init>
  
    SWCLK_Low;
 8004316:	4b16      	ldr	r3, [pc, #88]	; (8004370 <libswd_drv_mosi_trn+0xa4>)
 8004318:	695a      	ldr	r2, [r3, #20]
 800431a:	4b15      	ldr	r3, [pc, #84]	; (8004370 <libswd_drv_mosi_trn+0xa4>)
 800431c:	2101      	movs	r1, #1
 800431e:	438a      	bics	r2, r1
 8004320:	615a      	str	r2, [r3, #20]

    SWCLK_High;
 8004322:	4b13      	ldr	r3, [pc, #76]	; (8004370 <libswd_drv_mosi_trn+0xa4>)
 8004324:	695a      	ldr	r2, [r3, #20]
 8004326:	4b12      	ldr	r3, [pc, #72]	; (8004370 <libswd_drv_mosi_trn+0xa4>)
 8004328:	2101      	movs	r1, #1
 800432a:	430a      	orrs	r2, r1
 800432c:	615a      	str	r2, [r3, #20]
    SWCLK_Low;
 800432e:	4b10      	ldr	r3, [pc, #64]	; (8004370 <libswd_drv_mosi_trn+0xa4>)
 8004330:	695a      	ldr	r2, [r3, #20]
 8004332:	4b0f      	ldr	r3, [pc, #60]	; (8004370 <libswd_drv_mosi_trn+0xa4>)
 8004334:	2101      	movs	r1, #1
 8004336:	438a      	bics	r2, r1
 8004338:	615a      	str	r2, [r3, #20]
 
    // TBD for bits > 1, this option seems to be unused
    for (uint32_t i = 1; i < bits; i++) 
 800433a:	2301      	movs	r3, #1
 800433c:	61fb      	str	r3, [r7, #28]
 800433e:	e00e      	b.n	800435e <libswd_drv_mosi_trn+0x92>
    {
        SWCLK_High;
 8004340:	4b0b      	ldr	r3, [pc, #44]	; (8004370 <libswd_drv_mosi_trn+0xa4>)
 8004342:	695a      	ldr	r2, [r3, #20]
 8004344:	4b0a      	ldr	r3, [pc, #40]	; (8004370 <libswd_drv_mosi_trn+0xa4>)
 8004346:	2101      	movs	r1, #1
 8004348:	430a      	orrs	r2, r1
 800434a:	615a      	str	r2, [r3, #20]
        SWCLK_Low;
 800434c:	4b08      	ldr	r3, [pc, #32]	; (8004370 <libswd_drv_mosi_trn+0xa4>)
 800434e:	695a      	ldr	r2, [r3, #20]
 8004350:	4b07      	ldr	r3, [pc, #28]	; (8004370 <libswd_drv_mosi_trn+0xa4>)
 8004352:	2101      	movs	r1, #1
 8004354:	438a      	bics	r2, r1
 8004356:	615a      	str	r2, [r3, #20]
    for (uint32_t i = 1; i < bits; i++) 
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	3301      	adds	r3, #1
 800435c:	61fb      	str	r3, [r7, #28]
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	69fa      	ldr	r2, [r7, #28]
 8004362:	429a      	cmp	r2, r3
 8004364:	d3ec      	bcc.n	8004340 <libswd_drv_mosi_trn+0x74>
    }
    return bits;
 8004366:	683b      	ldr	r3, [r7, #0]
}
 8004368:	0018      	movs	r0, r3
 800436a:	46bd      	mov	sp, r7
 800436c:	b008      	add	sp, #32
 800436e:	bd80      	pop	{r7, pc}
 8004370:	50000400 	.word	0x50000400

08004374 <libswd_drv_miso_trn>:

int libswd_drv_miso_trn(libswd_ctx_t *libswdctx, int bits)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b088      	sub	sp, #32
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	6039      	str	r1, [r7, #0]
    if (bits < LIBSWD_TURNROUND_MIN_VAL && bits > LIBSWD_TURNROUND_MAX_VAL)
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	2b00      	cmp	r3, #0
 8004382:	dc05      	bgt.n	8004390 <libswd_drv_miso_trn+0x1c>
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	2b04      	cmp	r3, #4
 8004388:	dd02      	ble.n	8004390 <libswd_drv_miso_trn+0x1c>
    {
        return LIBSWD_ERROR_TURNAROUND;
 800438a:	2322      	movs	r3, #34	; 0x22
 800438c:	425b      	negs	r3, r3
 800438e:	e027      	b.n	80043e0 <libswd_drv_miso_trn+0x6c>
    }

    // Set pin as digital input
    GPIO_InitTypeDef GPIO_InitStruct; 
    GPIO_InitStruct.Pin = GPIO_PIN_10;   
 8004390:	2108      	movs	r1, #8
 8004392:	187b      	adds	r3, r7, r1
 8004394:	2280      	movs	r2, #128	; 0x80
 8004396:	00d2      	lsls	r2, r2, #3
 8004398:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;     
 800439a:	187b      	adds	r3, r7, r1
 800439c:	2200      	movs	r2, #0
 800439e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;   
 80043a0:	187b      	adds	r3, r7, r1
 80043a2:	2203      	movs	r2, #3
 80043a4:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043a6:	187b      	adds	r3, r7, r1
 80043a8:	4a0f      	ldr	r2, [pc, #60]	; (80043e8 <libswd_drv_miso_trn+0x74>)
 80043aa:	0019      	movs	r1, r3
 80043ac:	0010      	movs	r0, r2
 80043ae:	f002 f923 	bl	80065f8 <HAL_GPIO_Init>
  
    // TBD for bits > 1, this option seems to be unused
    for (uint32_t i = 1; i < bits; i++) 
 80043b2:	2301      	movs	r3, #1
 80043b4:	61fb      	str	r3, [r7, #28]
 80043b6:	e00e      	b.n	80043d6 <libswd_drv_miso_trn+0x62>
    {
        SWCLK_High;
 80043b8:	4b0b      	ldr	r3, [pc, #44]	; (80043e8 <libswd_drv_miso_trn+0x74>)
 80043ba:	695a      	ldr	r2, [r3, #20]
 80043bc:	4b0a      	ldr	r3, [pc, #40]	; (80043e8 <libswd_drv_miso_trn+0x74>)
 80043be:	2101      	movs	r1, #1
 80043c0:	430a      	orrs	r2, r1
 80043c2:	615a      	str	r2, [r3, #20]
        SWCLK_Low;
 80043c4:	4b08      	ldr	r3, [pc, #32]	; (80043e8 <libswd_drv_miso_trn+0x74>)
 80043c6:	695a      	ldr	r2, [r3, #20]
 80043c8:	4b07      	ldr	r3, [pc, #28]	; (80043e8 <libswd_drv_miso_trn+0x74>)
 80043ca:	2101      	movs	r1, #1
 80043cc:	438a      	bics	r2, r1
 80043ce:	615a      	str	r2, [r3, #20]
    for (uint32_t i = 1; i < bits; i++) 
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	3301      	adds	r3, #1
 80043d4:	61fb      	str	r3, [r7, #28]
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	69fa      	ldr	r2, [r7, #28]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d3ec      	bcc.n	80043b8 <libswd_drv_miso_trn+0x44>
    }
    return bits;
 80043de:	683b      	ldr	r3, [r7, #0]
}
 80043e0:	0018      	movs	r0, r3
 80043e2:	46bd      	mov	sp, r7
 80043e4:	b008      	add	sp, #32
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	50000400 	.word	0x50000400

080043ec <libswd_log>:
/** By default we want to use internal logging mechanisms.
 * It is possible however to use target program mechanisms to log messages.
 * In order to correctly parse variable number of arguments we need to use
 * dedicated libswd_log_internal_va() function...
 */
int libswd_log(libswd_ctx_t *libswdctx, libswd_loglevel_t loglevel, char *msg, ...){
 80043ec:	b40c      	push	{r2, r3}
 80043ee:	b590      	push	{r4, r7, lr}
 80043f0:	b085      	sub	sp, #20
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	6078      	str	r0, [r7, #4]
 80043f6:	000a      	movs	r2, r1
 80043f8:	1cfb      	adds	r3, r7, #3
 80043fa:	701a      	strb	r2, [r3, #0]
 int retval;
 va_list ap;
 va_start(ap, msg);
 80043fc:	2324      	movs	r3, #36	; 0x24
 80043fe:	18fb      	adds	r3, r7, r3
 8004400:	60bb      	str	r3, [r7, #8]
 retval=libswd_log_internal_va(libswdctx, loglevel, msg, ap);
 8004402:	68bc      	ldr	r4, [r7, #8]
 8004404:	6a3a      	ldr	r2, [r7, #32]
 8004406:	1cfb      	adds	r3, r7, #3
 8004408:	7819      	ldrb	r1, [r3, #0]
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	0023      	movs	r3, r4
 800440e:	f000 f80a 	bl	8004426 <libswd_log_internal_va>
 8004412:	0003      	movs	r3, r0
 8004414:	60fb      	str	r3, [r7, #12]
 va_end(ap);
 return retval;
 8004416:	68fb      	ldr	r3, [r7, #12]
};
 8004418:	0018      	movs	r0, r3
 800441a:	46bd      	mov	sp, r7
 800441c:	b005      	add	sp, #20
 800441e:	bc90      	pop	{r4, r7}
 8004420:	bc08      	pop	{r3}
 8004422:	b002      	add	sp, #8
 8004424:	4718      	bx	r3

08004426 <libswd_log_internal_va>:
* \param *libswdctx swd context.
* \param loglevel at which to put selected message.
* \param *msg message body with variable arguments as in "printf".
* \return number of characters written or error code on failure.
*/
int libswd_log_internal_va(libswd_ctx_t *libswdctx, libswd_loglevel_t loglevel, char *fmt, va_list ap){
 8004426:	b580      	push	{r7, lr}
 8004428:	b086      	sub	sp, #24
 800442a:	af00      	add	r7, sp, #0
 800442c:	60f8      	str	r0, [r7, #12]
 800442e:	607a      	str	r2, [r7, #4]
 8004430:	603b      	str	r3, [r7, #0]
 8004432:	200b      	movs	r0, #11
 8004434:	183b      	adds	r3, r7, r0
 8004436:	1c0a      	adds	r2, r1, #0
 8004438:	701a      	strb	r2, [r3, #0]
    if (loglevel<LIBSWD_LOGLEVEL_MIN || loglevel>LIBSWD_LOGLEVEL_MAX)
 800443a:	183b      	adds	r3, r7, r0
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	2b06      	cmp	r3, #6
 8004440:	d902      	bls.n	8004448 <libswd_log_internal_va+0x22>
        return LIBSWD_ERROR_LOGLEVEL;
 8004442:	2329      	movs	r3, #41	; 0x29
 8004444:	425b      	negs	r3, r3
 8004446:	e011      	b.n	800446c <libswd_log_internal_va+0x46>
    if (loglevel > libswdctx->config.loglevel) return LIBSWD_OK;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	7b1b      	ldrb	r3, [r3, #12]
 800444c:	220b      	movs	r2, #11
 800444e:	18ba      	adds	r2, r7, r2
 8004450:	7812      	ldrb	r2, [r2, #0]
 8004452:	429a      	cmp	r2, r3
 8004454:	d901      	bls.n	800445a <libswd_log_internal_va+0x34>
 8004456:	2300      	movs	r3, #0
 8004458:	e008      	b.n	800446c <libswd_log_internal_va+0x46>
    int res;
    res=vprintf(fmt, ap);
 800445a:	683a      	ldr	r2, [r7, #0]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	0011      	movs	r1, r2
 8004460:	0018      	movs	r0, r3
 8004462:	f003 ff09 	bl	8008278 <viprintf>
 8004466:	0003      	movs	r3, r0
 8004468:	617b      	str	r3, [r7, #20]
    return res;
 800446a:	697b      	ldr	r3, [r7, #20]
}
 800446c:	0018      	movs	r0, r3
 800446e:	46bd      	mov	sp, r7
 8004470:	b006      	add	sp, #24
 8004472:	bd80      	pop	{r7, pc}

08004474 <libswd_operation_string>:

/** Helper function to produce operation name string for logging purposes.
* \param operation is the libswd_operation_t code to return as string.
* \return char* array with operation name string.
*/
const char *libswd_operation_string(libswd_operation_t operation){
 8004474:	b580      	push	{r7, lr}
 8004476:	b082      	sub	sp, #8
 8004478:	af00      	add	r7, sp, #0
 800447a:	0002      	movs	r2, r0
 800447c:	1dfb      	adds	r3, r7, #7
 800447e:	701a      	strb	r2, [r3, #0]
    switch(operation){
 8004480:	1dfb      	adds	r3, r7, #7
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	2b01      	cmp	r3, #1
 8004486:	d002      	beq.n	800448e <libswd_operation_string+0x1a>
 8004488:	2b02      	cmp	r3, #2
 800448a:	d002      	beq.n	8004492 <libswd_operation_string+0x1e>
 800448c:	e003      	b.n	8004496 <libswd_operation_string+0x22>
    case LIBSWD_OPERATION_ENQUEUE:       return "LIBSWD_OPERATION_ENQUEUE";
 800448e:	4b04      	ldr	r3, [pc, #16]	; (80044a0 <libswd_operation_string+0x2c>)
 8004490:	e002      	b.n	8004498 <libswd_operation_string+0x24>
    case LIBSWD_OPERATION_EXECUTE:       return "LIBSWD_OPERATION_EXECUTE";
 8004492:	4b04      	ldr	r3, [pc, #16]	; (80044a4 <libswd_operation_string+0x30>)
 8004494:	e000      	b.n	8004498 <libswd_operation_string+0x24>
//    case LIBSWD_OPERATION_TRANSMIT_TAIL: return "LIBSWD_OPERATION_TRANSMIT_TAIL";
//    case LIBSWD_OPERATION_TRANSMIT_ALL:  return "LIBSWD_OPERATION_TRANSMIT_ALL";
//    case LIBSWD_OPERATION_TRANSMIT_ONE:  return "LIBSWD_OPERATION_TRANSMIT_ONE";
//    case LIBSWD_OPERATION_TRANSMIT_LAST: return "LIBSWD_OPERATION_TRANSMIT_LAST";
    }
    return "UNKNOWN_LIBSWD_OPERATION";
 8004496:	4b04      	ldr	r3, [pc, #16]	; (80044a8 <libswd_operation_string+0x34>)
}
 8004498:	0018      	movs	r0, r3
 800449a:	46bd      	mov	sp, r7
 800449c:	b002      	add	sp, #8
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	0800b0b4 	.word	0x0800b0b4
 80044a4:	0800b0d0 	.word	0x0800b0d0
 80044a8:	0800b0ec 	.word	0x0800b0ec

080044ac <libswd_request_string>:
DP SELECT register value as it determines CTRL/STAT or WCR access.
* \param RnW is the read/write bit of the request packet.
* \param addr is the address of the register.
* \return char* array with the register name string.
*/
const char *libswd_request_string(libswd_ctx_t *libswdctx, char request){
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b086      	sub	sp, #24
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	000a      	movs	r2, r1
 80044b6:	1cfb      	adds	r3, r7, #3
 80044b8:	701a      	strb	r2, [r3, #0]
    static char string[100], tmp[8]; string[0]=0;
 80044ba:	4bd9      	ldr	r3, [pc, #868]	; (8004820 <libswd_request_string+0x374>)
 80044bc:	2200      	movs	r2, #0
 80044be:	701a      	strb	r2, [r3, #0]
    int apndp=request&LIBSWD_REQUEST_APnDP;
 80044c0:	1cfb      	adds	r3, r7, #3
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	2202      	movs	r2, #2
 80044c6:	4013      	ands	r3, r2
 80044c8:	613b      	str	r3, [r7, #16]
    int addr=0;
 80044ca:	2300      	movs	r3, #0
 80044cc:	617b      	str	r3, [r7, #20]
    addr|=((request&LIBSWD_REQUEST_A3)?1<<3:0);
 80044ce:	1cfb      	adds	r3, r7, #3
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	105b      	asrs	r3, r3, #1
 80044d4:	2208      	movs	r2, #8
 80044d6:	4013      	ands	r3, r2
 80044d8:	697a      	ldr	r2, [r7, #20]
 80044da:	4313      	orrs	r3, r2
 80044dc:	617b      	str	r3, [r7, #20]
    addr|=((request&LIBSWD_REQUEST_A2)?1<<2:0);
 80044de:	1cfb      	adds	r3, r7, #3
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	105b      	asrs	r3, r3, #1
 80044e4:	2204      	movs	r2, #4
 80044e6:	4013      	ands	r3, r2
 80044e8:	697a      	ldr	r2, [r7, #20]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	617b      	str	r3, [r7, #20]
    if (apndp) addr|=(libswdctx->log.dp.select&LIBSWD_DP_SELECT_APBANKSEL);
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d006      	beq.n	8004502 <libswd_request_string+0x56>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f8:	22f0      	movs	r2, #240	; 0xf0
 80044fa:	4013      	ands	r3, r2
 80044fc:	697a      	ldr	r2, [r7, #20]
 80044fe:	4313      	orrs	r3, r2
 8004500:	617b      	str	r3, [r7, #20]
    int rnw=request&LIBSWD_REQUEST_RnW;
 8004502:	1cfb      	adds	r3, r7, #3
 8004504:	781b      	ldrb	r3, [r3, #0]
 8004506:	2204      	movs	r2, #4
 8004508:	4013      	ands	r3, r2
 800450a:	60fb      	str	r3, [r7, #12]
    int parity=request&LIBSWD_REQUEST_PARITY;
 800450c:	1cfb      	adds	r3, r7, #3
 800450e:	781b      	ldrb	r3, [r3, #0]
 8004510:	2220      	movs	r2, #32
 8004512:	4013      	ands	r3, r2
 8004514:	60bb      	str	r3, [r7, #8]
    
    strcat(string, apndp?"AccessPort ":"DebugPort ");
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d001      	beq.n	8004520 <libswd_request_string+0x74>
 800451c:	4bc1      	ldr	r3, [pc, #772]	; (8004824 <libswd_request_string+0x378>)
 800451e:	e000      	b.n	8004522 <libswd_request_string+0x76>
 8004520:	4bc1      	ldr	r3, [pc, #772]	; (8004828 <libswd_request_string+0x37c>)
 8004522:	4abf      	ldr	r2, [pc, #764]	; (8004820 <libswd_request_string+0x374>)
 8004524:	0019      	movs	r1, r3
 8004526:	0010      	movs	r0, r2
 8004528:	f003 fe98 	bl	800825c <strcat>
    strcat(string, rnw?"Read ":"Write ");
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d001      	beq.n	8004536 <libswd_request_string+0x8a>
 8004532:	4bbe      	ldr	r3, [pc, #760]	; (800482c <libswd_request_string+0x380>)
 8004534:	e000      	b.n	8004538 <libswd_request_string+0x8c>
 8004536:	4bbe      	ldr	r3, [pc, #760]	; (8004830 <libswd_request_string+0x384>)
 8004538:	4ab9      	ldr	r2, [pc, #740]	; (8004820 <libswd_request_string+0x374>)
 800453a:	0019      	movs	r1, r3
 800453c:	0010      	movs	r0, r2
 800453e:	f003 fe8d 	bl	800825c <strcat>
    strcat(string, "Addr="); sprintf(tmp, "0x%02X", addr); strcat(string, tmp);
 8004542:	4bb7      	ldr	r3, [pc, #732]	; (8004820 <libswd_request_string+0x374>)
 8004544:	0018      	movs	r0, r3
 8004546:	f7fb fddf 	bl	8000108 <strlen>
 800454a:	0003      	movs	r3, r0
 800454c:	001a      	movs	r2, r3
 800454e:	4bb4      	ldr	r3, [pc, #720]	; (8004820 <libswd_request_string+0x374>)
 8004550:	18d2      	adds	r2, r2, r3
 8004552:	4bb8      	ldr	r3, [pc, #736]	; (8004834 <libswd_request_string+0x388>)
 8004554:	0010      	movs	r0, r2
 8004556:	0019      	movs	r1, r3
 8004558:	2306      	movs	r3, #6
 800455a:	001a      	movs	r2, r3
 800455c:	f003 fcbc 	bl	8007ed8 <memcpy>
 8004560:	697a      	ldr	r2, [r7, #20]
 8004562:	49b5      	ldr	r1, [pc, #724]	; (8004838 <libswd_request_string+0x38c>)
 8004564:	4bb5      	ldr	r3, [pc, #724]	; (800483c <libswd_request_string+0x390>)
 8004566:	0018      	movs	r0, r3
 8004568:	f003 fe0c 	bl	8008184 <siprintf>
 800456c:	4ab3      	ldr	r2, [pc, #716]	; (800483c <libswd_request_string+0x390>)
 800456e:	4bac      	ldr	r3, [pc, #688]	; (8004820 <libswd_request_string+0x374>)
 8004570:	0011      	movs	r1, r2
 8004572:	0018      	movs	r0, r3
 8004574:	f003 fe72 	bl	800825c <strcat>
    
    if (apndp){
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d100      	bne.n	8004580 <libswd_request_string+0xd4>
 800457e:	e0d4      	b.n	800472a <libswd_request_string+0x27e>
        // APnDP=1 so we print out the AHB-AP registers
        addr|=libswdctx->log.dp.select&LIBSWD_DP_SELECT_APBANKSEL;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004584:	22f0      	movs	r2, #240	; 0xf0
 8004586:	4013      	ands	r3, r2
 8004588:	697a      	ldr	r2, [r7, #20]
 800458a:	4313      	orrs	r3, r2
 800458c:	617b      	str	r3, [r7, #20]
        switch (addr){
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	2bfc      	cmp	r3, #252	; 0xfc
 8004592:	d100      	bne.n	8004596 <libswd_request_string+0xea>
 8004594:	e0a9      	b.n	80046ea <libswd_request_string+0x23e>
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	2bfc      	cmp	r3, #252	; 0xfc
 800459a:	dd00      	ble.n	800459e <libswd_request_string+0xf2>
 800459c:	e0b5      	b.n	800470a <libswd_request_string+0x25e>
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	2b1c      	cmp	r3, #28
 80045a2:	dc0d      	bgt.n	80045c0 <libswd_request_string+0x114>
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	da00      	bge.n	80045ac <libswd_request_string+0x100>
 80045aa:	e0ae      	b.n	800470a <libswd_request_string+0x25e>
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	2b1c      	cmp	r3, #28
 80045b0:	d900      	bls.n	80045b4 <libswd_request_string+0x108>
 80045b2:	e0aa      	b.n	800470a <libswd_request_string+0x25e>
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	009a      	lsls	r2, r3, #2
 80045b8:	4ba1      	ldr	r3, [pc, #644]	; (8004840 <libswd_request_string+0x394>)
 80045ba:	18d3      	adds	r3, r2, r3
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	469f      	mov	pc, r3
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	2bf8      	cmp	r3, #248	; 0xf8
 80045c4:	d100      	bne.n	80045c8 <libswd_request_string+0x11c>
 80045c6:	e080      	b.n	80046ca <libswd_request_string+0x21e>
 80045c8:	e09f      	b.n	800470a <libswd_request_string+0x25e>
        case 0x00: strcat(string, "(R/W: Control/Status Word, CSW (reset value: 0x43800042)) "); break;
 80045ca:	4b95      	ldr	r3, [pc, #596]	; (8004820 <libswd_request_string+0x374>)
 80045cc:	0018      	movs	r0, r3
 80045ce:	f7fb fd9b 	bl	8000108 <strlen>
 80045d2:	0003      	movs	r3, r0
 80045d4:	001a      	movs	r2, r3
 80045d6:	4b92      	ldr	r3, [pc, #584]	; (8004820 <libswd_request_string+0x374>)
 80045d8:	18d2      	adds	r2, r2, r3
 80045da:	4b9a      	ldr	r3, [pc, #616]	; (8004844 <libswd_request_string+0x398>)
 80045dc:	0010      	movs	r0, r2
 80045de:	0019      	movs	r1, r3
 80045e0:	233b      	movs	r3, #59	; 0x3b
 80045e2:	001a      	movs	r2, r3
 80045e4:	f003 fc78 	bl	8007ed8 <memcpy>
 80045e8:	e199      	b.n	800491e <libswd_request_string+0x472>
        case 0x04: strcat(string, "(R/W: Transfer Address, TAR (reset value: 0x00000000)) "); break;
 80045ea:	4b8d      	ldr	r3, [pc, #564]	; (8004820 <libswd_request_string+0x374>)
 80045ec:	0018      	movs	r0, r3
 80045ee:	f7fb fd8b 	bl	8000108 <strlen>
 80045f2:	0003      	movs	r3, r0
 80045f4:	001a      	movs	r2, r3
 80045f6:	4b8a      	ldr	r3, [pc, #552]	; (8004820 <libswd_request_string+0x374>)
 80045f8:	18d2      	adds	r2, r2, r3
 80045fa:	4b93      	ldr	r3, [pc, #588]	; (8004848 <libswd_request_string+0x39c>)
 80045fc:	0010      	movs	r0, r2
 80045fe:	0019      	movs	r1, r3
 8004600:	2338      	movs	r3, #56	; 0x38
 8004602:	001a      	movs	r2, r3
 8004604:	f003 fc68 	bl	8007ed8 <memcpy>
 8004608:	e189      	b.n	800491e <libswd_request_string+0x472>
        case 0x08: strcat(string, "(Reserved SBZ) "); break;
 800460a:	4b85      	ldr	r3, [pc, #532]	; (8004820 <libswd_request_string+0x374>)
 800460c:	0018      	movs	r0, r3
 800460e:	f7fb fd7b 	bl	8000108 <strlen>
 8004612:	0003      	movs	r3, r0
 8004614:	001a      	movs	r2, r3
 8004616:	4b82      	ldr	r3, [pc, #520]	; (8004820 <libswd_request_string+0x374>)
 8004618:	18d2      	adds	r2, r2, r3
 800461a:	4b8c      	ldr	r3, [pc, #560]	; (800484c <libswd_request_string+0x3a0>)
 800461c:	0010      	movs	r0, r2
 800461e:	0019      	movs	r1, r3
 8004620:	2310      	movs	r3, #16
 8004622:	001a      	movs	r2, r3
 8004624:	f003 fc58 	bl	8007ed8 <memcpy>
 8004628:	e179      	b.n	800491e <libswd_request_string+0x472>
        case 0x0c: strcat(string, "(R/W, Data Read/Write, DRW) "); break;
 800462a:	4b7d      	ldr	r3, [pc, #500]	; (8004820 <libswd_request_string+0x374>)
 800462c:	0018      	movs	r0, r3
 800462e:	f7fb fd6b 	bl	8000108 <strlen>
 8004632:	0003      	movs	r3, r0
 8004634:	001a      	movs	r2, r3
 8004636:	4b7a      	ldr	r3, [pc, #488]	; (8004820 <libswd_request_string+0x374>)
 8004638:	18d2      	adds	r2, r2, r3
 800463a:	4b85      	ldr	r3, [pc, #532]	; (8004850 <libswd_request_string+0x3a4>)
 800463c:	0010      	movs	r0, r2
 800463e:	0019      	movs	r1, r3
 8004640:	231d      	movs	r3, #29
 8004642:	001a      	movs	r2, r3
 8004644:	f003 fc48 	bl	8007ed8 <memcpy>
 8004648:	e169      	b.n	800491e <libswd_request_string+0x472>
        case 0x10: strcat(string, "(R/W, Banked Data 0, BD0) "); break;
 800464a:	4b75      	ldr	r3, [pc, #468]	; (8004820 <libswd_request_string+0x374>)
 800464c:	0018      	movs	r0, r3
 800464e:	f7fb fd5b 	bl	8000108 <strlen>
 8004652:	0003      	movs	r3, r0
 8004654:	001a      	movs	r2, r3
 8004656:	4b72      	ldr	r3, [pc, #456]	; (8004820 <libswd_request_string+0x374>)
 8004658:	18d2      	adds	r2, r2, r3
 800465a:	4b7e      	ldr	r3, [pc, #504]	; (8004854 <libswd_request_string+0x3a8>)
 800465c:	0010      	movs	r0, r2
 800465e:	0019      	movs	r1, r3
 8004660:	231b      	movs	r3, #27
 8004662:	001a      	movs	r2, r3
 8004664:	f003 fc38 	bl	8007ed8 <memcpy>
 8004668:	e159      	b.n	800491e <libswd_request_string+0x472>
        case 0x14: strcat(string, "(R/W, Banked Data 1, BD1) "); break;
 800466a:	4b6d      	ldr	r3, [pc, #436]	; (8004820 <libswd_request_string+0x374>)
 800466c:	0018      	movs	r0, r3
 800466e:	f7fb fd4b 	bl	8000108 <strlen>
 8004672:	0003      	movs	r3, r0
 8004674:	001a      	movs	r2, r3
 8004676:	4b6a      	ldr	r3, [pc, #424]	; (8004820 <libswd_request_string+0x374>)
 8004678:	18d2      	adds	r2, r2, r3
 800467a:	4b77      	ldr	r3, [pc, #476]	; (8004858 <libswd_request_string+0x3ac>)
 800467c:	0010      	movs	r0, r2
 800467e:	0019      	movs	r1, r3
 8004680:	231b      	movs	r3, #27
 8004682:	001a      	movs	r2, r3
 8004684:	f003 fc28 	bl	8007ed8 <memcpy>
 8004688:	e149      	b.n	800491e <libswd_request_string+0x472>
        case 0x18: strcat(string, "(R/W, Banked Data 2, BD2 )"); break;
 800468a:	4b65      	ldr	r3, [pc, #404]	; (8004820 <libswd_request_string+0x374>)
 800468c:	0018      	movs	r0, r3
 800468e:	f7fb fd3b 	bl	8000108 <strlen>
 8004692:	0003      	movs	r3, r0
 8004694:	001a      	movs	r2, r3
 8004696:	4b62      	ldr	r3, [pc, #392]	; (8004820 <libswd_request_string+0x374>)
 8004698:	18d2      	adds	r2, r2, r3
 800469a:	4b70      	ldr	r3, [pc, #448]	; (800485c <libswd_request_string+0x3b0>)
 800469c:	0010      	movs	r0, r2
 800469e:	0019      	movs	r1, r3
 80046a0:	231b      	movs	r3, #27
 80046a2:	001a      	movs	r2, r3
 80046a4:	f003 fc18 	bl	8007ed8 <memcpy>
 80046a8:	e139      	b.n	800491e <libswd_request_string+0x472>
        case 0x1c: strcat(string, "(R/W, Banked Data 3, BD3) "); break;
 80046aa:	4b5d      	ldr	r3, [pc, #372]	; (8004820 <libswd_request_string+0x374>)
 80046ac:	0018      	movs	r0, r3
 80046ae:	f7fb fd2b 	bl	8000108 <strlen>
 80046b2:	0003      	movs	r3, r0
 80046b4:	001a      	movs	r2, r3
 80046b6:	4b5a      	ldr	r3, [pc, #360]	; (8004820 <libswd_request_string+0x374>)
 80046b8:	18d2      	adds	r2, r2, r3
 80046ba:	4b69      	ldr	r3, [pc, #420]	; (8004860 <libswd_request_string+0x3b4>)
 80046bc:	0010      	movs	r0, r2
 80046be:	0019      	movs	r1, r3
 80046c0:	231b      	movs	r3, #27
 80046c2:	001a      	movs	r2, r3
 80046c4:	f003 fc08 	bl	8007ed8 <memcpy>
 80046c8:	e129      	b.n	800491e <libswd_request_string+0x472>
        case 0xf8: strcat(string, "(RO, Debug ROM table (reset value: 0xE00FF000)) "); break;
 80046ca:	4b55      	ldr	r3, [pc, #340]	; (8004820 <libswd_request_string+0x374>)
 80046cc:	0018      	movs	r0, r3
 80046ce:	f7fb fd1b 	bl	8000108 <strlen>
 80046d2:	0003      	movs	r3, r0
 80046d4:	001a      	movs	r2, r3
 80046d6:	4b52      	ldr	r3, [pc, #328]	; (8004820 <libswd_request_string+0x374>)
 80046d8:	18d2      	adds	r2, r2, r3
 80046da:	4b62      	ldr	r3, [pc, #392]	; (8004864 <libswd_request_string+0x3b8>)
 80046dc:	0010      	movs	r0, r2
 80046de:	0019      	movs	r1, r3
 80046e0:	2331      	movs	r3, #49	; 0x31
 80046e2:	001a      	movs	r2, r3
 80046e4:	f003 fbf8 	bl	8007ed8 <memcpy>
 80046e8:	e119      	b.n	800491e <libswd_request_string+0x472>
        case 0xfc: strcat(string, "(RO, Identification Register, IDR (reset value: 0x24770001)) "); break;
 80046ea:	4b4d      	ldr	r3, [pc, #308]	; (8004820 <libswd_request_string+0x374>)
 80046ec:	0018      	movs	r0, r3
 80046ee:	f7fb fd0b 	bl	8000108 <strlen>
 80046f2:	0003      	movs	r3, r0
 80046f4:	001a      	movs	r2, r3
 80046f6:	4b4a      	ldr	r3, [pc, #296]	; (8004820 <libswd_request_string+0x374>)
 80046f8:	18d2      	adds	r2, r2, r3
 80046fa:	4b5b      	ldr	r3, [pc, #364]	; (8004868 <libswd_request_string+0x3bc>)
 80046fc:	0010      	movs	r0, r2
 80046fe:	0019      	movs	r1, r3
 8004700:	233e      	movs	r3, #62	; 0x3e
 8004702:	001a      	movs	r2, r3
 8004704:	f003 fbe8 	bl	8007ed8 <memcpy>
 8004708:	e109      	b.n	800491e <libswd_request_string+0x472>
        default:   strcat(string, "(UNKNOWN) ");
 800470a:	4b45      	ldr	r3, [pc, #276]	; (8004820 <libswd_request_string+0x374>)
 800470c:	0018      	movs	r0, r3
 800470e:	f7fb fcfb 	bl	8000108 <strlen>
 8004712:	0003      	movs	r3, r0
 8004714:	001a      	movs	r2, r3
 8004716:	4b42      	ldr	r3, [pc, #264]	; (8004820 <libswd_request_string+0x374>)
 8004718:	18d2      	adds	r2, r2, r3
 800471a:	4b54      	ldr	r3, [pc, #336]	; (800486c <libswd_request_string+0x3c0>)
 800471c:	0010      	movs	r0, r2
 800471e:	0019      	movs	r1, r3
 8004720:	230b      	movs	r3, #11
 8004722:	001a      	movs	r2, r3
 8004724:	f003 fbd8 	bl	8007ed8 <memcpy>
 8004728:	e0f9      	b.n	800491e <libswd_request_string+0x472>
        }
    } else {
        // APnDP=0 so we print out the SW-DP registers
        if (rnw) {
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d060      	beq.n	80047f2 <libswd_request_string+0x346>
            switch (addr){
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	2b0c      	cmp	r3, #12
 8004734:	d03d      	beq.n	80047b2 <libswd_request_string+0x306>
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	2b0c      	cmp	r3, #12
 800473a:	dc4a      	bgt.n	80047d2 <libswd_request_string+0x326>
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	2b08      	cmp	r3, #8
 8004740:	d027      	beq.n	8004792 <libswd_request_string+0x2e6>
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	2b08      	cmp	r3, #8
 8004746:	dc44      	bgt.n	80047d2 <libswd_request_string+0x326>
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d003      	beq.n	8004756 <libswd_request_string+0x2aa>
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	2b04      	cmp	r3, #4
 8004752:	d010      	beq.n	8004776 <libswd_request_string+0x2ca>
 8004754:	e03d      	b.n	80047d2 <libswd_request_string+0x326>
            case LIBSWD_DP_IDCODE_ADDR: strcat(string, "(IDCODE)"); break;
 8004756:	4b32      	ldr	r3, [pc, #200]	; (8004820 <libswd_request_string+0x374>)
 8004758:	0018      	movs	r0, r3
 800475a:	f7fb fcd5 	bl	8000108 <strlen>
 800475e:	0003      	movs	r3, r0
 8004760:	001a      	movs	r2, r3
 8004762:	4b2f      	ldr	r3, [pc, #188]	; (8004820 <libswd_request_string+0x374>)
 8004764:	18d2      	adds	r2, r2, r3
 8004766:	4b42      	ldr	r3, [pc, #264]	; (8004870 <libswd_request_string+0x3c4>)
 8004768:	0010      	movs	r0, r2
 800476a:	0019      	movs	r1, r3
 800476c:	2309      	movs	r3, #9
 800476e:	001a      	movs	r2, r3
 8004770:	f003 fbb2 	bl	8007ed8 <memcpy>
 8004774:	e0d3      	b.n	800491e <libswd_request_string+0x472>
            case LIBSWD_DP_CTRLSTAT_ADDR: strcat(string, (libswdctx->log.dp.select&1<<LIBSWD_DP_SELECT_CTRLSEL_BITNUM)?"(CTRL/STAT or [WCR])":"([CTRL/STAT] or WCR)"); break;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800477a:	2201      	movs	r2, #1
 800477c:	4013      	ands	r3, r2
 800477e:	d001      	beq.n	8004784 <libswd_request_string+0x2d8>
 8004780:	4b3c      	ldr	r3, [pc, #240]	; (8004874 <libswd_request_string+0x3c8>)
 8004782:	e000      	b.n	8004786 <libswd_request_string+0x2da>
 8004784:	4b3c      	ldr	r3, [pc, #240]	; (8004878 <libswd_request_string+0x3cc>)
 8004786:	4a26      	ldr	r2, [pc, #152]	; (8004820 <libswd_request_string+0x374>)
 8004788:	0019      	movs	r1, r3
 800478a:	0010      	movs	r0, r2
 800478c:	f003 fd66 	bl	800825c <strcat>
 8004790:	e0c5      	b.n	800491e <libswd_request_string+0x472>
            case LIBSWD_DP_RESEND_ADDR: strcat(string ,"(RESEND) "); break;
 8004792:	4b23      	ldr	r3, [pc, #140]	; (8004820 <libswd_request_string+0x374>)
 8004794:	0018      	movs	r0, r3
 8004796:	f7fb fcb7 	bl	8000108 <strlen>
 800479a:	0003      	movs	r3, r0
 800479c:	001a      	movs	r2, r3
 800479e:	4b20      	ldr	r3, [pc, #128]	; (8004820 <libswd_request_string+0x374>)
 80047a0:	18d2      	adds	r2, r2, r3
 80047a2:	4b36      	ldr	r3, [pc, #216]	; (800487c <libswd_request_string+0x3d0>)
 80047a4:	0010      	movs	r0, r2
 80047a6:	0019      	movs	r1, r3
 80047a8:	230a      	movs	r3, #10
 80047aa:	001a      	movs	r2, r3
 80047ac:	f003 fb94 	bl	8007ed8 <memcpy>
 80047b0:	e0b5      	b.n	800491e <libswd_request_string+0x472>
            case LIBSWD_DP_RDBUFF_ADDR: strcat(string, "(RDBUFF) "); break;
 80047b2:	4b1b      	ldr	r3, [pc, #108]	; (8004820 <libswd_request_string+0x374>)
 80047b4:	0018      	movs	r0, r3
 80047b6:	f7fb fca7 	bl	8000108 <strlen>
 80047ba:	0003      	movs	r3, r0
 80047bc:	001a      	movs	r2, r3
 80047be:	4b18      	ldr	r3, [pc, #96]	; (8004820 <libswd_request_string+0x374>)
 80047c0:	18d2      	adds	r2, r2, r3
 80047c2:	4b2f      	ldr	r3, [pc, #188]	; (8004880 <libswd_request_string+0x3d4>)
 80047c4:	0010      	movs	r0, r2
 80047c6:	0019      	movs	r1, r3
 80047c8:	230a      	movs	r3, #10
 80047ca:	001a      	movs	r2, r3
 80047cc:	f003 fb84 	bl	8007ed8 <memcpy>
 80047d0:	e0a5      	b.n	800491e <libswd_request_string+0x472>
            default: strcat(string, "(UNKNOWN) ");
 80047d2:	4b13      	ldr	r3, [pc, #76]	; (8004820 <libswd_request_string+0x374>)
 80047d4:	0018      	movs	r0, r3
 80047d6:	f7fb fc97 	bl	8000108 <strlen>
 80047da:	0003      	movs	r3, r0
 80047dc:	001a      	movs	r2, r3
 80047de:	4b10      	ldr	r3, [pc, #64]	; (8004820 <libswd_request_string+0x374>)
 80047e0:	18d2      	adds	r2, r2, r3
 80047e2:	4b22      	ldr	r3, [pc, #136]	; (800486c <libswd_request_string+0x3c0>)
 80047e4:	0010      	movs	r0, r2
 80047e6:	0019      	movs	r1, r3
 80047e8:	230b      	movs	r3, #11
 80047ea:	001a      	movs	r2, r3
 80047ec:	f003 fb74 	bl	8007ed8 <memcpy>
 80047f0:	e095      	b.n	800491e <libswd_request_string+0x472>
            }
        } else {
            switch (addr) {
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	2b0c      	cmp	r3, #12
 80047f6:	d100      	bne.n	80047fa <libswd_request_string+0x34e>
 80047f8:	e072      	b.n	80048e0 <libswd_request_string+0x434>
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	2b0c      	cmp	r3, #12
 80047fe:	dd00      	ble.n	8004802 <libswd_request_string+0x356>
 8004800:	e07e      	b.n	8004900 <libswd_request_string+0x454>
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	2b08      	cmp	r3, #8
 8004806:	d05b      	beq.n	80048c0 <libswd_request_string+0x414>
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	2b08      	cmp	r3, #8
 800480c:	dd00      	ble.n	8004810 <libswd_request_string+0x364>
 800480e:	e077      	b.n	8004900 <libswd_request_string+0x454>
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d036      	beq.n	8004884 <libswd_request_string+0x3d8>
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	2b04      	cmp	r3, #4
 800481a:	d043      	beq.n	80048a4 <libswd_request_string+0x3f8>
 800481c:	e070      	b.n	8004900 <libswd_request_string+0x454>
 800481e:	46c0      	nop			; (mov r8, r8)
 8004820:	200000d0 	.word	0x200000d0
 8004824:	0800b108 	.word	0x0800b108
 8004828:	0800b114 	.word	0x0800b114
 800482c:	0800b120 	.word	0x0800b120
 8004830:	0800b128 	.word	0x0800b128
 8004834:	0800b130 	.word	0x0800b130
 8004838:	0800b138 	.word	0x0800b138
 800483c:	20000134 	.word	0x20000134
 8004840:	0800c058 	.word	0x0800c058
 8004844:	0800b140 	.word	0x0800b140
 8004848:	0800b17c 	.word	0x0800b17c
 800484c:	0800b1b4 	.word	0x0800b1b4
 8004850:	0800b1c4 	.word	0x0800b1c4
 8004854:	0800b1e4 	.word	0x0800b1e4
 8004858:	0800b200 	.word	0x0800b200
 800485c:	0800b21c 	.word	0x0800b21c
 8004860:	0800b238 	.word	0x0800b238
 8004864:	0800b254 	.word	0x0800b254
 8004868:	0800b288 	.word	0x0800b288
 800486c:	0800b2c8 	.word	0x0800b2c8
 8004870:	0800b2d4 	.word	0x0800b2d4
 8004874:	0800b2e0 	.word	0x0800b2e0
 8004878:	0800b2f8 	.word	0x0800b2f8
 800487c:	0800b310 	.word	0x0800b310
 8004880:	0800b31c 	.word	0x0800b31c
            case LIBSWD_DP_ABORT_ADDR: strcat(string, "(ABORT) "); break;
 8004884:	4b35      	ldr	r3, [pc, #212]	; (800495c <libswd_request_string+0x4b0>)
 8004886:	0018      	movs	r0, r3
 8004888:	f7fb fc3e 	bl	8000108 <strlen>
 800488c:	0003      	movs	r3, r0
 800488e:	001a      	movs	r2, r3
 8004890:	4b32      	ldr	r3, [pc, #200]	; (800495c <libswd_request_string+0x4b0>)
 8004892:	18d2      	adds	r2, r2, r3
 8004894:	4b32      	ldr	r3, [pc, #200]	; (8004960 <libswd_request_string+0x4b4>)
 8004896:	0010      	movs	r0, r2
 8004898:	0019      	movs	r1, r3
 800489a:	2309      	movs	r3, #9
 800489c:	001a      	movs	r2, r3
 800489e:	f003 fb1b 	bl	8007ed8 <memcpy>
 80048a2:	e03c      	b.n	800491e <libswd_request_string+0x472>
            case LIBSWD_DP_CTRLSTAT_ADDR: strcat(string, (libswdctx->log.dp.select&1<<LIBSWD_DP_SELECT_CTRLSEL_BITNUM)?"(CTRL/STAT or [WCR]) ":"([CTRL/STAT] or WCR) "); break;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a8:	2201      	movs	r2, #1
 80048aa:	4013      	ands	r3, r2
 80048ac:	d001      	beq.n	80048b2 <libswd_request_string+0x406>
 80048ae:	4b2d      	ldr	r3, [pc, #180]	; (8004964 <libswd_request_string+0x4b8>)
 80048b0:	e000      	b.n	80048b4 <libswd_request_string+0x408>
 80048b2:	4b2d      	ldr	r3, [pc, #180]	; (8004968 <libswd_request_string+0x4bc>)
 80048b4:	4a29      	ldr	r2, [pc, #164]	; (800495c <libswd_request_string+0x4b0>)
 80048b6:	0019      	movs	r1, r3
 80048b8:	0010      	movs	r0, r2
 80048ba:	f003 fccf 	bl	800825c <strcat>
 80048be:	e02e      	b.n	800491e <libswd_request_string+0x472>
            case LIBSWD_DP_SELECT_ADDR: strcat(string, "(SELECT) "); break;
 80048c0:	4b26      	ldr	r3, [pc, #152]	; (800495c <libswd_request_string+0x4b0>)
 80048c2:	0018      	movs	r0, r3
 80048c4:	f7fb fc20 	bl	8000108 <strlen>
 80048c8:	0003      	movs	r3, r0
 80048ca:	001a      	movs	r2, r3
 80048cc:	4b23      	ldr	r3, [pc, #140]	; (800495c <libswd_request_string+0x4b0>)
 80048ce:	18d2      	adds	r2, r2, r3
 80048d0:	4b26      	ldr	r3, [pc, #152]	; (800496c <libswd_request_string+0x4c0>)
 80048d2:	0010      	movs	r0, r2
 80048d4:	0019      	movs	r1, r3
 80048d6:	230a      	movs	r3, #10
 80048d8:	001a      	movs	r2, r3
 80048da:	f003 fafd 	bl	8007ed8 <memcpy>
 80048de:	e01e      	b.n	800491e <libswd_request_string+0x472>
            case LIBSWD_DP_ROUTESEL_ADDR: strcat(string, "(ROUTESEL)"); break;
 80048e0:	4b1e      	ldr	r3, [pc, #120]	; (800495c <libswd_request_string+0x4b0>)
 80048e2:	0018      	movs	r0, r3
 80048e4:	f7fb fc10 	bl	8000108 <strlen>
 80048e8:	0003      	movs	r3, r0
 80048ea:	001a      	movs	r2, r3
 80048ec:	4b1b      	ldr	r3, [pc, #108]	; (800495c <libswd_request_string+0x4b0>)
 80048ee:	18d2      	adds	r2, r2, r3
 80048f0:	4b1f      	ldr	r3, [pc, #124]	; (8004970 <libswd_request_string+0x4c4>)
 80048f2:	0010      	movs	r0, r2
 80048f4:	0019      	movs	r1, r3
 80048f6:	230b      	movs	r3, #11
 80048f8:	001a      	movs	r2, r3
 80048fa:	f003 faed 	bl	8007ed8 <memcpy>
 80048fe:	e00e      	b.n	800491e <libswd_request_string+0x472>
            default: strcat(string, "(UNKNOWN) ");
 8004900:	4b16      	ldr	r3, [pc, #88]	; (800495c <libswd_request_string+0x4b0>)
 8004902:	0018      	movs	r0, r3
 8004904:	f7fb fc00 	bl	8000108 <strlen>
 8004908:	0003      	movs	r3, r0
 800490a:	001a      	movs	r2, r3
 800490c:	4b13      	ldr	r3, [pc, #76]	; (800495c <libswd_request_string+0x4b0>)
 800490e:	18d2      	adds	r2, r2, r3
 8004910:	4b18      	ldr	r3, [pc, #96]	; (8004974 <libswd_request_string+0x4c8>)
 8004912:	0010      	movs	r0, r2
 8004914:	0019      	movs	r1, r3
 8004916:	230b      	movs	r3, #11
 8004918:	001a      	movs	r2, r3
 800491a:	f003 fadd 	bl	8007ed8 <memcpy>
            }
        }
    }
    strcat(string, "Parity="); strcat(string, parity?"1":"0");
 800491e:	4b0f      	ldr	r3, [pc, #60]	; (800495c <libswd_request_string+0x4b0>)
 8004920:	0018      	movs	r0, r3
 8004922:	f7fb fbf1 	bl	8000108 <strlen>
 8004926:	0003      	movs	r3, r0
 8004928:	001a      	movs	r2, r3
 800492a:	4b0c      	ldr	r3, [pc, #48]	; (800495c <libswd_request_string+0x4b0>)
 800492c:	18d2      	adds	r2, r2, r3
 800492e:	4b12      	ldr	r3, [pc, #72]	; (8004978 <libswd_request_string+0x4cc>)
 8004930:	0010      	movs	r0, r2
 8004932:	0019      	movs	r1, r3
 8004934:	2308      	movs	r3, #8
 8004936:	001a      	movs	r2, r3
 8004938:	f003 face 	bl	8007ed8 <memcpy>
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d001      	beq.n	8004946 <libswd_request_string+0x49a>
 8004942:	4b0e      	ldr	r3, [pc, #56]	; (800497c <libswd_request_string+0x4d0>)
 8004944:	e000      	b.n	8004948 <libswd_request_string+0x49c>
 8004946:	4b0e      	ldr	r3, [pc, #56]	; (8004980 <libswd_request_string+0x4d4>)
 8004948:	4a04      	ldr	r2, [pc, #16]	; (800495c <libswd_request_string+0x4b0>)
 800494a:	0019      	movs	r1, r3
 800494c:	0010      	movs	r0, r2
 800494e:	f003 fc85 	bl	800825c <strcat>
    return string;
 8004952:	4b02      	ldr	r3, [pc, #8]	; (800495c <libswd_request_string+0x4b0>)
}
 8004954:	0018      	movs	r0, r3
 8004956:	46bd      	mov	sp, r7
 8004958:	b006      	add	sp, #24
 800495a:	bd80      	pop	{r7, pc}
 800495c:	200000d0 	.word	0x200000d0
 8004960:	0800b328 	.word	0x0800b328
 8004964:	0800b334 	.word	0x0800b334
 8004968:	0800b34c 	.word	0x0800b34c
 800496c:	0800b364 	.word	0x0800b364
 8004970:	0800b370 	.word	0x0800b370
 8004974:	0800b2c8 	.word	0x0800b2c8
 8004978:	0800b37c 	.word	0x0800b37c
 800497c:	0800b384 	.word	0x0800b384
 8004980:	0800b388 	.word	0x0800b388

08004984 <libswd_memap_init>:
* This function will disable Tar Auto Increment.
* Use libswd_memap_setup() to set specific CSW and TAR values.
* \param *libswdctx swd context to work on.
* \return LIBSWD_OK on success or LIBSWD_ERROR code on failure.
*/
int libswd_memap_init(libswd_ctx_t *libswdctx, libswd_operation_t operation){
 8004984:	b580      	push	{r7, lr}
 8004986:	b08a      	sub	sp, #40	; 0x28
 8004988:	af02      	add	r7, sp, #8
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	000a      	movs	r2, r1
 800498e:	1cfb      	adds	r3, r7, #3
 8004990:	701a      	strb	r2, [r3, #0]
    libswd_log(libswdctx, LIBSWD_LOGLEVEL_DEBUG,
 8004992:	1cfb      	adds	r3, r7, #3
 8004994:	781b      	ldrb	r3, [r3, #0]
 8004996:	0018      	movs	r0, r3
 8004998:	f7ff fd6c 	bl	8004474 <libswd_operation_string>
 800499c:	0001      	movs	r1, r0
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a57      	ldr	r2, [pc, #348]	; (8004b00 <libswd_memap_init+0x17c>)
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	9100      	str	r1, [sp, #0]
 80049a6:	2105      	movs	r1, #5
 80049a8:	f7ff fd20 	bl	80043ec <libswd_log>
               "LIBSWD_D: Executing libswd_memap_init(*libswdctx=%p, operation=%s)...\n",
               (void*)libswdctx, libswd_operation_string(operation) );
    
    if (libswdctx==NULL) return LIBSWD_ERROR_NULLCONTEXT;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d102      	bne.n	80049b8 <libswd_memap_init+0x34>
 80049b2:	230a      	movs	r3, #10
 80049b4:	425b      	negs	r3, r3
 80049b6:	e09e      	b.n	8004af6 <libswd_memap_init+0x172>
    
    int res=0, memapidr, memapbase, memapcswp, memapcsw;
 80049b8:	2300      	movs	r3, #0
 80049ba:	61fb      	str	r3, [r7, #28]
    
    // Verify if DAP is already initialized, do so in necessary.
    if (!libswdctx->log.dp.initialized)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	7e1b      	ldrb	r3, [r3, #24]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d10d      	bne.n	80049e0 <libswd_memap_init+0x5c>
    {
        int idcode;
        res=libswd_dap_init(libswdctx, operation, &idcode);
 80049c4:	2308      	movs	r3, #8
 80049c6:	18fa      	adds	r2, r7, r3
 80049c8:	1cfb      	adds	r3, r7, #3
 80049ca:	7819      	ldrb	r1, [r3, #0]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	0018      	movs	r0, r3
 80049d0:	f7fd f850 	bl	8001a74 <libswd_dap_init>
 80049d4:	0003      	movs	r3, r0
 80049d6:	61fb      	str	r3, [r7, #28]
        if (res<0) goto libswd_memap_init_error;
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	da00      	bge.n	80049e0 <libswd_memap_init+0x5c>
 80049de:	e075      	b.n	8004acc <libswd_memap_init+0x148>
    //res=libswd_ap_select(libswdctx, operation, LIBSWD_MEMAP_APSEL_VAL);
    //if (res<0) goto libswd_memap_init_error;
    // TODO: DO WE NEED LIBSWD_AP_SELECT ???
    
    // Check IDentification Register, use cached value if possible.
    if (!libswdctx->log.memap.idr)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d110      	bne.n	8004a0a <libswd_memap_init+0x86>
    {
        res=libswd_ap_read(libswdctx, operation, LIBSWD_MEMAP_IDR_ADDR, &memapidr);
 80049e8:	2314      	movs	r3, #20
 80049ea:	18fa      	adds	r2, r7, r3
 80049ec:	1cfb      	adds	r3, r7, #3
 80049ee:	7819      	ldrb	r1, [r3, #0]
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	0013      	movs	r3, r2
 80049f4:	22fc      	movs	r2, #252	; 0xfc
 80049f6:	f7fd ffed 	bl	80029d4 <libswd_ap_read>
 80049fa:	0003      	movs	r3, r0
 80049fc:	61fb      	str	r3, [r7, #28]
        if (res<0) goto libswd_memap_init_error;
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	db65      	blt.n	8004ad0 <libswd_memap_init+0x14c>
        libswdctx->log.memap.idr=memapidr;
 8004a04:	697a      	ldr	r2, [r7, #20]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	665a      	str	r2, [r3, #100]	; 0x64
    }
    libswd_log(libswdctx, LIBSWD_LOGLEVEL_INFO,
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a0e:	4a3d      	ldr	r2, [pc, #244]	; (8004b04 <libswd_memap_init+0x180>)
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	2104      	movs	r1, #4
 8004a14:	f7ff fcea 	bl	80043ec <libswd_log>
               "LIBSWD_I: libswd_memap_init(): MEM-AP  IDR=0x%08X\n",
               libswdctx->log.memap.idr );
    
    // Check Debug BASE Address Register, use cached value if possible.
    if (!libswdctx->log.memap.base)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d110      	bne.n	8004a42 <libswd_memap_init+0xbe>
    {
        res=libswd_ap_read(libswdctx, operation, LIBSWD_MEMAP_BASE_ADDR, &memapbase);
 8004a20:	2310      	movs	r3, #16
 8004a22:	18fa      	adds	r2, r7, r3
 8004a24:	1cfb      	adds	r3, r7, #3
 8004a26:	7819      	ldrb	r1, [r3, #0]
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	0013      	movs	r3, r2
 8004a2c:	22f8      	movs	r2, #248	; 0xf8
 8004a2e:	f7fd ffd1 	bl	80029d4 <libswd_ap_read>
 8004a32:	0003      	movs	r3, r0
 8004a34:	61fb      	str	r3, [r7, #28]
        if (res<0) goto libswd_memap_init_error;
 8004a36:	69fb      	ldr	r3, [r7, #28]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	db4b      	blt.n	8004ad4 <libswd_memap_init+0x150>
        libswdctx->log.memap.base=memapbase;
 8004a3c:	693a      	ldr	r2, [r7, #16]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	661a      	str	r2, [r3, #96]	; 0x60
    }
    libswd_log(libswdctx, LIBSWD_LOGLEVEL_INFO,
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a46:	4a30      	ldr	r2, [pc, #192]	; (8004b08 <libswd_memap_init+0x184>)
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	2104      	movs	r1, #4
 8004a4c:	f7ff fcce 	bl	80043ec <libswd_log>
               "LIBSWD_I: libswd_memap_init(): MEM-AP BASE=0x%08X\n",
               libswdctx->log.memap.base );
    
    // Setup the CSW (MEM-AP Control and Status) register.
    memapcsw=0;
 8004a50:	2300      	movs	r3, #0
 8004a52:	61bb      	str	r3, [r7, #24]
    // Check if DbgSwEnable bit is set, set if necessary.
    memapcsw|=LIBSWD_MEMAP_CSW_DBGSWENABLE;
 8004a54:	69bb      	ldr	r3, [r7, #24]
 8004a56:	2280      	movs	r2, #128	; 0x80
 8004a58:	0612      	lsls	r2, r2, #24
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	61bb      	str	r3, [r7, #24]
    memapcsw&=~LIBSWD_MEMAP_CSW_ADDRINC;
 8004a5e:	69bb      	ldr	r3, [r7, #24]
 8004a60:	2230      	movs	r2, #48	; 0x30
 8004a62:	4393      	bics	r3, r2
 8004a64:	61bb      	str	r3, [r7, #24]
    memapcsw&=~LIBSWD_MEMAP_CSW_SIZE;
 8004a66:	69bb      	ldr	r3, [r7, #24]
 8004a68:	2207      	movs	r2, #7
 8004a6a:	4393      	bics	r3, r2
 8004a6c:	61bb      	str	r3, [r7, #24]
    memapcsw|=LIBSWD_MEMAP_CSW_SIZE_32BIT;
 8004a6e:	69bb      	ldr	r3, [r7, #24]
 8004a70:	2202      	movs	r2, #2
 8004a72:	4313      	orrs	r3, r2
 8004a74:	61bb      	str	r3, [r7, #24]
    // Write new CSW value.
    res=libswd_ap_write(libswdctx, operation, LIBSWD_MEMAP_CSW_ADDR, memapcsw);
 8004a76:	69ba      	ldr	r2, [r7, #24]
 8004a78:	1cfb      	adds	r3, r7, #3
 8004a7a:	7819      	ldrb	r1, [r3, #0]
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	0013      	movs	r3, r2
 8004a80:	2200      	movs	r2, #0
 8004a82:	f7fe f933 	bl	8002cec <libswd_ap_write>
 8004a86:	0003      	movs	r3, r0
 8004a88:	61fb      	str	r3, [r7, #28]
    if (res<0) goto libswd_memap_init_error;
 8004a8a:	69fb      	ldr	r3, [r7, #28]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	db23      	blt.n	8004ad8 <libswd_memap_init+0x154>
    // Read back and cache CSW value.
    res=libswd_ap_read(libswdctx, operation, LIBSWD_MEMAP_CSW_ADDR, &memapcswp);
 8004a90:	230c      	movs	r3, #12
 8004a92:	18fa      	adds	r2, r7, r3
 8004a94:	1cfb      	adds	r3, r7, #3
 8004a96:	7819      	ldrb	r1, [r3, #0]
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	0013      	movs	r3, r2
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f7fd ff99 	bl	80029d4 <libswd_ap_read>
 8004aa2:	0003      	movs	r3, r0
 8004aa4:	61fb      	str	r3, [r7, #28]
    if (res<0) goto libswd_memap_init_error;
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	db17      	blt.n	8004adc <libswd_memap_init+0x158>
    libswdctx->log.memap.csw=memapcswp;
 8004aac:	68fa      	ldr	r2, [r7, #12]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	641a      	str	r2, [r3, #64]	; 0x40
    libswd_log(libswdctx, LIBSWD_LOGLEVEL_INFO,
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab6:	4a15      	ldr	r2, [pc, #84]	; (8004b0c <libswd_memap_init+0x188>)
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	2104      	movs	r1, #4
 8004abc:	f7ff fc96 	bl	80043ec <libswd_log>
               "LIBSWD_I: libswd_memap_init(): MEM-AP  CSW=0x%08X\n",
               libswdctx->log.memap.csw);
    
    // Mark MEM-AP as configured.
    libswdctx->log.memap.initialized=1;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	223d      	movs	r2, #61	; 0x3d
 8004ac4:	2101      	movs	r1, #1
 8004ac6:	5499      	strb	r1, [r3, r2]
    
    return LIBSWD_OK;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	e014      	b.n	8004af6 <libswd_memap_init+0x172>
        if (res<0) goto libswd_memap_init_error;
 8004acc:	46c0      	nop			; (mov r8, r8)
 8004ace:	e006      	b.n	8004ade <libswd_memap_init+0x15a>
        if (res<0) goto libswd_memap_init_error;
 8004ad0:	46c0      	nop			; (mov r8, r8)
 8004ad2:	e004      	b.n	8004ade <libswd_memap_init+0x15a>
        if (res<0) goto libswd_memap_init_error;
 8004ad4:	46c0      	nop			; (mov r8, r8)
 8004ad6:	e002      	b.n	8004ade <libswd_memap_init+0x15a>
    if (res<0) goto libswd_memap_init_error;
 8004ad8:	46c0      	nop			; (mov r8, r8)
 8004ada:	e000      	b.n	8004ade <libswd_memap_init+0x15a>
    if (res<0) goto libswd_memap_init_error;
 8004adc:	46c0      	nop			; (mov r8, r8)
    
libswd_memap_init_error:
    libswd_log(libswdctx, LIBSWD_LOGLEVEL_ERROR,
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	b25b      	sxtb	r3, r3
 8004ae2:	0018      	movs	r0, r3
 8004ae4:	f7fe ff2a 	bl	800393c <libswd_error_string>
 8004ae8:	0003      	movs	r3, r0
 8004aea:	4a09      	ldr	r2, [pc, #36]	; (8004b10 <libswd_memap_init+0x18c>)
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	2102      	movs	r1, #2
 8004af0:	f7ff fc7c 	bl	80043ec <libswd_log>
               "LIBSWD_E: libswd_memap_init(): Cannot initialize MEM-AP (%s)!\n",
               libswd_error_string((libswd_error_code_t)res) );
    return res;
 8004af4:	69fb      	ldr	r3, [r7, #28]
}
 8004af6:	0018      	movs	r0, r3
 8004af8:	46bd      	mov	sp, r7
 8004afa:	b008      	add	sp, #32
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	46c0      	nop			; (mov r8, r8)
 8004b00:	0800b38c 	.word	0x0800b38c
 8004b04:	0800b3d4 	.word	0x0800b3d4
 8004b08:	0800b408 	.word	0x0800b408
 8004b0c:	0800b43c 	.word	0x0800b43c
 8004b10:	0800b470 	.word	0x0800b470

08004b14 <libswd_memap_setup>:
* \param operation is the LIBSWD_OPERATION type.
* \param csw is the CSW register value to be set.
* \param tar is the TAR register value to be set.
* \return LIBSWD_OK on success, LIBSWD_ERROR otherwise.
*/
int libswd_memap_setup(libswd_ctx_t *libswdctx, libswd_operation_t operation, int csw, int tar){
 8004b14:	b590      	push	{r4, r7, lr}
 8004b16:	b08d      	sub	sp, #52	; 0x34
 8004b18:	af04      	add	r7, sp, #16
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	607a      	str	r2, [r7, #4]
 8004b1e:	603b      	str	r3, [r7, #0]
 8004b20:	200b      	movs	r0, #11
 8004b22:	183b      	adds	r3, r7, r0
 8004b24:	1c0a      	adds	r2, r1, #0
 8004b26:	701a      	strb	r2, [r3, #0]
    libswd_log(libswdctx, LIBSWD_LOGLEVEL_DEBUG,
 8004b28:	183b      	adds	r3, r7, r0
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	0018      	movs	r0, r3
 8004b2e:	f7ff fca1 	bl	8004474 <libswd_operation_string>
 8004b32:	0004      	movs	r4, r0
 8004b34:	68f9      	ldr	r1, [r7, #12]
 8004b36:	4a48      	ldr	r2, [pc, #288]	; (8004c58 <libswd_memap_setup+0x144>)
 8004b38:	68f8      	ldr	r0, [r7, #12]
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	9302      	str	r3, [sp, #8]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	9301      	str	r3, [sp, #4]
 8004b42:	9400      	str	r4, [sp, #0]
 8004b44:	000b      	movs	r3, r1
 8004b46:	2105      	movs	r1, #5
 8004b48:	f7ff fc50 	bl	80043ec <libswd_log>
               "LIBSWD_D: Entering libswd_memap_setup(*libswdctx=%p, operation=%s, csw=0x%08X, tar=0x%08X)...\n",
               (void*)libswdctx, libswd_operation_string(operation), csw, tar );
    
    if (libswdctx==NULL) return LIBSWD_ERROR_NULLCONTEXT;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d102      	bne.n	8004b58 <libswd_memap_setup+0x44>
 8004b52:	230a      	movs	r3, #10
 8004b54:	425b      	negs	r3, r3
 8004b56:	e07a      	b.n	8004c4e <libswd_memap_setup+0x13a>
    
    int res, memapcswp, memapcsw, memaptarp;
    
    // Verify if MEM-AP is already initialized, do so in necessary.
    if (!libswdctx->log.memap.initialized)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	223d      	movs	r2, #61	; 0x3d
 8004b5c:	5c9b      	ldrb	r3, [r3, r2]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d10c      	bne.n	8004b7c <libswd_memap_setup+0x68>
    {
        res=libswd_memap_init(libswdctx, operation);
 8004b62:	230b      	movs	r3, #11
 8004b64:	18fb      	adds	r3, r7, r3
 8004b66:	781a      	ldrb	r2, [r3, #0]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	0011      	movs	r1, r2
 8004b6c:	0018      	movs	r0, r3
 8004b6e:	f7ff ff09 	bl	8004984 <libswd_memap_init>
 8004b72:	0003      	movs	r3, r0
 8004b74:	61fb      	str	r3, [r7, #28]
        if (res<0) goto libswd_memap_setup_error;
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	db53      	blt.n	8004c24 <libswd_memap_setup+0x110>
    }
    
    // Remember to set these bits not to lock-out the Debug...
    memapcsw=csw|LIBSWD_MEMAP_CSW_DBGSWENABLE;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2280      	movs	r2, #128	; 0x80
 8004b80:	0612      	lsls	r2, r2, #24
 8004b82:	4313      	orrs	r3, r2
 8004b84:	61bb      	str	r3, [r7, #24]
    memapcsw|=LIBSWD_MEMAP_CSW_PROT; // PROT ENABLES DEBUG!!
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	22fe      	movs	r2, #254	; 0xfe
 8004b8a:	05d2      	lsls	r2, r2, #23
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	61bb      	str	r3, [r7, #24]
    
    // Update MEM-AP CSW register if necessary.
    if (memapcsw!=libswdctx->log.memap.csw)
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b94:	69ba      	ldr	r2, [r7, #24]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d01e      	beq.n	8004bd8 <libswd_memap_setup+0xc4>
    {
        // Write register value.
        res=libswd_ap_write(libswdctx, operation, LIBSWD_MEMAP_CSW_ADDR, memapcsw);
 8004b9a:	69ba      	ldr	r2, [r7, #24]
 8004b9c:	240b      	movs	r4, #11
 8004b9e:	193b      	adds	r3, r7, r4
 8004ba0:	7819      	ldrb	r1, [r3, #0]
 8004ba2:	68f8      	ldr	r0, [r7, #12]
 8004ba4:	0013      	movs	r3, r2
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f7fe f8a0 	bl	8002cec <libswd_ap_write>
 8004bac:	0003      	movs	r3, r0
 8004bae:	61fb      	str	r3, [r7, #28]
        if (res<0) goto libswd_memap_setup_error;
 8004bb0:	69fb      	ldr	r3, [r7, #28]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	db38      	blt.n	8004c28 <libswd_memap_setup+0x114>
        // Read-back and cache CSW value.
        res=libswd_ap_read(libswdctx, operation, LIBSWD_MEMAP_CSW_ADDR, &memapcswp);
 8004bb6:	2314      	movs	r3, #20
 8004bb8:	18fa      	adds	r2, r7, r3
 8004bba:	193b      	adds	r3, r7, r4
 8004bbc:	7819      	ldrb	r1, [r3, #0]
 8004bbe:	68f8      	ldr	r0, [r7, #12]
 8004bc0:	0013      	movs	r3, r2
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f7fd ff06 	bl	80029d4 <libswd_ap_read>
 8004bc8:	0003      	movs	r3, r0
 8004bca:	61fb      	str	r3, [r7, #28]
        if (res<0) goto libswd_memap_setup_error;
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	db2c      	blt.n	8004c2c <libswd_memap_setup+0x118>
        libswdctx->log.memap.csw=memapcswp;
 8004bd2:	697a      	ldr	r2, [r7, #20]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    // Update MEM-AP TAR register if necessary.
    if (tar!=libswdctx->log.memap.tar)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bdc:	683a      	ldr	r2, [r7, #0]
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d01e      	beq.n	8004c20 <libswd_memap_setup+0x10c>
    {
        // Write register value.
        res=libswd_ap_write(libswdctx, operation, LIBSWD_MEMAP_TAR_ADDR, tar);
 8004be2:	683a      	ldr	r2, [r7, #0]
 8004be4:	240b      	movs	r4, #11
 8004be6:	193b      	adds	r3, r7, r4
 8004be8:	7819      	ldrb	r1, [r3, #0]
 8004bea:	68f8      	ldr	r0, [r7, #12]
 8004bec:	0013      	movs	r3, r2
 8004bee:	2204      	movs	r2, #4
 8004bf0:	f7fe f87c 	bl	8002cec <libswd_ap_write>
 8004bf4:	0003      	movs	r3, r0
 8004bf6:	61fb      	str	r3, [r7, #28]
        if (res<0) goto libswd_memap_setup_error;
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	db18      	blt.n	8004c30 <libswd_memap_setup+0x11c>
        // Read-back and cache TAR value.
        res=libswd_ap_read(libswdctx, operation, LIBSWD_MEMAP_TAR_ADDR, &memaptarp);
 8004bfe:	2310      	movs	r3, #16
 8004c00:	18fa      	adds	r2, r7, r3
 8004c02:	193b      	adds	r3, r7, r4
 8004c04:	7819      	ldrb	r1, [r3, #0]
 8004c06:	68f8      	ldr	r0, [r7, #12]
 8004c08:	0013      	movs	r3, r2
 8004c0a:	2204      	movs	r2, #4
 8004c0c:	f7fd fee2 	bl	80029d4 <libswd_ap_read>
 8004c10:	0003      	movs	r3, r0
 8004c12:	61fb      	str	r3, [r7, #28]
        if (res<0) goto libswd_memap_setup_error;
 8004c14:	69fb      	ldr	r3, [r7, #28]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	db0c      	blt.n	8004c34 <libswd_memap_setup+0x120>
        libswdctx->log.memap.tar=memaptarp;
 8004c1a:	693a      	ldr	r2, [r7, #16]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    return LIBSWD_OK;
 8004c20:	2300      	movs	r3, #0
 8004c22:	e014      	b.n	8004c4e <libswd_memap_setup+0x13a>
        if (res<0) goto libswd_memap_setup_error;
 8004c24:	46c0      	nop			; (mov r8, r8)
 8004c26:	e006      	b.n	8004c36 <libswd_memap_setup+0x122>
        if (res<0) goto libswd_memap_setup_error;
 8004c28:	46c0      	nop			; (mov r8, r8)
 8004c2a:	e004      	b.n	8004c36 <libswd_memap_setup+0x122>
        if (res<0) goto libswd_memap_setup_error;
 8004c2c:	46c0      	nop			; (mov r8, r8)
 8004c2e:	e002      	b.n	8004c36 <libswd_memap_setup+0x122>
        if (res<0) goto libswd_memap_setup_error;
 8004c30:	46c0      	nop			; (mov r8, r8)
 8004c32:	e000      	b.n	8004c36 <libswd_memap_setup+0x122>
        if (res<0) goto libswd_memap_setup_error;
 8004c34:	46c0      	nop			; (mov r8, r8)
    
libswd_memap_setup_error:
    libswd_log(libswdctx, LIBSWD_LOGLEVEL_ERROR,
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	b25b      	sxtb	r3, r3
 8004c3a:	0018      	movs	r0, r3
 8004c3c:	f7fe fe7e 	bl	800393c <libswd_error_string>
 8004c40:	0003      	movs	r3, r0
 8004c42:	4a06      	ldr	r2, [pc, #24]	; (8004c5c <libswd_memap_setup+0x148>)
 8004c44:	68f8      	ldr	r0, [r7, #12]
 8004c46:	2102      	movs	r1, #2
 8004c48:	f7ff fbd0 	bl	80043ec <libswd_log>
               "LIBSWD_E: libswd_memap_setup(): Cannot setup MEM-AP (%s)!\n",
               libswd_error_string((libswd_error_code_t)res) );
    return res;
 8004c4c:	69fb      	ldr	r3, [r7, #28]
}
 8004c4e:	0018      	movs	r0, r3
 8004c50:	46bd      	mov	sp, r7
 8004c52:	b009      	add	sp, #36	; 0x24
 8004c54:	bd90      	pop	{r4, r7, pc}
 8004c56:	46c0      	nop			; (mov r8, r8)
 8004c58:	0800b4b0 	.word	0x0800b4b0
 8004c5c:	0800b510 	.word	0x0800b510

08004c60 <libswd_memap_read_int>:
* \param addr is the start address of the data to read with MEM-AP.
* \param count is the number of words to read.
* \param *data is the pointer to int array where result will be stored.
* \return number of elements/words processed or LIBSWD_ERROR code on failure.
*/
int libswd_memap_read_int(libswd_ctx_t *libswdctx, libswd_operation_t operation, int addr, int count, int *data){
 8004c60:	b590      	push	{r4, r7, lr}
 8004c62:	b08f      	sub	sp, #60	; 0x3c
 8004c64:	af04      	add	r7, sp, #16
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	607a      	str	r2, [r7, #4]
 8004c6a:	603b      	str	r3, [r7, #0]
 8004c6c:	200b      	movs	r0, #11
 8004c6e:	183b      	adds	r3, r7, r0
 8004c70:	1c0a      	adds	r2, r1, #0
 8004c72:	701a      	strb	r2, [r3, #0]
    libswd_log(libswdctx, LIBSWD_LOGLEVEL_DEBUG,
 8004c74:	183b      	adds	r3, r7, r0
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	0018      	movs	r0, r3
 8004c7a:	f7ff fbfb 	bl	8004474 <libswd_operation_string>
 8004c7e:	0004      	movs	r4, r0
 8004c80:	68f9      	ldr	r1, [r7, #12]
 8004c82:	4a78      	ldr	r2, [pc, #480]	; (8004e64 <libswd_memap_read_int+0x204>)
 8004c84:	68f8      	ldr	r0, [r7, #12]
 8004c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c88:	9303      	str	r3, [sp, #12]
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	9302      	str	r3, [sp, #8]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	9301      	str	r3, [sp, #4]
 8004c92:	9400      	str	r4, [sp, #0]
 8004c94:	000b      	movs	r3, r1
 8004c96:	2105      	movs	r1, #5
 8004c98:	f7ff fba8 	bl	80043ec <libswd_log>
               "LIBSWD_D: Entering libswd_memap_read_int(*libswdctx=%p, operation=%s, addr=0x%08X, count=0x%08X, *data=%p)...\n",
               (void*)libswdctx, libswd_operation_string(operation),
               addr, count, (void**)data);
    
    if (libswdctx==NULL) return LIBSWD_ERROR_NULLCONTEXT;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d102      	bne.n	8004ca8 <libswd_memap_read_int+0x48>
 8004ca2:	230a      	movs	r3, #10
 8004ca4:	425b      	negs	r3, r3
 8004ca6:	e0d8      	b.n	8004e5a <libswd_memap_read_int+0x1fa>
    if (operation!=LIBSWD_OPERATION_ENQUEUE && operation!=LIBSWD_OPERATION_EXECUTE)
 8004ca8:	220b      	movs	r2, #11
 8004caa:	18bb      	adds	r3, r7, r2
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d006      	beq.n	8004cc0 <libswd_memap_read_int+0x60>
 8004cb2:	18bb      	adds	r3, r7, r2
 8004cb4:	781b      	ldrb	r3, [r3, #0]
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d002      	beq.n	8004cc0 <libswd_memap_read_int+0x60>
        return LIBSWD_ERROR_BADOPCODE;
 8004cba:	2318      	movs	r3, #24
 8004cbc:	425b      	negs	r3, r3
 8004cbe:	e0cc      	b.n	8004e5a <libswd_memap_read_int+0x1fa>
    int i, loc, res, memapdrw;
    //float tdeltam;
    //struct timeval tstart, tstop;
    
    // Initialize MEM-AP if necessary.
    if (!libswdctx->log.memap.initialized)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	223d      	movs	r2, #61	; 0x3d
 8004cc4:	5c9b      	ldrb	r3, [r3, r2]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d10d      	bne.n	8004ce6 <libswd_memap_read_int+0x86>
    {
        res=libswd_memap_init(libswdctx, operation);
 8004cca:	230b      	movs	r3, #11
 8004ccc:	18fb      	adds	r3, r7, r3
 8004cce:	781a      	ldrb	r2, [r3, #0]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	0011      	movs	r1, r2
 8004cd4:	0018      	movs	r0, r3
 8004cd6:	f7ff fe55 	bl	8004984 <libswd_memap_init>
 8004cda:	0003      	movs	r3, r0
 8004cdc:	61fb      	str	r3, [r7, #28]
        if (res<0) goto libswd_memap_read_int_error;
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	da00      	bge.n	8004ce6 <libswd_memap_read_int+0x86>
 8004ce4:	e0a4      	b.n	8004e30 <libswd_memap_read_int+0x1d0>
    
    // Mark start time for transfer speed measurement.
    //gettimeofday(&tstart, NULL);
    
    // Perform word-by-word read operation and store result into int array.
    if (!(libswdctx->log.memap.csw&LIBSWD_MEMAP_CSW_ADDRINC))
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cea:	2230      	movs	r2, #48	; 0x30
 8004cec:	4013      	ands	r3, r2
 8004cee:	d147      	bne.n	8004d80 <libswd_memap_read_int+0x120>
    {
        // Use manual TAR incrementation (slower).
        for (i=0;i<count;i++)
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	627b      	str	r3, [r7, #36]	; 0x24
 8004cf4:	e039      	b.n	8004d6a <libswd_memap_read_int+0x10a>
        {
            loc=addr+i*4;
 8004cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	18d3      	adds	r3, r2, r3
 8004cfe:	623b      	str	r3, [r7, #32]
            // Measure transfer speed.
            //gettimeofday(&tstop, NULL);
            //tdeltam=fabsf((tstop.tv_sec-tstart.tv_sec)*1000+(tstop.tv_usec-tstart.tv_usec)/1000);
            libswd_log(libswdctx, LIBSWD_LOGLEVEL_INFO,
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	6a39      	ldr	r1, [r7, #32]
 8004d06:	4a58      	ldr	r2, [pc, #352]	; (8004e68 <libswd_memap_read_int+0x208>)
 8004d08:	68f8      	ldr	r0, [r7, #12]
 8004d0a:	9300      	str	r3, [sp, #0]
 8004d0c:	000b      	movs	r3, r1
 8004d0e:	2104      	movs	r1, #4
 8004d10:	f7ff fb6c 	bl	80043ec <libswd_log>
                       "LIBSWD_I: libswd_memap_read_int() reading address 0x%08X (speed %fKB/s)\r",
                       loc, count*4/*/tdeltam*/ );
            fflush(0);
 8004d14:	2000      	movs	r0, #0
 8004d16:	f002 ff95 	bl	8007c44 <fflush>
            // Pass address to TAR register.
            res=libswd_ap_write(libswdctx, LIBSWD_OPERATION_EXECUTE, LIBSWD_MEMAP_TAR_ADDR, loc);
 8004d1a:	6a3b      	ldr	r3, [r7, #32]
 8004d1c:	68f8      	ldr	r0, [r7, #12]
 8004d1e:	2204      	movs	r2, #4
 8004d20:	2102      	movs	r1, #2
 8004d22:	f7fd ffe3 	bl	8002cec <libswd_ap_write>
 8004d26:	0003      	movs	r3, r0
 8004d28:	61fb      	str	r3, [r7, #28]
            if (res<0) goto libswd_memap_read_int_error;
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	da00      	bge.n	8004d32 <libswd_memap_read_int+0xd2>
 8004d30:	e080      	b.n	8004e34 <libswd_memap_read_int+0x1d4>
            libswdctx->log.memap.tar=loc;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	6a3a      	ldr	r2, [r7, #32]
 8004d36:	645a      	str	r2, [r3, #68]	; 0x44
            // Read data from DRW register.
            res=libswd_ap_read(libswdctx, LIBSWD_OPERATION_EXECUTE, LIBSWD_MEMAP_DRW_ADDR, &memapdrw);
 8004d38:	2310      	movs	r3, #16
 8004d3a:	18fb      	adds	r3, r7, r3
 8004d3c:	68f8      	ldr	r0, [r7, #12]
 8004d3e:	220c      	movs	r2, #12
 8004d40:	2102      	movs	r1, #2
 8004d42:	f7fd fe47 	bl	80029d4 <libswd_ap_read>
 8004d46:	0003      	movs	r3, r0
 8004d48:	61fb      	str	r3, [r7, #28]
            if (res<0) goto libswd_memap_read_int_error;
 8004d4a:	69fb      	ldr	r3, [r7, #28]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	da00      	bge.n	8004d52 <libswd_memap_read_int+0xf2>
 8004d50:	e072      	b.n	8004e38 <libswd_memap_read_int+0x1d8>
            libswdctx->log.memap.drw=memapdrw;
 8004d52:	693a      	ldr	r2, [r7, #16]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	649a      	str	r2, [r3, #72]	; 0x48
            data[i]=memapdrw;
 8004d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d5e:	18d3      	adds	r3, r2, r3
 8004d60:	693a      	ldr	r2, [r7, #16]
 8004d62:	601a      	str	r2, [r3, #0]
        for (i=0;i<count;i++)
 8004d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d66:	3301      	adds	r3, #1
 8004d68:	627b      	str	r3, [r7, #36]	; 0x24
 8004d6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	dbc1      	blt.n	8004cf6 <libswd_memap_read_int+0x96>
        }
        libswd_log(libswdctx, LIBSWD_LOGLEVEL_INFO, "\n");
 8004d72:	4a3e      	ldr	r2, [pc, #248]	; (8004e6c <libswd_memap_read_int+0x20c>)
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2104      	movs	r1, #4
 8004d78:	0018      	movs	r0, r3
 8004d7a:	f7ff fb37 	bl	80043ec <libswd_log>
 8004d7e:	e055      	b.n	8004e2c <libswd_memap_read_int+0x1cc>
        // Use TAR Auto Increment (faster).
        // TAR auto increment is only guaranteed to work on the bottom 10 bits
        // of the TAR register. Above that it is implementation defined.
        // We use 1024 byte chunks as it will work on every platform
        // and one TAR write every 1024 bytes is not adding too much overhead.
        const unsigned int BOUNDARY = 1024;
 8004d80:	2380      	movs	r3, #128	; 0x80
 8004d82:	00db      	lsls	r3, r3, #3
 8004d84:	617b      	str	r3, [r7, #20]
        unsigned int i;
        
        for (loc = addr, i = 0; loc < (addr + (count * 4)); loc += 4, i++)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	623b      	str	r3, [r7, #32]
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	61bb      	str	r3, [r7, #24]
 8004d8e:	e040      	b.n	8004e12 <libswd_memap_read_int+0x1b2>
        {
            // only write the TAR register, if this is the first time through the loop.
            // or if we've passed over the boundary where TAR auto inc isn't guaranteed
            // to work anymore.
            if (loc == addr ||
 8004d90:	6a3a      	ldr	r2, [r7, #32]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d006      	beq.n	8004da6 <libswd_memap_read_int+0x146>
                (loc % BOUNDARY) == 0)
 8004d98:	6a3b      	ldr	r3, [r7, #32]
 8004d9a:	6979      	ldr	r1, [r7, #20]
 8004d9c:	0018      	movs	r0, r3
 8004d9e:	f7fb fa4b 	bl	8000238 <__aeabi_uidivmod>
 8004da2:	1e0b      	subs	r3, r1, #0
            if (loc == addr ||
 8004da4:	d10d      	bne.n	8004dc2 <libswd_memap_read_int+0x162>
            {
                // Pass address to TAR register.
                res=libswd_ap_write(libswdctx, LIBSWD_OPERATION_EXECUTE, LIBSWD_MEMAP_TAR_ADDR, loc);
 8004da6:	6a3b      	ldr	r3, [r7, #32]
 8004da8:	68f8      	ldr	r0, [r7, #12]
 8004daa:	2204      	movs	r2, #4
 8004dac:	2102      	movs	r1, #2
 8004dae:	f7fd ff9d 	bl	8002cec <libswd_ap_write>
 8004db2:	0003      	movs	r3, r0
 8004db4:	61fb      	str	r3, [r7, #28]
                if (res<0) goto libswd_memap_read_int_error;
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	db3f      	blt.n	8004e3c <libswd_memap_read_int+0x1dc>
                libswdctx->log.memap.tar=loc;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6a3a      	ldr	r2, [r7, #32]
 8004dc0:	645a      	str	r2, [r3, #68]	; 0x44
            }
            
            // Measure transfer speed.
            //gettimeofday(&tstop, NULL);
            //tdeltam=fabsf((tstop.tv_sec-tstart.tv_sec)*1000+(tstop.tv_usec-tstart.tv_usec)/1000);
            libswd_log(libswdctx, LIBSWD_LOGLEVEL_INFO,
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	6a39      	ldr	r1, [r7, #32]
 8004dc8:	4a27      	ldr	r2, [pc, #156]	; (8004e68 <libswd_memap_read_int+0x208>)
 8004dca:	68f8      	ldr	r0, [r7, #12]
 8004dcc:	9300      	str	r3, [sp, #0]
 8004dce:	000b      	movs	r3, r1
 8004dd0:	2104      	movs	r1, #4
 8004dd2:	f7ff fb0b 	bl	80043ec <libswd_log>
                       "LIBSWD_I: libswd_memap_read_int() reading address 0x%08X (speed %fKB/s)\r",
                       loc, count*4/*/tdeltam*/ );
            fflush(0);
 8004dd6:	2000      	movs	r0, #0
 8004dd8:	f002 ff34 	bl	8007c44 <fflush>
            
            // Read data from the DRW register.
            res=libswd_ap_read(libswdctx, LIBSWD_OPERATION_EXECUTE, LIBSWD_MEMAP_DRW_ADDR, &memapdrw);
 8004ddc:	2310      	movs	r3, #16
 8004dde:	18fb      	adds	r3, r7, r3
 8004de0:	68f8      	ldr	r0, [r7, #12]
 8004de2:	220c      	movs	r2, #12
 8004de4:	2102      	movs	r1, #2
 8004de6:	f7fd fdf5 	bl	80029d4 <libswd_ap_read>
 8004dea:	0003      	movs	r3, r0
 8004dec:	61fb      	str	r3, [r7, #28]
            if (res<0) goto libswd_memap_read_int_error;
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	db25      	blt.n	8004e40 <libswd_memap_read_int+0x1e0>
            libswdctx->log.memap.drw=memapdrw;
 8004df4:	693a      	ldr	r2, [r7, #16]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	649a      	str	r2, [r3, #72]	; 0x48
            data[i]=memapdrw;
 8004dfa:	69bb      	ldr	r3, [r7, #24]
 8004dfc:	009b      	lsls	r3, r3, #2
 8004dfe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e00:	18d3      	adds	r3, r2, r3
 8004e02:	693a      	ldr	r2, [r7, #16]
 8004e04:	601a      	str	r2, [r3, #0]
        for (loc = addr, i = 0; loc < (addr + (count * 4)); loc += 4, i++)
 8004e06:	6a3b      	ldr	r3, [r7, #32]
 8004e08:	3304      	adds	r3, #4
 8004e0a:	623b      	str	r3, [r7, #32]
 8004e0c:	69bb      	ldr	r3, [r7, #24]
 8004e0e:	3301      	adds	r3, #1
 8004e10:	61bb      	str	r3, [r7, #24]
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	009a      	lsls	r2, r3, #2
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	18d3      	adds	r3, r2, r3
 8004e1a:	6a3a      	ldr	r2, [r7, #32]
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	dbb7      	blt.n	8004d90 <libswd_memap_read_int+0x130>
        }
        libswd_log(libswdctx, LIBSWD_LOGLEVEL_INFO, "\n");
 8004e20:	4a12      	ldr	r2, [pc, #72]	; (8004e6c <libswd_memap_read_int+0x20c>)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2104      	movs	r1, #4
 8004e26:	0018      	movs	r0, r3
 8004e28:	f7ff fae0 	bl	80043ec <libswd_log>
    }
    
    return LIBSWD_OK;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	e014      	b.n	8004e5a <libswd_memap_read_int+0x1fa>
        if (res<0) goto libswd_memap_read_int_error;
 8004e30:	46c0      	nop			; (mov r8, r8)
 8004e32:	e006      	b.n	8004e42 <libswd_memap_read_int+0x1e2>
            if (res<0) goto libswd_memap_read_int_error;
 8004e34:	46c0      	nop			; (mov r8, r8)
 8004e36:	e004      	b.n	8004e42 <libswd_memap_read_int+0x1e2>
            if (res<0) goto libswd_memap_read_int_error;
 8004e38:	46c0      	nop			; (mov r8, r8)
 8004e3a:	e002      	b.n	8004e42 <libswd_memap_read_int+0x1e2>
                if (res<0) goto libswd_memap_read_int_error;
 8004e3c:	46c0      	nop			; (mov r8, r8)
 8004e3e:	e000      	b.n	8004e42 <libswd_memap_read_int+0x1e2>
            if (res<0) goto libswd_memap_read_int_error;
 8004e40:	46c0      	nop			; (mov r8, r8)
    
libswd_memap_read_int_error:
    libswd_log(libswdctx, LIBSWD_LOGLEVEL_ERROR,
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	b25b      	sxtb	r3, r3
 8004e46:	0018      	movs	r0, r3
 8004e48:	f7fe fd78 	bl	800393c <libswd_error_string>
 8004e4c:	0003      	movs	r3, r0
 8004e4e:	4a08      	ldr	r2, [pc, #32]	; (8004e70 <libswd_memap_read_int+0x210>)
 8004e50:	68f8      	ldr	r0, [r7, #12]
 8004e52:	2102      	movs	r1, #2
 8004e54:	f7ff faca 	bl	80043ec <libswd_log>
               "\nLIBSWD_E: libswd_memap_read_int(): %s\n",
               libswd_error_string((libswd_error_code_t)res) );
    return res;
 8004e58:	69fb      	ldr	r3, [r7, #28]
}
 8004e5a:	0018      	movs	r0, r3
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	b00b      	add	sp, #44	; 0x2c
 8004e60:	bd90      	pop	{r4, r7, pc}
 8004e62:	46c0      	nop			; (mov r8, r8)
 8004e64:	0800b75c 	.word	0x0800b75c
 8004e68:	0800b7cc 	.word	0x0800b7cc
 8004e6c:	0800b608 	.word	0x0800b608
 8004e70:	0800b818 	.word	0x0800b818

08004e74 <libswd_memap_read_int_csw>:
* \param count is the number of words to read.
* \param *data is the pointer to int array where result will be stored.
* \param csw is the value of csw register to write prior data write.
* \return number of elements/words processed or LIBSWD_ERROR code on failure.
*/
int libswd_memap_read_int_csw(libswd_ctx_t *libswdctx, libswd_operation_t operation, int addr, int count, int *data, int csw){
 8004e74:	b5b0      	push	{r4, r5, r7, lr}
 8004e76:	b08c      	sub	sp, #48	; 0x30
 8004e78:	af06      	add	r7, sp, #24
 8004e7a:	60f8      	str	r0, [r7, #12]
 8004e7c:	607a      	str	r2, [r7, #4]
 8004e7e:	603b      	str	r3, [r7, #0]
 8004e80:	200b      	movs	r0, #11
 8004e82:	183b      	adds	r3, r7, r0
 8004e84:	1c0a      	adds	r2, r1, #0
 8004e86:	701a      	strb	r2, [r3, #0]
    libswd_log(libswdctx, LIBSWD_LOGLEVEL_DEBUG,
 8004e88:	183b      	adds	r3, r7, r0
 8004e8a:	781b      	ldrb	r3, [r3, #0]
 8004e8c:	0018      	movs	r0, r3
 8004e8e:	f7ff faf1 	bl	8004474 <libswd_operation_string>
 8004e92:	0004      	movs	r4, r0
 8004e94:	68f9      	ldr	r1, [r7, #12]
 8004e96:	4a39      	ldr	r2, [pc, #228]	; (8004f7c <libswd_memap_read_int_csw+0x108>)
 8004e98:	68f8      	ldr	r0, [r7, #12]
 8004e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e9c:	9304      	str	r3, [sp, #16]
 8004e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea0:	9303      	str	r3, [sp, #12]
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	9302      	str	r3, [sp, #8]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	9301      	str	r3, [sp, #4]
 8004eaa:	9400      	str	r4, [sp, #0]
 8004eac:	000b      	movs	r3, r1
 8004eae:	2105      	movs	r1, #5
 8004eb0:	f7ff fa9c 	bl	80043ec <libswd_log>
               "LIBSWD_D: Entering libswd_memap_read_int_csw(*libswdctx=%p, operation=%s, addr=0x%08X, count=0x%08X, *data=%p, csw=0x%X)...\n",
               (void*)libswdctx, libswd_operation_string(operation),
               addr, count, (void**)data, csw );
    
    if (libswdctx==NULL) return LIBSWD_ERROR_NULLCONTEXT;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d102      	bne.n	8004ec0 <libswd_memap_read_int_csw+0x4c>
 8004eba:	230a      	movs	r3, #10
 8004ebc:	425b      	negs	r3, r3
 8004ebe:	e059      	b.n	8004f74 <libswd_memap_read_int_csw+0x100>
    if (operation!=LIBSWD_OPERATION_ENQUEUE && operation!=LIBSWD_OPERATION_EXECUTE)
 8004ec0:	220b      	movs	r2, #11
 8004ec2:	18bb      	adds	r3, r7, r2
 8004ec4:	781b      	ldrb	r3, [r3, #0]
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d006      	beq.n	8004ed8 <libswd_memap_read_int_csw+0x64>
 8004eca:	18bb      	adds	r3, r7, r2
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	2b02      	cmp	r3, #2
 8004ed0:	d002      	beq.n	8004ed8 <libswd_memap_read_int_csw+0x64>
        return LIBSWD_ERROR_BADOPCODE;
 8004ed2:	2318      	movs	r3, #24
 8004ed4:	425b      	negs	r3, r3
 8004ed6:	e04d      	b.n	8004f74 <libswd_memap_read_int_csw+0x100>
    
    int res=0;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	617b      	str	r3, [r7, #20]
    
    // Calculate required access size based on CSW value.
    switch (csw&LIBSWD_MEMAP_CSW_SIZE)
 8004edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ede:	2207      	movs	r2, #7
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	2b02      	cmp	r3, #2
 8004ee4:	d903      	bls.n	8004eee <libswd_memap_read_int_csw+0x7a>
    case LIBSWD_MEMAP_CSW_SIZE_8BIT:
    case LIBSWD_MEMAP_CSW_SIZE_16BIT:
    case LIBSWD_MEMAP_CSW_SIZE_32BIT:
        break;
    default:
        res=LIBSWD_ERROR_MEMAPACCSIZE;
 8004ee6:	232f      	movs	r3, #47	; 0x2f
 8004ee8:	425b      	negs	r3, r3
 8004eea:	617b      	str	r3, [r7, #20]
        goto libswd_memap_read_int_csw_error;
 8004eec:	e036      	b.n	8004f5c <libswd_memap_read_int_csw+0xe8>
        break;
 8004eee:	46c0      	nop			; (mov r8, r8)
    }
    
    // Initialize MEM-AP if necessary.
    if (!libswdctx->log.memap.initialized)
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	223d      	movs	r2, #61	; 0x3d
 8004ef4:	5c9b      	ldrb	r3, [r3, r2]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d10c      	bne.n	8004f14 <libswd_memap_read_int_csw+0xa0>
    {
        res=libswd_memap_init(libswdctx, operation);
 8004efa:	230b      	movs	r3, #11
 8004efc:	18fb      	adds	r3, r7, r3
 8004efe:	781a      	ldrb	r2, [r3, #0]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	0011      	movs	r1, r2
 8004f04:	0018      	movs	r0, r3
 8004f06:	f7ff fd3d 	bl	8004984 <libswd_memap_init>
 8004f0a:	0003      	movs	r3, r0
 8004f0c:	617b      	str	r3, [r7, #20]
        if (res<0) goto libswd_memap_read_int_csw_error;
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	db1e      	blt.n	8004f52 <libswd_memap_read_int_csw+0xde>
    }
    
    // Setup MEM-AP CSW and TAR.
    res=libswd_memap_setup(libswdctx, operation, csw, addr);
 8004f14:	687c      	ldr	r4, [r7, #4]
 8004f16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f18:	250b      	movs	r5, #11
 8004f1a:	197b      	adds	r3, r7, r5
 8004f1c:	7819      	ldrb	r1, [r3, #0]
 8004f1e:	68f8      	ldr	r0, [r7, #12]
 8004f20:	0023      	movs	r3, r4
 8004f22:	f7ff fdf7 	bl	8004b14 <libswd_memap_setup>
 8004f26:	0003      	movs	r3, r0
 8004f28:	617b      	str	r3, [r7, #20]
    if (res<0) goto libswd_memap_read_int_csw_error;
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	db12      	blt.n	8004f56 <libswd_memap_read_int_csw+0xe2>
    
    // Perform the read operation.
    res=libswd_memap_read_int(libswdctx, operation, addr, count, data);
 8004f30:	683c      	ldr	r4, [r7, #0]
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	197b      	adds	r3, r7, r5
 8004f36:	7819      	ldrb	r1, [r3, #0]
 8004f38:	68f8      	ldr	r0, [r7, #12]
 8004f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f3c:	9300      	str	r3, [sp, #0]
 8004f3e:	0023      	movs	r3, r4
 8004f40:	f7ff fe8e 	bl	8004c60 <libswd_memap_read_int>
 8004f44:	0003      	movs	r3, r0
 8004f46:	617b      	str	r3, [r7, #20]
    if (res<0) goto libswd_memap_read_int_csw_error;
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	db05      	blt.n	8004f5a <libswd_memap_read_int_csw+0xe6>
    
    return LIBSWD_OK;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	e010      	b.n	8004f74 <libswd_memap_read_int_csw+0x100>
        if (res<0) goto libswd_memap_read_int_csw_error;
 8004f52:	46c0      	nop			; (mov r8, r8)
 8004f54:	e002      	b.n	8004f5c <libswd_memap_read_int_csw+0xe8>
    if (res<0) goto libswd_memap_read_int_csw_error;
 8004f56:	46c0      	nop			; (mov r8, r8)
 8004f58:	e000      	b.n	8004f5c <libswd_memap_read_int_csw+0xe8>
    if (res<0) goto libswd_memap_read_int_csw_error;
 8004f5a:	46c0      	nop			; (mov r8, r8)
    
libswd_memap_read_int_csw_error:
    libswd_log(libswdctx, LIBSWD_LOGLEVEL_ERROR,
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	b25b      	sxtb	r3, r3
 8004f60:	0018      	movs	r0, r3
 8004f62:	f7fe fceb 	bl	800393c <libswd_error_string>
 8004f66:	0003      	movs	r3, r0
 8004f68:	4a05      	ldr	r2, [pc, #20]	; (8004f80 <libswd_memap_read_int_csw+0x10c>)
 8004f6a:	68f8      	ldr	r0, [r7, #12]
 8004f6c:	2102      	movs	r1, #2
 8004f6e:	f7ff fa3d 	bl	80043ec <libswd_log>
               "\nLIBSWD_E: libswd_memap_read_int_csw(): %s\n",
               libswd_error_string((libswd_error_code_t)res) );
    return res;
 8004f72:	697b      	ldr	r3, [r7, #20]
}
 8004f74:	0018      	movs	r0, r3
 8004f76:	46bd      	mov	sp, r7
 8004f78:	b006      	add	sp, #24
 8004f7a:	bdb0      	pop	{r4, r5, r7, pc}
 8004f7c:	0800b840 	.word	0x0800b840
 8004f80:	0800b8c0 	.word	0x0800b8c0

08004f84 <libswd_memap_read_int_32>:
* \param count is the number of words to read.
* \param *data is the pointer to int array where result will be stored.
* \param csw is the value of csw register to write prior data write.
* \return number of elements/words processed or LIBSWD_ERROR code on failure.
*/
int libswd_memap_read_int_32(libswd_ctx_t *libswdctx, libswd_operation_t operation, int addr, int count, int *data){
 8004f84:	b5b0      	push	{r4, r5, r7, lr}
 8004f86:	b088      	sub	sp, #32
 8004f88:	af04      	add	r7, sp, #16
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	607a      	str	r2, [r7, #4]
 8004f8e:	603b      	str	r3, [r7, #0]
 8004f90:	250b      	movs	r5, #11
 8004f92:	197b      	adds	r3, r7, r5
 8004f94:	1c0a      	adds	r2, r1, #0
 8004f96:	701a      	strb	r2, [r3, #0]
    libswd_log(libswdctx, LIBSWD_LOGLEVEL_DEBUG,
 8004f98:	197b      	adds	r3, r7, r5
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	0018      	movs	r0, r3
 8004f9e:	f7ff fa69 	bl	8004474 <libswd_operation_string>
 8004fa2:	0004      	movs	r4, r0
 8004fa4:	68f9      	ldr	r1, [r7, #12]
 8004fa6:	4a0f      	ldr	r2, [pc, #60]	; (8004fe4 <libswd_memap_read_int_32+0x60>)
 8004fa8:	68f8      	ldr	r0, [r7, #12]
 8004faa:	6a3b      	ldr	r3, [r7, #32]
 8004fac:	9303      	str	r3, [sp, #12]
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	9302      	str	r3, [sp, #8]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	9301      	str	r3, [sp, #4]
 8004fb6:	9400      	str	r4, [sp, #0]
 8004fb8:	000b      	movs	r3, r1
 8004fba:	2105      	movs	r1, #5
 8004fbc:	f7ff fa16 	bl	80043ec <libswd_log>
               "LIBSWD_D: Entering libswd_memap_read_int_32(*libswdctx=%p, operation=%s, addr=0x%08X, count=0x%08X, *data=%p)...\n",
               (void*)libswdctx, libswd_operation_string(operation),
               addr, count, (void**)data);
    
    return libswd_memap_read_int_csw(libswdctx, operation, addr, count, data, LIBSWD_MEMAP_CSW_SIZE_32BIT|LIBSWD_MEMAP_CSW_ADDRINC_SINGLE);
 8004fc0:	683c      	ldr	r4, [r7, #0]
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	197b      	adds	r3, r7, r5
 8004fc6:	7819      	ldrb	r1, [r3, #0]
 8004fc8:	68f8      	ldr	r0, [r7, #12]
 8004fca:	2312      	movs	r3, #18
 8004fcc:	9301      	str	r3, [sp, #4]
 8004fce:	6a3b      	ldr	r3, [r7, #32]
 8004fd0:	9300      	str	r3, [sp, #0]
 8004fd2:	0023      	movs	r3, r4
 8004fd4:	f7ff ff4e 	bl	8004e74 <libswd_memap_read_int_csw>
 8004fd8:	0003      	movs	r3, r0
}
 8004fda:	0018      	movs	r0, r3
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	b004      	add	sp, #16
 8004fe0:	bdb0      	pop	{r4, r5, r7, pc}
 8004fe2:	46c0      	nop			; (mov r8, r8)
 8004fe4:	0800b8ec 	.word	0x0800b8ec

08004fe8 <libswd_memap_write_int>:
* \param addr is the start address of the data to write with MEM-AP.
* \param count is the number of words to write.
* \param *data is the pointer to int data array to be written.
* \return number of elements/words processed or LIBSWD_ERROR code on failure.
*/
int libswd_memap_write_int(libswd_ctx_t *libswdctx, libswd_operation_t operation, int addr, int count, int *data){
 8004fe8:	b590      	push	{r4, r7, lr}
 8004fea:	b08f      	sub	sp, #60	; 0x3c
 8004fec:	af04      	add	r7, sp, #16
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	607a      	str	r2, [r7, #4]
 8004ff2:	603b      	str	r3, [r7, #0]
 8004ff4:	200b      	movs	r0, #11
 8004ff6:	183b      	adds	r3, r7, r0
 8004ff8:	1c0a      	adds	r2, r1, #0
 8004ffa:	701a      	strb	r2, [r3, #0]
    libswd_log(libswdctx, LIBSWD_LOGLEVEL_DEBUG,
 8004ffc:	183b      	adds	r3, r7, r0
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	0018      	movs	r0, r3
 8005002:	f7ff fa37 	bl	8004474 <libswd_operation_string>
 8005006:	0004      	movs	r4, r0
 8005008:	68f9      	ldr	r1, [r7, #12]
 800500a:	4a78      	ldr	r2, [pc, #480]	; (80051ec <libswd_memap_write_int+0x204>)
 800500c:	68f8      	ldr	r0, [r7, #12]
 800500e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005010:	9303      	str	r3, [sp, #12]
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	9302      	str	r3, [sp, #8]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	9301      	str	r3, [sp, #4]
 800501a:	9400      	str	r4, [sp, #0]
 800501c:	000b      	movs	r3, r1
 800501e:	2105      	movs	r1, #5
 8005020:	f7ff f9e4 	bl	80043ec <libswd_log>
               "LIBSWD_D: Entering libswd_memap_write_int(*libswdctx=%p, operation=%s, addr=0x%08X, count=0x%08X, **data=%p)...\n",
               (void*)libswdctx, libswd_operation_string(operation),
               addr, count, (void*)data);
    
    if (libswdctx==NULL) return LIBSWD_ERROR_NULLCONTEXT;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d102      	bne.n	8005030 <libswd_memap_write_int+0x48>
 800502a:	230a      	movs	r3, #10
 800502c:	425b      	negs	r3, r3
 800502e:	e0d9      	b.n	80051e4 <libswd_memap_write_int+0x1fc>
    if (operation!=LIBSWD_OPERATION_ENQUEUE && operation!=LIBSWD_OPERATION_EXECUTE)
 8005030:	220b      	movs	r2, #11
 8005032:	18bb      	adds	r3, r7, r2
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	2b01      	cmp	r3, #1
 8005038:	d006      	beq.n	8005048 <libswd_memap_write_int+0x60>
 800503a:	18bb      	adds	r3, r7, r2
 800503c:	781b      	ldrb	r3, [r3, #0]
 800503e:	2b02      	cmp	r3, #2
 8005040:	d002      	beq.n	8005048 <libswd_memap_write_int+0x60>
        return LIBSWD_ERROR_BADOPCODE;
 8005042:	2318      	movs	r3, #24
 8005044:	425b      	negs	r3, r3
 8005046:	e0cd      	b.n	80051e4 <libswd_memap_write_int+0x1fc>
    
    int i, loc, res=0;
 8005048:	2300      	movs	r3, #0
 800504a:	61fb      	str	r3, [r7, #28]
    //float tdeltam;
    //struct timeval tstart, tstop;
    
    // Initialize MEM-AP if necessary.
    if (!libswdctx->log.memap.initialized)
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	223d      	movs	r2, #61	; 0x3d
 8005050:	5c9b      	ldrb	r3, [r3, r2]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d10d      	bne.n	8005072 <libswd_memap_write_int+0x8a>
    {
        res=libswd_memap_init(libswdctx, operation);
 8005056:	230b      	movs	r3, #11
 8005058:	18fb      	adds	r3, r7, r3
 800505a:	781a      	ldrb	r2, [r3, #0]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	0011      	movs	r1, r2
 8005060:	0018      	movs	r0, r3
 8005062:	f7ff fc8f 	bl	8004984 <libswd_memap_init>
 8005066:	0003      	movs	r3, r0
 8005068:	61fb      	str	r3, [r7, #28]
        if (res<0) goto libswd_memap_write_int_error;
 800506a:	69fb      	ldr	r3, [r7, #28]
 800506c:	2b00      	cmp	r3, #0
 800506e:	da00      	bge.n	8005072 <libswd_memap_write_int+0x8a>
 8005070:	e0a3      	b.n	80051ba <libswd_memap_write_int+0x1d2>
    
    // Mark start time for transfer speed measurement.
    //gettimeofday(&tstart, NULL);
    
    // Perform word-by-word write operation from int array.
    if (!(libswdctx->log.memap.csw&LIBSWD_MEMAP_CSW_ADDRINC))
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005076:	2230      	movs	r2, #48	; 0x30
 8005078:	4013      	ands	r3, r2
 800507a:	d148      	bne.n	800510e <libswd_memap_write_int+0x126>
    {
        // Use manual TAR incrementation (slower).
        for (i=0;i<count;i++)
 800507c:	2300      	movs	r3, #0
 800507e:	627b      	str	r3, [r7, #36]	; 0x24
 8005080:	e03a      	b.n	80050f8 <libswd_memap_write_int+0x110>
        {
            loc=addr+i*4;
 8005082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	687a      	ldr	r2, [r7, #4]
 8005088:	18d3      	adds	r3, r2, r3
 800508a:	623b      	str	r3, [r7, #32]
            // Measure transfer speed.
            //gettimeofday(&tstop, NULL);
            //tdeltam=fabsf((tstop.tv_sec-tstart.tv_sec)*1000+(tstop.tv_usec-tstart.tv_usec)/1000);
            libswd_log(libswdctx, LIBSWD_LOGLEVEL_INFO,
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	6a39      	ldr	r1, [r7, #32]
 8005092:	4a57      	ldr	r2, [pc, #348]	; (80051f0 <libswd_memap_write_int+0x208>)
 8005094:	68f8      	ldr	r0, [r7, #12]
 8005096:	9300      	str	r3, [sp, #0]
 8005098:	000b      	movs	r3, r1
 800509a:	2104      	movs	r1, #4
 800509c:	f7ff f9a6 	bl	80043ec <libswd_log>
                       "LIBSWD_I: libswd_memap_write_int() writing address 0x%08X (speed %fKB/s)\r",
                       loc, count*4/*/tdeltam*/ );
            fflush(0);
 80050a0:	2000      	movs	r0, #0
 80050a2:	f002 fdcf 	bl	8007c44 <fflush>
            // Pass address to TAR register.
            res=libswd_ap_write(libswdctx, LIBSWD_OPERATION_EXECUTE, LIBSWD_MEMAP_TAR_ADDR, loc);
 80050a6:	6a3b      	ldr	r3, [r7, #32]
 80050a8:	68f8      	ldr	r0, [r7, #12]
 80050aa:	2204      	movs	r2, #4
 80050ac:	2102      	movs	r1, #2
 80050ae:	f7fd fe1d 	bl	8002cec <libswd_ap_write>
 80050b2:	0003      	movs	r3, r0
 80050b4:	61fb      	str	r3, [r7, #28]
            if (res<0) goto libswd_memap_write_int_error;
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	da00      	bge.n	80050be <libswd_memap_write_int+0xd6>
 80050bc:	e07f      	b.n	80051be <libswd_memap_write_int+0x1d6>
            libswdctx->log.memap.tar=loc;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	6a3a      	ldr	r2, [r7, #32]
 80050c2:	645a      	str	r2, [r3, #68]	; 0x44
            // Implode and Write data to DRW register.
            res=libswd_ap_write(libswdctx, LIBSWD_OPERATION_EXECUTE, LIBSWD_MEMAP_DRW_ADDR, data[i]);
 80050c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80050ca:	18d3      	adds	r3, r2, r3
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	68f8      	ldr	r0, [r7, #12]
 80050d0:	220c      	movs	r2, #12
 80050d2:	2102      	movs	r1, #2
 80050d4:	f7fd fe0a 	bl	8002cec <libswd_ap_write>
 80050d8:	0003      	movs	r3, r0
 80050da:	61fb      	str	r3, [r7, #28]
            if (res<0) goto libswd_memap_write_int_error;
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	da00      	bge.n	80050e4 <libswd_memap_write_int+0xfc>
 80050e2:	e06e      	b.n	80051c2 <libswd_memap_write_int+0x1da>
            libswdctx->log.memap.drw=data[i];
 80050e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80050ea:	18d3      	adds	r3, r2, r3
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	649a      	str	r2, [r3, #72]	; 0x48
        for (i=0;i<count;i++)
 80050f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f4:	3301      	adds	r3, #1
 80050f6:	627b      	str	r3, [r7, #36]	; 0x24
 80050f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	429a      	cmp	r2, r3
 80050fe:	dbc0      	blt.n	8005082 <libswd_memap_write_int+0x9a>
        }
        libswd_log(libswdctx, LIBSWD_LOGLEVEL_INFO, "\n");
 8005100:	4a3c      	ldr	r2, [pc, #240]	; (80051f4 <libswd_memap_write_int+0x20c>)
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2104      	movs	r1, #4
 8005106:	0018      	movs	r0, r3
 8005108:	f7ff f970 	bl	80043ec <libswd_log>
 800510c:	e053      	b.n	80051b6 <libswd_memap_write_int+0x1ce>
        // Use TAR Auto Increment (faster).
        // TAR auto increment is only guaranteed to work on the bottom 10 bits
        // of the TAR register. Above that it is implementation defined.
        // We use 1024 byte chunks as it will work on every platform
        // and one TAR write every 1024 bytes is not adding too much overhead.
        const unsigned int BOUNDARY = 1024;
 800510e:	2380      	movs	r3, #128	; 0x80
 8005110:	00db      	lsls	r3, r3, #3
 8005112:	617b      	str	r3, [r7, #20]
        unsigned int i;
        
        for (loc = addr, i = 0; loc < (addr + (count * 4)); loc += 4, i++)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	623b      	str	r3, [r7, #32]
 8005118:	2300      	movs	r3, #0
 800511a:	61bb      	str	r3, [r7, #24]
 800511c:	e03e      	b.n	800519c <libswd_memap_write_int+0x1b4>
        {
            // only write the TAR register, if this is the first time through the loop.
            // or if we've passed over the boundary where TAR auto inc isn't guaranteed
            // to work anymore.
            if (loc == addr ||
 800511e:	6a3a      	ldr	r2, [r7, #32]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	429a      	cmp	r2, r3
 8005124:	d006      	beq.n	8005134 <libswd_memap_write_int+0x14c>
                (loc % BOUNDARY) == 0)
 8005126:	6a3b      	ldr	r3, [r7, #32]
 8005128:	6979      	ldr	r1, [r7, #20]
 800512a:	0018      	movs	r0, r3
 800512c:	f7fb f884 	bl	8000238 <__aeabi_uidivmod>
 8005130:	1e0b      	subs	r3, r1, #0
            if (loc == addr ||
 8005132:	d10d      	bne.n	8005150 <libswd_memap_write_int+0x168>
            {
                // Pass address to TAR register.
                res=libswd_ap_write(libswdctx, LIBSWD_OPERATION_EXECUTE, LIBSWD_MEMAP_TAR_ADDR, loc);
 8005134:	6a3b      	ldr	r3, [r7, #32]
 8005136:	68f8      	ldr	r0, [r7, #12]
 8005138:	2204      	movs	r2, #4
 800513a:	2102      	movs	r1, #2
 800513c:	f7fd fdd6 	bl	8002cec <libswd_ap_write>
 8005140:	0003      	movs	r3, r0
 8005142:	61fb      	str	r3, [r7, #28]
                if (res<0) goto libswd_memap_write_int_error;
 8005144:	69fb      	ldr	r3, [r7, #28]
 8005146:	2b00      	cmp	r3, #0
 8005148:	db3d      	blt.n	80051c6 <libswd_memap_write_int+0x1de>
                libswdctx->log.memap.tar=loc;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6a3a      	ldr	r2, [r7, #32]
 800514e:	645a      	str	r2, [r3, #68]	; 0x44
            }
            
            // Measure transfer speed.
            //gettimeofday(&tstop, NULL);
            //tdeltam=fabsf((tstop.tv_sec-tstart.tv_sec)*1000+(tstop.tv_usec-tstart.tv_usec)/1000);
            libswd_log(libswdctx, LIBSWD_LOGLEVEL_INFO,
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	6a39      	ldr	r1, [r7, #32]
 8005156:	4a26      	ldr	r2, [pc, #152]	; (80051f0 <libswd_memap_write_int+0x208>)
 8005158:	68f8      	ldr	r0, [r7, #12]
 800515a:	9300      	str	r3, [sp, #0]
 800515c:	000b      	movs	r3, r1
 800515e:	2104      	movs	r1, #4
 8005160:	f7ff f944 	bl	80043ec <libswd_log>
                       "LIBSWD_I: libswd_memap_write_int() writing address 0x%08X (speed %fKB/s)\r",
                       loc, count*4/*/tdeltam*/ );
            fflush(0);
 8005164:	2000      	movs	r0, #0
 8005166:	f002 fd6d 	bl	8007c44 <fflush>
            
            // Write data to DRW register.
            libswdctx->log.memap.drw=data[i];
 800516a:	69bb      	ldr	r3, [r7, #24]
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005170:	18d3      	adds	r3, r2, r3
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	649a      	str	r2, [r3, #72]	; 0x48
            res=libswd_ap_write(libswdctx, LIBSWD_OPERATION_EXECUTE, LIBSWD_MEMAP_DRW_ADDR, libswdctx->log.memap.drw);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800517c:	68f8      	ldr	r0, [r7, #12]
 800517e:	220c      	movs	r2, #12
 8005180:	2102      	movs	r1, #2
 8005182:	f7fd fdb3 	bl	8002cec <libswd_ap_write>
 8005186:	0003      	movs	r3, r0
 8005188:	61fb      	str	r3, [r7, #28]
            if (res<0) goto libswd_memap_write_int_error;
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	2b00      	cmp	r3, #0
 800518e:	db1c      	blt.n	80051ca <libswd_memap_write_int+0x1e2>
        for (loc = addr, i = 0; loc < (addr + (count * 4)); loc += 4, i++)
 8005190:	6a3b      	ldr	r3, [r7, #32]
 8005192:	3304      	adds	r3, #4
 8005194:	623b      	str	r3, [r7, #32]
 8005196:	69bb      	ldr	r3, [r7, #24]
 8005198:	3301      	adds	r3, #1
 800519a:	61bb      	str	r3, [r7, #24]
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	009a      	lsls	r2, r3, #2
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	18d3      	adds	r3, r2, r3
 80051a4:	6a3a      	ldr	r2, [r7, #32]
 80051a6:	429a      	cmp	r2, r3
 80051a8:	dbb9      	blt.n	800511e <libswd_memap_write_int+0x136>
        }
        libswd_log(libswdctx, LIBSWD_LOGLEVEL_INFO, "\n");
 80051aa:	4a12      	ldr	r2, [pc, #72]	; (80051f4 <libswd_memap_write_int+0x20c>)
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2104      	movs	r1, #4
 80051b0:	0018      	movs	r0, r3
 80051b2:	f7ff f91b 	bl	80043ec <libswd_log>
    }
    
    return LIBSWD_OK;
 80051b6:	2300      	movs	r3, #0
 80051b8:	e014      	b.n	80051e4 <libswd_memap_write_int+0x1fc>
        if (res<0) goto libswd_memap_write_int_error;
 80051ba:	46c0      	nop			; (mov r8, r8)
 80051bc:	e006      	b.n	80051cc <libswd_memap_write_int+0x1e4>
            if (res<0) goto libswd_memap_write_int_error;
 80051be:	46c0      	nop			; (mov r8, r8)
 80051c0:	e004      	b.n	80051cc <libswd_memap_write_int+0x1e4>
            if (res<0) goto libswd_memap_write_int_error;
 80051c2:	46c0      	nop			; (mov r8, r8)
 80051c4:	e002      	b.n	80051cc <libswd_memap_write_int+0x1e4>
                if (res<0) goto libswd_memap_write_int_error;
 80051c6:	46c0      	nop			; (mov r8, r8)
 80051c8:	e000      	b.n	80051cc <libswd_memap_write_int+0x1e4>
            if (res<0) goto libswd_memap_write_int_error;
 80051ca:	46c0      	nop			; (mov r8, r8)
    
libswd_memap_write_int_error:
    libswd_log(libswdctx, LIBSWD_LOGLEVEL_ERROR,
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	b25b      	sxtb	r3, r3
 80051d0:	0018      	movs	r0, r3
 80051d2:	f7fe fbb3 	bl	800393c <libswd_error_string>
 80051d6:	0003      	movs	r3, r0
 80051d8:	4a07      	ldr	r2, [pc, #28]	; (80051f8 <libswd_memap_write_int+0x210>)
 80051da:	68f8      	ldr	r0, [r7, #12]
 80051dc:	2102      	movs	r1, #2
 80051de:	f7ff f905 	bl	80043ec <libswd_log>
               "\nLIBSWD_E: libswd_memap_write_int(): %s\n",
               libswd_error_string((libswd_error_code_t)res) );
    return res;
 80051e2:	69fb      	ldr	r3, [r7, #28]
}
 80051e4:	0018      	movs	r0, r3
 80051e6:	46bd      	mov	sp, r7
 80051e8:	b00b      	add	sp, #44	; 0x2c
 80051ea:	bd90      	pop	{r4, r7, pc}
 80051ec:	0800bb74 	.word	0x0800bb74
 80051f0:	0800bbe8 	.word	0x0800bbe8
 80051f4:	0800b608 	.word	0x0800b608
 80051f8:	0800bc34 	.word	0x0800bc34

080051fc <libswd_memap_write_int_csw>:
* \param count is the number of words to write.
* \param *data is the pointer to int data array to be written.
* \param csw is the value of csw register to write prior data write.
* \return number of elements/words processed or LIBSWD_ERROR code on failure.
*/
int libswd_memap_write_int_csw(libswd_ctx_t *libswdctx, libswd_operation_t operation, int addr, int count, int *data, int csw){
 80051fc:	b5b0      	push	{r4, r5, r7, lr}
 80051fe:	b08c      	sub	sp, #48	; 0x30
 8005200:	af06      	add	r7, sp, #24
 8005202:	60f8      	str	r0, [r7, #12]
 8005204:	607a      	str	r2, [r7, #4]
 8005206:	603b      	str	r3, [r7, #0]
 8005208:	200b      	movs	r0, #11
 800520a:	183b      	adds	r3, r7, r0
 800520c:	1c0a      	adds	r2, r1, #0
 800520e:	701a      	strb	r2, [r3, #0]
    libswd_log(libswdctx, LIBSWD_LOGLEVEL_DEBUG,
 8005210:	183b      	adds	r3, r7, r0
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	0018      	movs	r0, r3
 8005216:	f7ff f92d 	bl	8004474 <libswd_operation_string>
 800521a:	0004      	movs	r4, r0
 800521c:	68f9      	ldr	r1, [r7, #12]
 800521e:	4a39      	ldr	r2, [pc, #228]	; (8005304 <libswd_memap_write_int_csw+0x108>)
 8005220:	68f8      	ldr	r0, [r7, #12]
 8005222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005224:	9304      	str	r3, [sp, #16]
 8005226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005228:	9303      	str	r3, [sp, #12]
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	9302      	str	r3, [sp, #8]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	9301      	str	r3, [sp, #4]
 8005232:	9400      	str	r4, [sp, #0]
 8005234:	000b      	movs	r3, r1
 8005236:	2105      	movs	r1, #5
 8005238:	f7ff f8d8 	bl	80043ec <libswd_log>
               "LIBSWD_D: Entering libswd_memap_write_int_csw(*libswdctx=%p, operation=%s, addr=0x%08X, count=0x%08X, **data=%p, csw=0x%X)...\n",
               (void*)libswdctx, libswd_operation_string(operation),
               addr, count, (void**)data, csw );
    
    if (libswdctx==NULL) return LIBSWD_ERROR_NULLCONTEXT;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d102      	bne.n	8005248 <libswd_memap_write_int_csw+0x4c>
 8005242:	230a      	movs	r3, #10
 8005244:	425b      	negs	r3, r3
 8005246:	e059      	b.n	80052fc <libswd_memap_write_int_csw+0x100>
    if (operation!=LIBSWD_OPERATION_ENQUEUE && operation!=LIBSWD_OPERATION_EXECUTE)
 8005248:	220b      	movs	r2, #11
 800524a:	18bb      	adds	r3, r7, r2
 800524c:	781b      	ldrb	r3, [r3, #0]
 800524e:	2b01      	cmp	r3, #1
 8005250:	d006      	beq.n	8005260 <libswd_memap_write_int_csw+0x64>
 8005252:	18bb      	adds	r3, r7, r2
 8005254:	781b      	ldrb	r3, [r3, #0]
 8005256:	2b02      	cmp	r3, #2
 8005258:	d002      	beq.n	8005260 <libswd_memap_write_int_csw+0x64>
        return LIBSWD_ERROR_BADOPCODE;
 800525a:	2318      	movs	r3, #24
 800525c:	425b      	negs	r3, r3
 800525e:	e04d      	b.n	80052fc <libswd_memap_write_int_csw+0x100>
    
    int res=0;
 8005260:	2300      	movs	r3, #0
 8005262:	617b      	str	r3, [r7, #20]
    
    // Calculate required access size based on CSW value.
    switch (csw&LIBSWD_MEMAP_CSW_SIZE)
 8005264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005266:	2207      	movs	r2, #7
 8005268:	4013      	ands	r3, r2
 800526a:	2b02      	cmp	r3, #2
 800526c:	d903      	bls.n	8005276 <libswd_memap_write_int_csw+0x7a>
    case LIBSWD_MEMAP_CSW_SIZE_8BIT:
    case LIBSWD_MEMAP_CSW_SIZE_16BIT:
    case LIBSWD_MEMAP_CSW_SIZE_32BIT:
        break;
    default:
        res=LIBSWD_ERROR_MEMAPACCSIZE;
 800526e:	232f      	movs	r3, #47	; 0x2f
 8005270:	425b      	negs	r3, r3
 8005272:	617b      	str	r3, [r7, #20]
        goto libswd_memap_write_int_csw_error;
 8005274:	e036      	b.n	80052e4 <libswd_memap_write_int_csw+0xe8>
        break;
 8005276:	46c0      	nop			; (mov r8, r8)
    }
    
    // Initialize MEM-AP if necessary.
    if (!libswdctx->log.memap.initialized)
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	223d      	movs	r2, #61	; 0x3d
 800527c:	5c9b      	ldrb	r3, [r3, r2]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d10c      	bne.n	800529c <libswd_memap_write_int_csw+0xa0>
    {
        res=libswd_memap_init(libswdctx, operation);
 8005282:	230b      	movs	r3, #11
 8005284:	18fb      	adds	r3, r7, r3
 8005286:	781a      	ldrb	r2, [r3, #0]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	0011      	movs	r1, r2
 800528c:	0018      	movs	r0, r3
 800528e:	f7ff fb79 	bl	8004984 <libswd_memap_init>
 8005292:	0003      	movs	r3, r0
 8005294:	617b      	str	r3, [r7, #20]
        if (res<0) goto libswd_memap_write_int_csw_error;
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	2b00      	cmp	r3, #0
 800529a:	db1e      	blt.n	80052da <libswd_memap_write_int_csw+0xde>
    }
    
    // Setup MEM-AP CSW and TAR.
    res=libswd_memap_setup(libswdctx, operation, csw, addr);
 800529c:	687c      	ldr	r4, [r7, #4]
 800529e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052a0:	250b      	movs	r5, #11
 80052a2:	197b      	adds	r3, r7, r5
 80052a4:	7819      	ldrb	r1, [r3, #0]
 80052a6:	68f8      	ldr	r0, [r7, #12]
 80052a8:	0023      	movs	r3, r4
 80052aa:	f7ff fc33 	bl	8004b14 <libswd_memap_setup>
 80052ae:	0003      	movs	r3, r0
 80052b0:	617b      	str	r3, [r7, #20]
    if (res<0) goto libswd_memap_write_int_csw_error;
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	db12      	blt.n	80052de <libswd_memap_write_int_csw+0xe2>
    
    // Perform the write operation.
    res=libswd_memap_write_int(libswdctx, operation, addr, count, data);
 80052b8:	683c      	ldr	r4, [r7, #0]
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	197b      	adds	r3, r7, r5
 80052be:	7819      	ldrb	r1, [r3, #0]
 80052c0:	68f8      	ldr	r0, [r7, #12]
 80052c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c4:	9300      	str	r3, [sp, #0]
 80052c6:	0023      	movs	r3, r4
 80052c8:	f7ff fe8e 	bl	8004fe8 <libswd_memap_write_int>
 80052cc:	0003      	movs	r3, r0
 80052ce:	617b      	str	r3, [r7, #20]
    if (res<0) goto libswd_memap_write_int_csw_error;
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	db05      	blt.n	80052e2 <libswd_memap_write_int_csw+0xe6>
    
    return LIBSWD_OK;
 80052d6:	2300      	movs	r3, #0
 80052d8:	e010      	b.n	80052fc <libswd_memap_write_int_csw+0x100>
        if (res<0) goto libswd_memap_write_int_csw_error;
 80052da:	46c0      	nop			; (mov r8, r8)
 80052dc:	e002      	b.n	80052e4 <libswd_memap_write_int_csw+0xe8>
    if (res<0) goto libswd_memap_write_int_csw_error;
 80052de:	46c0      	nop			; (mov r8, r8)
 80052e0:	e000      	b.n	80052e4 <libswd_memap_write_int_csw+0xe8>
    if (res<0) goto libswd_memap_write_int_csw_error;
 80052e2:	46c0      	nop			; (mov r8, r8)
    
libswd_memap_write_int_csw_error:
    libswd_log(libswdctx, LIBSWD_LOGLEVEL_ERROR,
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	b25b      	sxtb	r3, r3
 80052e8:	0018      	movs	r0, r3
 80052ea:	f7fe fb27 	bl	800393c <libswd_error_string>
 80052ee:	0003      	movs	r3, r0
 80052f0:	4a05      	ldr	r2, [pc, #20]	; (8005308 <libswd_memap_write_int_csw+0x10c>)
 80052f2:	68f8      	ldr	r0, [r7, #12]
 80052f4:	2102      	movs	r1, #2
 80052f6:	f7ff f879 	bl	80043ec <libswd_log>
               "\nLIBSWD_E: libswd_memap_write_int_csw(): %s\n",
               libswd_error_string((libswd_error_code_t)res) );
    return res;
 80052fa:	697b      	ldr	r3, [r7, #20]
}
 80052fc:	0018      	movs	r0, r3
 80052fe:	46bd      	mov	sp, r7
 8005300:	b006      	add	sp, #24
 8005302:	bdb0      	pop	{r4, r5, r7, pc}
 8005304:	0800bc60 	.word	0x0800bc60
 8005308:	0800bce0 	.word	0x0800bce0

0800530c <libswd_memap_write_int_32>:
* \param addr is the start address of the data to write with MEM-AP.
* \param count is the number of words to write.
* \param *data is the pointer to int data array to be written.
* \return number of elements/words processed or LIBSWD_ERROR code on failure.
*/
int libswd_memap_write_int_32(libswd_ctx_t *libswdctx, libswd_operation_t operation, int addr, int count, int *data){
 800530c:	b5b0      	push	{r4, r5, r7, lr}
 800530e:	b088      	sub	sp, #32
 8005310:	af04      	add	r7, sp, #16
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	607a      	str	r2, [r7, #4]
 8005316:	603b      	str	r3, [r7, #0]
 8005318:	250b      	movs	r5, #11
 800531a:	197b      	adds	r3, r7, r5
 800531c:	1c0a      	adds	r2, r1, #0
 800531e:	701a      	strb	r2, [r3, #0]
    libswd_log(libswdctx, LIBSWD_LOGLEVEL_DEBUG,
 8005320:	197b      	adds	r3, r7, r5
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	0018      	movs	r0, r3
 8005326:	f7ff f8a5 	bl	8004474 <libswd_operation_string>
 800532a:	0004      	movs	r4, r0
 800532c:	68f9      	ldr	r1, [r7, #12]
 800532e:	4a0f      	ldr	r2, [pc, #60]	; (800536c <libswd_memap_write_int_32+0x60>)
 8005330:	68f8      	ldr	r0, [r7, #12]
 8005332:	6a3b      	ldr	r3, [r7, #32]
 8005334:	9303      	str	r3, [sp, #12]
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	9302      	str	r3, [sp, #8]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	9301      	str	r3, [sp, #4]
 800533e:	9400      	str	r4, [sp, #0]
 8005340:	000b      	movs	r3, r1
 8005342:	2105      	movs	r1, #5
 8005344:	f7ff f852 	bl	80043ec <libswd_log>
               "LIBSWD_D: Entering libswd_memap_write_int_32(*libswdctx=%p, operation=%s, addr=0x%08X, count=0x%08X, *data=%p)...\n",
               (void*)libswdctx, libswd_operation_string(operation),
               addr, count, (void*)data);
    
    return libswd_memap_write_int_csw(libswdctx, operation, addr, count, data, LIBSWD_MEMAP_CSW_SIZE_32BIT|LIBSWD_MEMAP_CSW_ADDRINC_SINGLE);
 8005348:	683c      	ldr	r4, [r7, #0]
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	197b      	adds	r3, r7, r5
 800534e:	7819      	ldrb	r1, [r3, #0]
 8005350:	68f8      	ldr	r0, [r7, #12]
 8005352:	2312      	movs	r3, #18
 8005354:	9301      	str	r3, [sp, #4]
 8005356:	6a3b      	ldr	r3, [r7, #32]
 8005358:	9300      	str	r3, [sp, #0]
 800535a:	0023      	movs	r3, r4
 800535c:	f7ff ff4e 	bl	80051fc <libswd_memap_write_int_csw>
 8005360:	0003      	movs	r3, r0
}
 8005362:	0018      	movs	r0, r3
 8005364:	46bd      	mov	sp, r7
 8005366:	b004      	add	sp, #16
 8005368:	bdb0      	pop	{r4, r5, r7, pc}
 800536a:	46c0      	nop			; (mov r8, r8)
 800536c:	0800bd10 	.word	0x0800bd10

08005370 <libswd_memap_write_int_32_val>:
* \param operation can be LIBSWD_OPERATION_ENQUEUE or LIBSWD_OPERATION_EXECUTE.
* \param addr is the start address of the data to write with MEM-AP.
* \param data is int data to be written.
* \return number of elements/words processed or LIBSWD_ERROR code on failure.
*/
int libswd_memap_write_int_32_val(libswd_ctx_t *libswdctx, libswd_operation_t operation, int addr, int data){
 8005370:	b5b0      	push	{r4, r5, r7, lr}
 8005372:	b088      	sub	sp, #32
 8005374:	af04      	add	r7, sp, #16
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	607a      	str	r2, [r7, #4]
 800537a:	603b      	str	r3, [r7, #0]
 800537c:	250b      	movs	r5, #11
 800537e:	197b      	adds	r3, r7, r5
 8005380:	1c0a      	adds	r2, r1, #0
 8005382:	701a      	strb	r2, [r3, #0]
    libswd_log(libswdctx, LIBSWD_LOGLEVEL_DEBUG,
 8005384:	197b      	adds	r3, r7, r5
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	0018      	movs	r0, r3
 800538a:	f7ff f873 	bl	8004474 <libswd_operation_string>
 800538e:	0004      	movs	r4, r0
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	68f9      	ldr	r1, [r7, #12]
 8005394:	4a0c      	ldr	r2, [pc, #48]	; (80053c8 <libswd_memap_write_int_32_val+0x58>)
 8005396:	68f8      	ldr	r0, [r7, #12]
 8005398:	9302      	str	r3, [sp, #8]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	9301      	str	r3, [sp, #4]
 800539e:	9400      	str	r4, [sp, #0]
 80053a0:	000b      	movs	r3, r1
 80053a2:	2105      	movs	r1, #5
 80053a4:	f7ff f822 	bl	80043ec <libswd_log>
               "LIBSWD_D: Entering libswd_memap_write_int_32_val(*libswdctx=%p, operation=%s, addr=0x%08X, data=%p)...\n",
               (void*)libswdctx, libswd_operation_string(operation),
               addr, data);
    
    return libswd_memap_write_int_csw(libswdctx, operation, addr, 1, &data, LIBSWD_MEMAP_CSW_SIZE_32BIT|LIBSWD_MEMAP_CSW_ADDRINC_SINGLE);
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	197b      	adds	r3, r7, r5
 80053ac:	7819      	ldrb	r1, [r3, #0]
 80053ae:	68f8      	ldr	r0, [r7, #12]
 80053b0:	2312      	movs	r3, #18
 80053b2:	9301      	str	r3, [sp, #4]
 80053b4:	003b      	movs	r3, r7
 80053b6:	9300      	str	r3, [sp, #0]
 80053b8:	2301      	movs	r3, #1
 80053ba:	f7ff ff1f 	bl	80051fc <libswd_memap_write_int_csw>
 80053be:	0003      	movs	r3, r0
}
 80053c0:	0018      	movs	r0, r3
 80053c2:	46bd      	mov	sp, r7
 80053c4:	b004      	add	sp, #16
 80053c6:	bdb0      	pop	{r4, r5, r7, pc}
 80053c8:	0800bd84 	.word	0x0800bd84

080053cc <Delay>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

extern void Delay(uint16_t delay)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b082      	sub	sp, #8
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	0002      	movs	r2, r0
 80053d4:	1dbb      	adds	r3, r7, #6
 80053d6:	801a      	strh	r2, [r3, #0]
__HAL_TIM_SET_COUNTER(&htim2,0);
 80053d8:	4b08      	ldr	r3, [pc, #32]	; (80053fc <Delay+0x30>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	2200      	movs	r2, #0
 80053de:	625a      	str	r2, [r3, #36]	; 0x24
while(__HAL_TIM_GET_COUNTER(&htim2) < delay);
 80053e0:	46c0      	nop			; (mov r8, r8)
 80053e2:	4b06      	ldr	r3, [pc, #24]	; (80053fc <Delay+0x30>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80053e8:	1dbb      	adds	r3, r7, #6
 80053ea:	881b      	ldrh	r3, [r3, #0]
 80053ec:	429a      	cmp	r2, r3
 80053ee:	d3f8      	bcc.n	80053e2 <Delay+0x16>
}
 80053f0:	46c0      	nop			; (mov r8, r8)
 80053f2:	46c0      	nop			; (mov r8, r8)
 80053f4:	46bd      	mov	sp, r7
 80053f6:	b002      	add	sp, #8
 80053f8:	bd80      	pop	{r7, pc}
 80053fa:	46c0      	nop			; (mov r8, r8)
 80053fc:	200003a0 	.word	0x200003a0

08005400 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b086      	sub	sp, #24
 8005404:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005406:	f000 ffa9 	bl	800635c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800540a:	f000 f83d 	bl	8005488 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800540e:	f000 f8e5 	bl	80055dc <MX_GPIO_Init>
  MX_TIM2_Init();
 8005412:	f000 f88f 	bl	8005534 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  GPIO_InitTypeDef GPIO_InitStruct; /* GPIO Ports Clock Enable */
      __GPIOB_CLK_ENABLE();
 8005416:	4b19      	ldr	r3, [pc, #100]	; (800547c <main+0x7c>)
 8005418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800541a:	4b18      	ldr	r3, [pc, #96]	; (800547c <main+0x7c>)
 800541c:	2102      	movs	r1, #2
 800541e:	430a      	orrs	r2, r1
 8005420:	62da      	str	r2, [r3, #44]	; 0x2c
 8005422:	4b16      	ldr	r3, [pc, #88]	; (800547c <main+0x7c>)
 8005424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005426:	2202      	movs	r2, #2
 8005428:	4013      	ands	r3, r2
 800542a:	603b      	str	r3, [r7, #0]
 800542c:	683b      	ldr	r3, [r7, #0]
      GPIO_InitStruct.Pin = GPIO_PIN_0;
 800542e:	1d3b      	adds	r3, r7, #4
 8005430:	2201      	movs	r2, #1
 8005432:	601a      	str	r2, [r3, #0]
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;     // digital Output
 8005434:	1d3b      	adds	r3, r7, #4
 8005436:	2201      	movs	r2, #1
 8005438:	605a      	str	r2, [r3, #4]
      GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800543a:	1d3b      	adds	r3, r7, #4
 800543c:	2203      	movs	r2, #3
 800543e:	60da      	str	r2, [r3, #12]
      HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005440:	1d3b      	adds	r3, r7, #4
 8005442:	4a0f      	ldr	r2, [pc, #60]	; (8005480 <main+0x80>)
 8005444:	0019      	movs	r1, r3
 8005446:	0010      	movs	r0, r2
 8005448:	f001 f8d6 	bl	80065f8 <HAL_GPIO_Init>

      GPIO_InitStruct.Pin = GPIO_PIN_10;
 800544c:	1d3b      	adds	r3, r7, #4
 800544e:	2280      	movs	r2, #128	; 0x80
 8005450:	00d2      	lsls	r2, r2, #3
 8005452:	601a      	str	r2, [r3, #0]
      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;     // digital input
 8005454:	1d3b      	adds	r3, r7, #4
 8005456:	2200      	movs	r2, #0
 8005458:	605a      	str	r2, [r3, #4]
      GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800545a:	1d3b      	adds	r3, r7, #4
 800545c:	2203      	movs	r2, #3
 800545e:	60da      	str	r2, [r3, #12]
      HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005460:	1d3b      	adds	r3, r7, #4
 8005462:	4a07      	ldr	r2, [pc, #28]	; (8005480 <main+0x80>)
 8005464:	0019      	movs	r1, r3
 8005466:	0010      	movs	r0, r2
 8005468:	f001 f8c6 	bl	80065f8 <HAL_GPIO_Init>
  /* USER CODE END 2 */
      HAL_TIM_Base_Start(&htim2);
 800546c:	4b05      	ldr	r3, [pc, #20]	; (8005484 <main+0x84>)
 800546e:	0018      	movs	r0, r3
 8005470:	f002 f8a2 	bl	80075b8 <HAL_TIM_Base_Start>
      STM32L0_main();
 8005474:	f000 fd34 	bl	8005ee0 <STM32L0_main>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8005478:	e7fe      	b.n	8005478 <main+0x78>
 800547a:	46c0      	nop			; (mov r8, r8)
 800547c:	40021000 	.word	0x40021000
 8005480:	50000400 	.word	0x50000400
 8005484:	200003a0 	.word	0x200003a0

08005488 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005488:	b590      	push	{r4, r7, lr}
 800548a:	b095      	sub	sp, #84	; 0x54
 800548c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800548e:	2418      	movs	r4, #24
 8005490:	193b      	adds	r3, r7, r4
 8005492:	0018      	movs	r0, r3
 8005494:	2338      	movs	r3, #56	; 0x38
 8005496:	001a      	movs	r2, r3
 8005498:	2100      	movs	r1, #0
 800549a:	f002 fd26 	bl	8007eea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800549e:	1d3b      	adds	r3, r7, #4
 80054a0:	0018      	movs	r0, r3
 80054a2:	2314      	movs	r3, #20
 80054a4:	001a      	movs	r2, r3
 80054a6:	2100      	movs	r1, #0
 80054a8:	f002 fd1f 	bl	8007eea <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80054ac:	4b1f      	ldr	r3, [pc, #124]	; (800552c <SystemClock_Config+0xa4>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a1f      	ldr	r2, [pc, #124]	; (8005530 <SystemClock_Config+0xa8>)
 80054b2:	401a      	ands	r2, r3
 80054b4:	4b1d      	ldr	r3, [pc, #116]	; (800552c <SystemClock_Config+0xa4>)
 80054b6:	2180      	movs	r1, #128	; 0x80
 80054b8:	0109      	lsls	r1, r1, #4
 80054ba:	430a      	orrs	r2, r1
 80054bc:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80054be:	0021      	movs	r1, r4
 80054c0:	187b      	adds	r3, r7, r1
 80054c2:	2210      	movs	r2, #16
 80054c4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80054c6:	187b      	adds	r3, r7, r1
 80054c8:	2201      	movs	r2, #1
 80054ca:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80054cc:	187b      	adds	r3, r7, r1
 80054ce:	2200      	movs	r2, #0
 80054d0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80054d2:	187b      	adds	r3, r7, r1
 80054d4:	22a0      	movs	r2, #160	; 0xa0
 80054d6:	0212      	lsls	r2, r2, #8
 80054d8:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80054da:	187b      	adds	r3, r7, r1
 80054dc:	2200      	movs	r2, #0
 80054de:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80054e0:	187b      	adds	r3, r7, r1
 80054e2:	0018      	movs	r0, r3
 80054e4:	f001 fa66 	bl	80069b4 <HAL_RCC_OscConfig>
 80054e8:	1e03      	subs	r3, r0, #0
 80054ea:	d001      	beq.n	80054f0 <SystemClock_Config+0x68>
  {
    Error_Handler();
 80054ec:	f000 f8e2 	bl	80056b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80054f0:	1d3b      	adds	r3, r7, #4
 80054f2:	220f      	movs	r2, #15
 80054f4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80054f6:	1d3b      	adds	r3, r7, #4
 80054f8:	2200      	movs	r2, #0
 80054fa:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80054fc:	1d3b      	adds	r3, r7, #4
 80054fe:	2200      	movs	r2, #0
 8005500:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005502:	1d3b      	adds	r3, r7, #4
 8005504:	22a0      	movs	r2, #160	; 0xa0
 8005506:	00d2      	lsls	r2, r2, #3
 8005508:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800550a:	1d3b      	adds	r3, r7, #4
 800550c:	2200      	movs	r2, #0
 800550e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8005510:	1d3b      	adds	r3, r7, #4
 8005512:	2100      	movs	r1, #0
 8005514:	0018      	movs	r0, r3
 8005516:	f001 fe21 	bl	800715c <HAL_RCC_ClockConfig>
 800551a:	1e03      	subs	r3, r0, #0
 800551c:	d001      	beq.n	8005522 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800551e:	f000 f8c9 	bl	80056b4 <Error_Handler>
  }
}
 8005522:	46c0      	nop			; (mov r8, r8)
 8005524:	46bd      	mov	sp, r7
 8005526:	b015      	add	sp, #84	; 0x54
 8005528:	bd90      	pop	{r4, r7, pc}
 800552a:	46c0      	nop			; (mov r8, r8)
 800552c:	40007000 	.word	0x40007000
 8005530:	ffffe7ff 	.word	0xffffe7ff

08005534 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b086      	sub	sp, #24
 8005538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800553a:	2308      	movs	r3, #8
 800553c:	18fb      	adds	r3, r7, r3
 800553e:	0018      	movs	r0, r3
 8005540:	2310      	movs	r3, #16
 8005542:	001a      	movs	r2, r3
 8005544:	2100      	movs	r1, #0
 8005546:	f002 fcd0 	bl	8007eea <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800554a:	003b      	movs	r3, r7
 800554c:	0018      	movs	r0, r3
 800554e:	2308      	movs	r3, #8
 8005550:	001a      	movs	r2, r3
 8005552:	2100      	movs	r1, #0
 8005554:	f002 fcc9 	bl	8007eea <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005558:	4b1e      	ldr	r3, [pc, #120]	; (80055d4 <MX_TIM2_Init+0xa0>)
 800555a:	2280      	movs	r2, #128	; 0x80
 800555c:	05d2      	lsls	r2, r2, #23
 800555e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8005560:	4b1c      	ldr	r3, [pc, #112]	; (80055d4 <MX_TIM2_Init+0xa0>)
 8005562:	2200      	movs	r2, #0
 8005564:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005566:	4b1b      	ldr	r3, [pc, #108]	; (80055d4 <MX_TIM2_Init+0xa0>)
 8005568:	2200      	movs	r2, #0
 800556a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800556c:	4b19      	ldr	r3, [pc, #100]	; (80055d4 <MX_TIM2_Init+0xa0>)
 800556e:	4a1a      	ldr	r2, [pc, #104]	; (80055d8 <MX_TIM2_Init+0xa4>)
 8005570:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005572:	4b18      	ldr	r3, [pc, #96]	; (80055d4 <MX_TIM2_Init+0xa0>)
 8005574:	2200      	movs	r2, #0
 8005576:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005578:	4b16      	ldr	r3, [pc, #88]	; (80055d4 <MX_TIM2_Init+0xa0>)
 800557a:	2200      	movs	r2, #0
 800557c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800557e:	4b15      	ldr	r3, [pc, #84]	; (80055d4 <MX_TIM2_Init+0xa0>)
 8005580:	0018      	movs	r0, r3
 8005582:	f001 ffd9 	bl	8007538 <HAL_TIM_Base_Init>
 8005586:	1e03      	subs	r3, r0, #0
 8005588:	d001      	beq.n	800558e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800558a:	f000 f893 	bl	80056b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800558e:	2108      	movs	r1, #8
 8005590:	187b      	adds	r3, r7, r1
 8005592:	2280      	movs	r2, #128	; 0x80
 8005594:	0152      	lsls	r2, r2, #5
 8005596:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005598:	187a      	adds	r2, r7, r1
 800559a:	4b0e      	ldr	r3, [pc, #56]	; (80055d4 <MX_TIM2_Init+0xa0>)
 800559c:	0011      	movs	r1, r2
 800559e:	0018      	movs	r0, r3
 80055a0:	f002 f854 	bl	800764c <HAL_TIM_ConfigClockSource>
 80055a4:	1e03      	subs	r3, r0, #0
 80055a6:	d001      	beq.n	80055ac <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80055a8:	f000 f884 	bl	80056b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80055ac:	003b      	movs	r3, r7
 80055ae:	2200      	movs	r2, #0
 80055b0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80055b2:	003b      	movs	r3, r7
 80055b4:	2200      	movs	r2, #0
 80055b6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80055b8:	003a      	movs	r2, r7
 80055ba:	4b06      	ldr	r3, [pc, #24]	; (80055d4 <MX_TIM2_Init+0xa0>)
 80055bc:	0011      	movs	r1, r2
 80055be:	0018      	movs	r0, r3
 80055c0:	f002 fa06 	bl	80079d0 <HAL_TIMEx_MasterConfigSynchronization>
 80055c4:	1e03      	subs	r3, r0, #0
 80055c6:	d001      	beq.n	80055cc <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80055c8:	f000 f874 	bl	80056b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80055cc:	46c0      	nop			; (mov r8, r8)
 80055ce:	46bd      	mov	sp, r7
 80055d0:	b006      	add	sp, #24
 80055d2:	bd80      	pop	{r7, pc}
 80055d4:	200003a0 	.word	0x200003a0
 80055d8:	0000ffff 	.word	0x0000ffff

080055dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80055dc:	b590      	push	{r4, r7, lr}
 80055de:	b089      	sub	sp, #36	; 0x24
 80055e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055e2:	240c      	movs	r4, #12
 80055e4:	193b      	adds	r3, r7, r4
 80055e6:	0018      	movs	r0, r3
 80055e8:	2314      	movs	r3, #20
 80055ea:	001a      	movs	r2, r3
 80055ec:	2100      	movs	r1, #0
 80055ee:	f002 fc7c 	bl	8007eea <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80055f2:	4b2d      	ldr	r3, [pc, #180]	; (80056a8 <MX_GPIO_Init+0xcc>)
 80055f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055f6:	4b2c      	ldr	r3, [pc, #176]	; (80056a8 <MX_GPIO_Init+0xcc>)
 80055f8:	2104      	movs	r1, #4
 80055fa:	430a      	orrs	r2, r1
 80055fc:	62da      	str	r2, [r3, #44]	; 0x2c
 80055fe:	4b2a      	ldr	r3, [pc, #168]	; (80056a8 <MX_GPIO_Init+0xcc>)
 8005600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005602:	2204      	movs	r2, #4
 8005604:	4013      	ands	r3, r2
 8005606:	60bb      	str	r3, [r7, #8]
 8005608:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800560a:	4b27      	ldr	r3, [pc, #156]	; (80056a8 <MX_GPIO_Init+0xcc>)
 800560c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800560e:	4b26      	ldr	r3, [pc, #152]	; (80056a8 <MX_GPIO_Init+0xcc>)
 8005610:	2180      	movs	r1, #128	; 0x80
 8005612:	430a      	orrs	r2, r1
 8005614:	62da      	str	r2, [r3, #44]	; 0x2c
 8005616:	4b24      	ldr	r3, [pc, #144]	; (80056a8 <MX_GPIO_Init+0xcc>)
 8005618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800561a:	2280      	movs	r2, #128	; 0x80
 800561c:	4013      	ands	r3, r2
 800561e:	607b      	str	r3, [r7, #4]
 8005620:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005622:	4b21      	ldr	r3, [pc, #132]	; (80056a8 <MX_GPIO_Init+0xcc>)
 8005624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005626:	4b20      	ldr	r3, [pc, #128]	; (80056a8 <MX_GPIO_Init+0xcc>)
 8005628:	2101      	movs	r1, #1
 800562a:	430a      	orrs	r2, r1
 800562c:	62da      	str	r2, [r3, #44]	; 0x2c
 800562e:	4b1e      	ldr	r3, [pc, #120]	; (80056a8 <MX_GPIO_Init+0xcc>)
 8005630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005632:	2201      	movs	r2, #1
 8005634:	4013      	ands	r3, r2
 8005636:	603b      	str	r3, [r7, #0]
 8005638:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800563a:	23a0      	movs	r3, #160	; 0xa0
 800563c:	05db      	lsls	r3, r3, #23
 800563e:	2200      	movs	r2, #0
 8005640:	2120      	movs	r1, #32
 8005642:	0018      	movs	r0, r3
 8005644:	f001 f973 	bl	800692e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005648:	193b      	adds	r3, r7, r4
 800564a:	2280      	movs	r2, #128	; 0x80
 800564c:	0192      	lsls	r2, r2, #6
 800564e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005650:	193b      	adds	r3, r7, r4
 8005652:	4a16      	ldr	r2, [pc, #88]	; (80056ac <MX_GPIO_Init+0xd0>)
 8005654:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005656:	193b      	adds	r3, r7, r4
 8005658:	2200      	movs	r2, #0
 800565a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800565c:	193b      	adds	r3, r7, r4
 800565e:	4a14      	ldr	r2, [pc, #80]	; (80056b0 <MX_GPIO_Init+0xd4>)
 8005660:	0019      	movs	r1, r3
 8005662:	0010      	movs	r0, r2
 8005664:	f000 ffc8 	bl	80065f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8005668:	0021      	movs	r1, r4
 800566a:	187b      	adds	r3, r7, r1
 800566c:	2220      	movs	r2, #32
 800566e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005670:	187b      	adds	r3, r7, r1
 8005672:	2201      	movs	r2, #1
 8005674:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005676:	187b      	adds	r3, r7, r1
 8005678:	2200      	movs	r2, #0
 800567a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800567c:	187b      	adds	r3, r7, r1
 800567e:	2200      	movs	r2, #0
 8005680:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8005682:	187a      	adds	r2, r7, r1
 8005684:	23a0      	movs	r3, #160	; 0xa0
 8005686:	05db      	lsls	r3, r3, #23
 8005688:	0011      	movs	r1, r2
 800568a:	0018      	movs	r0, r3
 800568c:	f000 ffb4 	bl	80065f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8005690:	2200      	movs	r2, #0
 8005692:	2100      	movs	r1, #0
 8005694:	2007      	movs	r0, #7
 8005696:	f000 ff7d 	bl	8006594 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800569a:	2007      	movs	r0, #7
 800569c:	f000 ff8f 	bl	80065be <HAL_NVIC_EnableIRQ>

}
 80056a0:	46c0      	nop			; (mov r8, r8)
 80056a2:	46bd      	mov	sp, r7
 80056a4:	b009      	add	sp, #36	; 0x24
 80056a6:	bd90      	pop	{r4, r7, pc}
 80056a8:	40021000 	.word	0x40021000
 80056ac:	10110000 	.word	0x10110000
 80056b0:	50000800 	.word	0x50000800

080056b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80056b8:	b672      	cpsid	i
}
 80056ba:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80056bc:	e7fe      	b.n	80056bc <Error_Handler+0x8>

080056be <STM32L0_set_bits>:
#include "libswd.h"

extern int32_t Counter;

int32_t STM32L0_set_bits(libswd_ctx_t *libswdctx, uint32_t addr, uint32_t bits)
{
 80056be:	b580      	push	{r7, lr}
 80056c0:	b088      	sub	sp, #32
 80056c2:	af02      	add	r7, sp, #8
 80056c4:	60f8      	str	r0, [r7, #12]
 80056c6:	60b9      	str	r1, [r7, #8]
 80056c8:	607a      	str	r2, [r7, #4]
    uint32_t value;
    // Read memory address
    int32_t retval = libswd_memap_read_int_32(libswdctx, LIBSWD_OPERATION_EXECUTE, addr, 1, (int*)&value);
 80056ca:	68ba      	ldr	r2, [r7, #8]
 80056cc:	68f8      	ldr	r0, [r7, #12]
 80056ce:	2310      	movs	r3, #16
 80056d0:	18fb      	adds	r3, r7, r3
 80056d2:	9300      	str	r3, [sp, #0]
 80056d4:	2301      	movs	r3, #1
 80056d6:	2102      	movs	r1, #2
 80056d8:	f7ff fc54 	bl	8004f84 <libswd_memap_read_int_32>
 80056dc:	0003      	movs	r3, r0
 80056de:	617b      	str	r3, [r7, #20]
    if (retval < 0)
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	da01      	bge.n	80056ea <STM32L0_set_bits+0x2c>
    {
        return retval;        
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	e00d      	b.n	8005706 <STM32L0_set_bits+0x48>
    }
    // Set bits
    value |= bits; 
 80056ea:	693a      	ldr	r2, [r7, #16]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	613b      	str	r3, [r7, #16]
    // Write the resulting value back
    return libswd_memap_write_int_32(libswdctx, LIBSWD_OPERATION_EXECUTE, addr, 1, (int*)&value);
 80056f2:	68ba      	ldr	r2, [r7, #8]
 80056f4:	68f8      	ldr	r0, [r7, #12]
 80056f6:	2310      	movs	r3, #16
 80056f8:	18fb      	adds	r3, r7, r3
 80056fa:	9300      	str	r3, [sp, #0]
 80056fc:	2301      	movs	r3, #1
 80056fe:	2102      	movs	r1, #2
 8005700:	f7ff fe04 	bl	800530c <libswd_memap_write_int_32>
 8005704:	0003      	movs	r3, r0
}
 8005706:	0018      	movs	r0, r3
 8005708:	46bd      	mov	sp, r7
 800570a:	b006      	add	sp, #24
 800570c:	bd80      	pop	{r7, pc}

0800570e <STM32L0_clear_bits>:

int32_t STM32L0_clear_bits(libswd_ctx_t *libswdctx, uint32_t addr, uint32_t bits)
{
 800570e:	b580      	push	{r7, lr}
 8005710:	b088      	sub	sp, #32
 8005712:	af02      	add	r7, sp, #8
 8005714:	60f8      	str	r0, [r7, #12]
 8005716:	60b9      	str	r1, [r7, #8]
 8005718:	607a      	str	r2, [r7, #4]
    uint32_t value;
    // Read memory address
    int32_t retval = libswd_memap_read_int_32(libswdctx, LIBSWD_OPERATION_EXECUTE, addr, 1, (int*)&value);
 800571a:	68ba      	ldr	r2, [r7, #8]
 800571c:	68f8      	ldr	r0, [r7, #12]
 800571e:	2310      	movs	r3, #16
 8005720:	18fb      	adds	r3, r7, r3
 8005722:	9300      	str	r3, [sp, #0]
 8005724:	2301      	movs	r3, #1
 8005726:	2102      	movs	r1, #2
 8005728:	f7ff fc2c 	bl	8004f84 <libswd_memap_read_int_32>
 800572c:	0003      	movs	r3, r0
 800572e:	617b      	str	r3, [r7, #20]
    if (retval < 0)
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	2b00      	cmp	r3, #0
 8005734:	da01      	bge.n	800573a <STM32L0_clear_bits+0x2c>
    {
        return retval;        
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	e00e      	b.n	8005758 <STM32L0_clear_bits+0x4a>
    }
    // Clear bits
    value &= ~bits; 
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	43db      	mvns	r3, r3
 800573e:	693a      	ldr	r2, [r7, #16]
 8005740:	4013      	ands	r3, r2
 8005742:	613b      	str	r3, [r7, #16]
    // Write the resulting value back
    return libswd_memap_write_int_32(libswdctx, LIBSWD_OPERATION_EXECUTE, addr, 1, (int*)&value);
 8005744:	68ba      	ldr	r2, [r7, #8]
 8005746:	68f8      	ldr	r0, [r7, #12]
 8005748:	2310      	movs	r3, #16
 800574a:	18fb      	adds	r3, r7, r3
 800574c:	9300      	str	r3, [sp, #0]
 800574e:	2301      	movs	r3, #1
 8005750:	2102      	movs	r1, #2
 8005752:	f7ff fddb 	bl	800530c <libswd_memap_write_int_32>
 8005756:	0003      	movs	r3, r0
}
 8005758:	0018      	movs	r0, r3
 800575a:	46bd      	mov	sp, r7
 800575c:	b006      	add	sp, #24
 800575e:	bd80      	pop	{r7, pc}

08005760 <STM32L0_wait_busy>:

int32_t STM32L0_wait_busy(libswd_ctx_t *libswdctx)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b088      	sub	sp, #32
 8005764:	af02      	add	r7, sp, #8
 8005766:	6078      	str	r0, [r7, #4]
    int32_t i;
    uint32_t sr;
    // Wait until the BSY bit is reset in the FLASH_SR register
    for (i = LIBSWD_RETRY_COUNT_DEFAULT; i ; i--)
 8005768:	230a      	movs	r3, #10
 800576a:	617b      	str	r3, [r7, #20]
 800576c:	e01d      	b.n	80057aa <STM32L0_wait_busy+0x4a>
    {
        int32_t retval = libswd_memap_read_int_32(libswdctx, LIBSWD_OPERATION_EXECUTE, STM32L0_FLASH_SR_ADDR, 1, (int*)&sr);
 800576e:	4a13      	ldr	r2, [pc, #76]	; (80057bc <STM32L0_wait_busy+0x5c>)
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	230c      	movs	r3, #12
 8005774:	18fb      	adds	r3, r7, r3
 8005776:	9300      	str	r3, [sp, #0]
 8005778:	2301      	movs	r3, #1
 800577a:	2102      	movs	r1, #2
 800577c:	f7ff fc02 	bl	8004f84 <libswd_memap_read_int_32>
 8005780:	0003      	movs	r3, r0
 8005782:	613b      	str	r3, [r7, #16]
        if (retval < 0) return retval;        
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	2b00      	cmp	r3, #0
 8005788:	da01      	bge.n	800578e <STM32L0_wait_busy+0x2e>
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	e012      	b.n	80057b4 <STM32L0_wait_busy+0x54>
        
        if (!(sr & STM32L0_FLASH_SR_BSY))
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2201      	movs	r2, #1
 8005792:	4013      	ands	r3, r2
 8005794:	d101      	bne.n	800579a <STM32L0_wait_busy+0x3a>
        {
            return LIBSWD_OK;
 8005796:	2300      	movs	r3, #0
 8005798:	e00c      	b.n	80057b4 <STM32L0_wait_busy+0x54>
        }
        Delay(1000);
 800579a:	23fa      	movs	r3, #250	; 0xfa
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	0018      	movs	r0, r3
 80057a0:	f7ff fe14 	bl	80053cc <Delay>
    for (i = LIBSWD_RETRY_COUNT_DEFAULT; i ; i--)
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	3b01      	subs	r3, #1
 80057a8:	617b      	str	r3, [r7, #20]
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d1de      	bne.n	800576e <STM32L0_wait_busy+0xe>
    }
    return LIBSWD_ERROR_MAXRETRY;
 80057b0:	232b      	movs	r3, #43	; 0x2b
 80057b2:	425b      	negs	r3, r3
}
 80057b4:	0018      	movs	r0, r3
 80057b6:	46bd      	mov	sp, r7
 80057b8:	b006      	add	sp, #24
 80057ba:	bd80      	pop	{r7, pc}
 80057bc:	40022018 	.word	0x40022018

080057c0 <STM32L0_option_byte_write>:


int32_t STM32L0_option_byte_write(libswd_ctx_t *libswdctx, uint32_t addr, uint32_t data)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b088      	sub	sp, #32
 80057c4:	af02      	add	r7, sp, #8
 80057c6:	60f8      	str	r0, [r7, #12]
 80057c8:	60b9      	str	r1, [r7, #8]
 80057ca:	607a      	str	r2, [r7, #4]
    // Write a 32-bit word value at the option byte address,
    //uint32_t data = (uint32_t)((~data << 16) | data);
    int32_t retval = libswd_memap_write_int_32(libswdctx, LIBSWD_OPERATION_EXECUTE, addr, 1, (int*)&data);
 80057cc:	68ba      	ldr	r2, [r7, #8]
 80057ce:	68f8      	ldr	r0, [r7, #12]
 80057d0:	1d3b      	adds	r3, r7, #4
 80057d2:	9300      	str	r3, [sp, #0]
 80057d4:	2301      	movs	r3, #1
 80057d6:	2102      	movs	r1, #2
 80057d8:	f7ff fd98 	bl	800530c <libswd_memap_write_int_32>
 80057dc:	0003      	movs	r3, r0
 80057de:	617b      	str	r3, [r7, #20]
    if (retval < 0) 
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	da01      	bge.n	80057ea <STM32L0_option_byte_write+0x2a>
    {
        return retval;
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	e02c      	b.n	8005844 <STM32L0_option_byte_write+0x84>
    }
    
    // Wait until the BSY bit is reset in the FLASH_SR register
    retval = STM32L0_wait_busy(libswdctx);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	0018      	movs	r0, r3
 80057ee:	f7ff ffb7 	bl	8005760 <STM32L0_wait_busy>
 80057f2:	0003      	movs	r3, r0
 80057f4:	617b      	str	r3, [r7, #20]
    if (retval < 0) return retval;        
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	da01      	bge.n	8005800 <STM32L0_option_byte_write+0x40>
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	e021      	b.n	8005844 <STM32L0_option_byte_write+0x84>

    uint32_t sr;
    // Check the EOP flag in the FLASH_SR register
    retval = libswd_memap_read_int_32(libswdctx, LIBSWD_OPERATION_EXECUTE, STM32L0_FLASH_SR_ADDR, 1, (int*)&sr);
 8005800:	4a12      	ldr	r2, [pc, #72]	; (800584c <STM32L0_option_byte_write+0x8c>)
 8005802:	68f8      	ldr	r0, [r7, #12]
 8005804:	2310      	movs	r3, #16
 8005806:	18fb      	adds	r3, r7, r3
 8005808:	9300      	str	r3, [sp, #0]
 800580a:	2301      	movs	r3, #1
 800580c:	2102      	movs	r1, #2
 800580e:	f7ff fbb9 	bl	8004f84 <libswd_memap_read_int_32>
 8005812:	0003      	movs	r3, r0
 8005814:	617b      	str	r3, [r7, #20]
    if (retval < 0) return retval;        
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	2b00      	cmp	r3, #0
 800581a:	da01      	bge.n	8005820 <STM32L0_option_byte_write+0x60>
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	e011      	b.n	8005844 <STM32L0_option_byte_write+0x84>
 
    if ((sr & STM32L0_FLASH_SR_EOP) != 0) 
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	2202      	movs	r2, #2
 8005824:	4013      	ands	r3, r2
 8005826:	d00b      	beq.n	8005840 <STM32L0_option_byte_write+0x80>
    {
        // Clear EOP flag by software by writing EOP at 1 
        data = STM32L0_FLASH_SR_EOP;
 8005828:	2302      	movs	r3, #2
 800582a:	607b      	str	r3, [r7, #4]
        return libswd_memap_write_int_32(libswdctx, LIBSWD_OPERATION_EXECUTE, STM32L0_FLASH_SR_ADDR, 1, (int*)&data);
 800582c:	4a07      	ldr	r2, [pc, #28]	; (800584c <STM32L0_option_byte_write+0x8c>)
 800582e:	68f8      	ldr	r0, [r7, #12]
 8005830:	1d3b      	adds	r3, r7, #4
 8005832:	9300      	str	r3, [sp, #0]
 8005834:	2301      	movs	r3, #1
 8005836:	2102      	movs	r1, #2
 8005838:	f7ff fd68 	bl	800530c <libswd_memap_write_int_32>
 800583c:	0003      	movs	r3, r0
 800583e:	e001      	b.n	8005844 <STM32L0_option_byte_write+0x84>
    } 
    else
    {
        return -102;
 8005840:	2366      	movs	r3, #102	; 0x66
 8005842:	425b      	negs	r3, r3
    }
}
 8005844:	0018      	movs	r0, r3
 8005846:	46bd      	mov	sp, r7
 8005848:	b006      	add	sp, #24
 800584a:	bd80      	pop	{r7, pc}
 800584c:	40022018 	.word	0x40022018

08005850 <STM32L0_option_byte_prog>:

int32_t STM32L0_option_byte_prog(libswd_ctx_t *libswdctx, uint32_t addr, uint16_t data)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b086      	sub	sp, #24
 8005854:	af00      	add	r7, sp, #0
 8005856:	60f8      	str	r0, [r7, #12]
 8005858:	60b9      	str	r1, [r7, #8]
 800585a:	1dbb      	adds	r3, r7, #6
 800585c:	801a      	strh	r2, [r3, #0]
    // Write a 32-bit word value at the option byte address,
    uint32_t data32 = (uint32_t)((~data << 16) | data);
 800585e:	1dbb      	adds	r3, r7, #6
 8005860:	881b      	ldrh	r3, [r3, #0]
 8005862:	43db      	mvns	r3, r3
 8005864:	041a      	lsls	r2, r3, #16
 8005866:	1dbb      	adds	r3, r7, #6
 8005868:	881b      	ldrh	r3, [r3, #0]
 800586a:	4313      	orrs	r3, r2
 800586c:	617b      	str	r3, [r7, #20]
    return STM32L0_option_byte_write(libswdctx, addr, data32);
 800586e:	697a      	ldr	r2, [r7, #20]
 8005870:	68b9      	ldr	r1, [r7, #8]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	0018      	movs	r0, r3
 8005876:	f7ff ffa3 	bl	80057c0 <STM32L0_option_byte_write>
 800587a:	0003      	movs	r3, r0
}
 800587c:	0018      	movs	r0, r3
 800587e:	46bd      	mov	sp, r7
 8005880:	b006      	add	sp, #24
 8005882:	bd80      	pop	{r7, pc}

08005884 <STM32L0_option_byte_erase>:

int32_t STM32L0_option_byte_erase(libswd_ctx_t *libswdctx, uint32_t addr)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b084      	sub	sp, #16
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	6039      	str	r1, [r7, #0]
    // Set the ERASE bit in the FLASH_PECR register to enable option byte erasing 
    int32_t retval = STM32L0_set_bits(libswdctx, STM32L0_FLASH_PECR_ADDR, STM32L0_FLASH_PECR_ERASE);
 800588e:	2380      	movs	r3, #128	; 0x80
 8005890:	009a      	lsls	r2, r3, #2
 8005892:	4912      	ldr	r1, [pc, #72]	; (80058dc <STM32L0_option_byte_erase+0x58>)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	0018      	movs	r0, r3
 8005898:	f7ff ff11 	bl	80056be <STM32L0_set_bits>
 800589c:	0003      	movs	r3, r0
 800589e:	60fb      	str	r3, [r7, #12]
    if (retval < 0)
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	da01      	bge.n	80058aa <STM32L0_option_byte_erase+0x26>
    {
        return retval;        
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	e014      	b.n	80058d4 <STM32L0_option_byte_erase+0x50>
    }

    retval = STM32L0_option_byte_write(libswdctx, 0x1FF80000, 0xFFFF0000);
 80058aa:	4a0d      	ldr	r2, [pc, #52]	; (80058e0 <STM32L0_option_byte_erase+0x5c>)
 80058ac:	490d      	ldr	r1, [pc, #52]	; (80058e4 <STM32L0_option_byte_erase+0x60>)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	0018      	movs	r0, r3
 80058b2:	f7ff ff85 	bl	80057c0 <STM32L0_option_byte_write>
 80058b6:	0003      	movs	r3, r0
 80058b8:	60fb      	str	r3, [r7, #12]
    if (retval < 0) 
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	da01      	bge.n	80058c4 <STM32L0_option_byte_erase+0x40>
    {
        return retval;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	e007      	b.n	80058d4 <STM32L0_option_byte_erase+0x50>
    }
    
    // Reset the ERASE and PROG bits in the FLASH_PECR register to disable the page erase
    return STM32L0_clear_bits(libswdctx, STM32L0_FLASH_PECR_ADDR, STM32L0_FLASH_PECR_ERASE);
 80058c4:	2380      	movs	r3, #128	; 0x80
 80058c6:	009a      	lsls	r2, r3, #2
 80058c8:	4904      	ldr	r1, [pc, #16]	; (80058dc <STM32L0_option_byte_erase+0x58>)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	0018      	movs	r0, r3
 80058ce:	f7ff ff1e 	bl	800570e <STM32L0_clear_bits>
 80058d2:	0003      	movs	r3, r0
}
 80058d4:	0018      	movs	r0, r3
 80058d6:	46bd      	mov	sp, r7
 80058d8:	b004      	add	sp, #16
 80058da:	bd80      	pop	{r7, pc}
 80058dc:	40022004 	.word	0x40022004
 80058e0:	ffff0000 	.word	0xffff0000
 80058e4:	1ff80000 	.word	0x1ff80000

080058e8 <STM32L0_unlock_nvm>:




int32_t STM32L0_unlock_nvm(libswd_ctx_t *libswdctx)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b086      	sub	sp, #24
 80058ec:	af02      	add	r7, sp, #8
 80058ee:	6078      	str	r0, [r7, #4]
    // Wait until the BSY bit is reset in the FLASH_SR register
    int32_t ret = STM32L0_wait_busy(libswdctx);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	0018      	movs	r0, r3
 80058f4:	f7ff ff34 	bl	8005760 <STM32L0_wait_busy>
 80058f8:	0003      	movs	r3, r0
 80058fa:	60fb      	str	r3, [r7, #12]
    if (ret < 0) return ret;  
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	da01      	bge.n	8005906 <STM32L0_unlock_nvm+0x1e>
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	e029      	b.n	800595a <STM32L0_unlock_nvm+0x72>

    uint32_t pecr;
    ret = libswd_memap_read_int_32(libswdctx, LIBSWD_OPERATION_EXECUTE, STM32L0_FLASH_PECR_ADDR, 1, (int*)&pecr);
 8005906:	4a17      	ldr	r2, [pc, #92]	; (8005964 <STM32L0_unlock_nvm+0x7c>)
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	2308      	movs	r3, #8
 800590c:	18fb      	adds	r3, r7, r3
 800590e:	9300      	str	r3, [sp, #0]
 8005910:	2301      	movs	r3, #1
 8005912:	2102      	movs	r1, #2
 8005914:	f7ff fb36 	bl	8004f84 <libswd_memap_read_int_32>
 8005918:	0003      	movs	r3, r0
 800591a:	60fb      	str	r3, [r7, #12]
    if (ret < 0) return ret;        
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2b00      	cmp	r3, #0
 8005920:	da01      	bge.n	8005926 <STM32L0_unlock_nvm+0x3e>
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	e019      	b.n	800595a <STM32L0_unlock_nvm+0x72>
    
    if ((pecr & STM32L0_FLASH_PECR_PELOCK) != 0) 
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	2201      	movs	r2, #1
 800592a:	4013      	ands	r3, r2
 800592c:	d014      	beq.n	8005958 <STM32L0_unlock_nvm+0x70>
    {
        
        ret = libswd_memap_write_int_32_val(libswdctx, LIBSWD_OPERATION_EXECUTE, 
 800592e:	4b0e      	ldr	r3, [pc, #56]	; (8005968 <STM32L0_unlock_nvm+0x80>)
 8005930:	4a0e      	ldr	r2, [pc, #56]	; (800596c <STM32L0_unlock_nvm+0x84>)
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	2102      	movs	r1, #2
 8005936:	f7ff fd1b 	bl	8005370 <libswd_memap_write_int_32_val>
 800593a:	0003      	movs	r3, r0
 800593c:	60fb      	str	r3, [r7, #12]
                                            STM32L0_FLASH_PEKEYR_ADDR, STM32L0_FLASH_PEKEYR_KEY1);
        if (ret < 0) return ret;        
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2b00      	cmp	r3, #0
 8005942:	da01      	bge.n	8005948 <STM32L0_unlock_nvm+0x60>
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	e008      	b.n	800595a <STM32L0_unlock_nvm+0x72>
        
        return libswd_memap_write_int_32_val(libswdctx, LIBSWD_OPERATION_EXECUTE, 
 8005948:	4b09      	ldr	r3, [pc, #36]	; (8005970 <STM32L0_unlock_nvm+0x88>)
 800594a:	4a08      	ldr	r2, [pc, #32]	; (800596c <STM32L0_unlock_nvm+0x84>)
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	2102      	movs	r1, #2
 8005950:	f7ff fd0e 	bl	8005370 <libswd_memap_write_int_32_val>
 8005954:	0003      	movs	r3, r0
 8005956:	e000      	b.n	800595a <STM32L0_unlock_nvm+0x72>
                                             STM32L0_FLASH_PEKEYR_ADDR, STM32L0_FLASH_PEKEYR_KEY2);
    }
    return LIBSWD_OK;
 8005958:	2300      	movs	r3, #0
}
 800595a:	0018      	movs	r0, r3
 800595c:	46bd      	mov	sp, r7
 800595e:	b004      	add	sp, #16
 8005960:	bd80      	pop	{r7, pc}
 8005962:	46c0      	nop			; (mov r8, r8)
 8005964:	40022004 	.word	0x40022004
 8005968:	89abcdef 	.word	0x89abcdef
 800596c:	4002200c 	.word	0x4002200c
 8005970:	02030405 	.word	0x02030405

08005974 <STM32L0_unlock_opt>:


int32_t STM32L0_unlock_opt(libswd_ctx_t *libswdctx)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b086      	sub	sp, #24
 8005978:	af02      	add	r7, sp, #8
 800597a:	6078      	str	r0, [r7, #4]
    // Wait until the BSY bit is reset in the FLASH_SR register
    int32_t ret = STM32L0_wait_busy(libswdctx);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	0018      	movs	r0, r3
 8005980:	f7ff feee 	bl	8005760 <STM32L0_wait_busy>
 8005984:	0003      	movs	r3, r0
 8005986:	60fb      	str	r3, [r7, #12]
    if (ret < 0) return ret;  
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2b00      	cmp	r3, #0
 800598c:	da01      	bge.n	8005992 <STM32L0_unlock_opt+0x1e>
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	e04c      	b.n	8005a2c <STM32L0_unlock_opt+0xb8>

    uint32_t pecr;
    ret = libswd_memap_read_int_32(libswdctx, LIBSWD_OPERATION_EXECUTE, STM32L0_FLASH_PECR_ADDR, 1, (int*)&pecr);
 8005992:	4a28      	ldr	r2, [pc, #160]	; (8005a34 <STM32L0_unlock_opt+0xc0>)
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	2308      	movs	r3, #8
 8005998:	18fb      	adds	r3, r7, r3
 800599a:	9300      	str	r3, [sp, #0]
 800599c:	2301      	movs	r3, #1
 800599e:	2102      	movs	r1, #2
 80059a0:	f7ff faf0 	bl	8004f84 <libswd_memap_read_int_32>
 80059a4:	0003      	movs	r3, r0
 80059a6:	60fb      	str	r3, [r7, #12]
    if (ret < 0) return ret;        
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	da01      	bge.n	80059b2 <STM32L0_unlock_opt+0x3e>
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	e03c      	b.n	8005a2c <STM32L0_unlock_opt+0xb8>
    
    if ((pecr & STM32L0_FLASH_PECR_PELOCK) == 0) 
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	2201      	movs	r2, #1
 80059b6:	4013      	ands	r3, r2
 80059b8:	d136      	bne.n	8005a28 <STM32L0_unlock_opt+0xb4>
    {
        if ((pecr & STM32L0_FLASH_PECR_OPTLOCK) != 0) 
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	2204      	movs	r2, #4
 80059be:	4013      	ands	r3, r2
 80059c0:	d030      	beq.n	8005a24 <STM32L0_unlock_opt+0xb0>
        {
            // unlock options
            ret = libswd_memap_write_int_32_val(libswdctx, LIBSWD_OPERATION_EXECUTE, 
 80059c2:	4b1d      	ldr	r3, [pc, #116]	; (8005a38 <STM32L0_unlock_opt+0xc4>)
 80059c4:	4a1d      	ldr	r2, [pc, #116]	; (8005a3c <STM32L0_unlock_opt+0xc8>)
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	2102      	movs	r1, #2
 80059ca:	f7ff fcd1 	bl	8005370 <libswd_memap_write_int_32_val>
 80059ce:	0003      	movs	r3, r0
 80059d0:	60fb      	str	r3, [r7, #12]
                                            STM32L0_FLASH_OPTKEYR_ADDR, STM32L0_FLASH_OPTKEYR_KEY1);
            if (ret < 0) return ret;        
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	da01      	bge.n	80059dc <STM32L0_unlock_opt+0x68>
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	e027      	b.n	8005a2c <STM32L0_unlock_opt+0xb8>
        
            ret = libswd_memap_write_int_32_val(libswdctx, LIBSWD_OPERATION_EXECUTE, 
 80059dc:	4b18      	ldr	r3, [pc, #96]	; (8005a40 <STM32L0_unlock_opt+0xcc>)
 80059de:	4a17      	ldr	r2, [pc, #92]	; (8005a3c <STM32L0_unlock_opt+0xc8>)
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	2102      	movs	r1, #2
 80059e4:	f7ff fcc4 	bl	8005370 <libswd_memap_write_int_32_val>
 80059e8:	0003      	movs	r3, r0
 80059ea:	60fb      	str	r3, [r7, #12]
                                            STM32L0_FLASH_OPTKEYR_ADDR, STM32L0_FLASH_OPTKEYR_KEY2);
            if (ret < 0) return ret;        
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	da01      	bge.n	80059f6 <STM32L0_unlock_opt+0x82>
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	e01a      	b.n	8005a2c <STM32L0_unlock_opt+0xb8>
            
            // check unlock state
            ret = libswd_memap_read_int_32(libswdctx, LIBSWD_OPERATION_EXECUTE, STM32L0_FLASH_PECR_ADDR, 1, (int*)&pecr);
 80059f6:	4a0f      	ldr	r2, [pc, #60]	; (8005a34 <STM32L0_unlock_opt+0xc0>)
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	2308      	movs	r3, #8
 80059fc:	18fb      	adds	r3, r7, r3
 80059fe:	9300      	str	r3, [sp, #0]
 8005a00:	2301      	movs	r3, #1
 8005a02:	2102      	movs	r1, #2
 8005a04:	f7ff fabe 	bl	8004f84 <libswd_memap_read_int_32>
 8005a08:	0003      	movs	r3, r0
 8005a0a:	60fb      	str	r3, [r7, #12]
            if (ret < 0) return ret;  
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	da01      	bge.n	8005a16 <STM32L0_unlock_opt+0xa2>
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	e00a      	b.n	8005a2c <STM32L0_unlock_opt+0xb8>
            
            if ((pecr & STM32L0_FLASH_PECR_OPTLOCK) != 0) 
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	2204      	movs	r2, #4
 8005a1a:	4013      	ands	r3, r2
 8005a1c:	d002      	beq.n	8005a24 <STM32L0_unlock_opt+0xb0>
            {
                // unlock failed
                return -109;
 8005a1e:	236d      	movs	r3, #109	; 0x6d
 8005a20:	425b      	negs	r3, r3
 8005a22:	e003      	b.n	8005a2c <STM32L0_unlock_opt+0xb8>
            }
        }
        return LIBSWD_OK;
 8005a24:	2300      	movs	r3, #0
 8005a26:	e001      	b.n	8005a2c <STM32L0_unlock_opt+0xb8>
    }
    return -105;
 8005a28:	2369      	movs	r3, #105	; 0x69
 8005a2a:	425b      	negs	r3, r3
}
 8005a2c:	0018      	movs	r0, r3
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	b004      	add	sp, #16
 8005a32:	bd80      	pop	{r7, pc}
 8005a34:	40022004 	.word	0x40022004
 8005a38:	fbead9c8 	.word	0xfbead9c8
 8005a3c:	40022014 	.word	0x40022014
 8005a40:	24252627 	.word	0x24252627

08005a44 <STM32L0_unlock_prog>:


int32_t STM32L0_unlock_prog(libswd_ctx_t *libswdctx)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b086      	sub	sp, #24
 8005a48:	af02      	add	r7, sp, #8
 8005a4a:	6078      	str	r0, [r7, #4]
    // Wait until the BSY bit is reset in the FLASH_SR register
    int32_t ret = STM32L0_wait_busy(libswdctx);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	0018      	movs	r0, r3
 8005a50:	f7ff fe86 	bl	8005760 <STM32L0_wait_busy>
 8005a54:	0003      	movs	r3, r0
 8005a56:	60fb      	str	r3, [r7, #12]
    if (ret < 0) return ret;  
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	da01      	bge.n	8005a62 <STM32L0_unlock_prog+0x1e>
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	e04c      	b.n	8005afc <STM32L0_unlock_prog+0xb8>

    uint32_t pecr;
    ret = libswd_memap_read_int_32(libswdctx, LIBSWD_OPERATION_EXECUTE, STM32L0_FLASH_PECR_ADDR, 1, (int*)&pecr);
 8005a62:	4a28      	ldr	r2, [pc, #160]	; (8005b04 <STM32L0_unlock_prog+0xc0>)
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	2308      	movs	r3, #8
 8005a68:	18fb      	adds	r3, r7, r3
 8005a6a:	9300      	str	r3, [sp, #0]
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	2102      	movs	r1, #2
 8005a70:	f7ff fa88 	bl	8004f84 <libswd_memap_read_int_32>
 8005a74:	0003      	movs	r3, r0
 8005a76:	60fb      	str	r3, [r7, #12]
    if (ret < 0) return ret;        
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	da01      	bge.n	8005a82 <STM32L0_unlock_prog+0x3e>
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	e03c      	b.n	8005afc <STM32L0_unlock_prog+0xb8>
    
    if ((pecr & STM32L0_FLASH_PECR_PELOCK) == 0) 
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	2201      	movs	r2, #1
 8005a86:	4013      	ands	r3, r2
 8005a88:	d136      	bne.n	8005af8 <STM32L0_unlock_prog+0xb4>
    {
        if ((pecr & STM32L0_FLASH_PECR_PRGLOCK) != 0) 
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	2202      	movs	r2, #2
 8005a8e:	4013      	ands	r3, r2
 8005a90:	d030      	beq.n	8005af4 <STM32L0_unlock_prog+0xb0>
        {
            // unlock programming
            ret = libswd_memap_write_int_32_val(libswdctx, LIBSWD_OPERATION_EXECUTE, 
 8005a92:	4b1d      	ldr	r3, [pc, #116]	; (8005b08 <STM32L0_unlock_prog+0xc4>)
 8005a94:	4a1d      	ldr	r2, [pc, #116]	; (8005b0c <STM32L0_unlock_prog+0xc8>)
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	2102      	movs	r1, #2
 8005a9a:	f7ff fc69 	bl	8005370 <libswd_memap_write_int_32_val>
 8005a9e:	0003      	movs	r3, r0
 8005aa0:	60fb      	str	r3, [r7, #12]
                                            STM32L0_FLASH_PRGKEYR_ADDR, STM32L0_FLASH_PRGKEYR_KEY1);
            if (ret < 0) return ret;        
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	da01      	bge.n	8005aac <STM32L0_unlock_prog+0x68>
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	e027      	b.n	8005afc <STM32L0_unlock_prog+0xb8>
        
            ret = libswd_memap_write_int_32_val(libswdctx, LIBSWD_OPERATION_EXECUTE, 
 8005aac:	4b18      	ldr	r3, [pc, #96]	; (8005b10 <STM32L0_unlock_prog+0xcc>)
 8005aae:	4a17      	ldr	r2, [pc, #92]	; (8005b0c <STM32L0_unlock_prog+0xc8>)
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	2102      	movs	r1, #2
 8005ab4:	f7ff fc5c 	bl	8005370 <libswd_memap_write_int_32_val>
 8005ab8:	0003      	movs	r3, r0
 8005aba:	60fb      	str	r3, [r7, #12]
                                            STM32L0_FLASH_PRGKEYR_ADDR, STM32L0_FLASH_PRGKEYR_KEY2);
            if (ret < 0) return ret;    
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	da01      	bge.n	8005ac6 <STM32L0_unlock_prog+0x82>
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	e01a      	b.n	8005afc <STM32L0_unlock_prog+0xb8>
            
            // check unlock state
            ret = libswd_memap_read_int_32(libswdctx, LIBSWD_OPERATION_EXECUTE, STM32L0_FLASH_PECR_ADDR, 1, (int*)&pecr);
 8005ac6:	4a0f      	ldr	r2, [pc, #60]	; (8005b04 <STM32L0_unlock_prog+0xc0>)
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	2308      	movs	r3, #8
 8005acc:	18fb      	adds	r3, r7, r3
 8005ace:	9300      	str	r3, [sp, #0]
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	2102      	movs	r1, #2
 8005ad4:	f7ff fa56 	bl	8004f84 <libswd_memap_read_int_32>
 8005ad8:	0003      	movs	r3, r0
 8005ada:	60fb      	str	r3, [r7, #12]
            if (ret < 0) return ret;  
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	da01      	bge.n	8005ae6 <STM32L0_unlock_prog+0xa2>
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	e00a      	b.n	8005afc <STM32L0_unlock_prog+0xb8>
            
            if ((pecr & STM32L0_FLASH_PECR_PRGLOCK) != 0) 
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	2202      	movs	r2, #2
 8005aea:	4013      	ands	r3, r2
 8005aec:	d002      	beq.n	8005af4 <STM32L0_unlock_prog+0xb0>
            {
                // unlock failed
                return -109;
 8005aee:	236d      	movs	r3, #109	; 0x6d
 8005af0:	425b      	negs	r3, r3
 8005af2:	e003      	b.n	8005afc <STM32L0_unlock_prog+0xb8>
            }
        }
        return LIBSWD_OK;
 8005af4:	2300      	movs	r3, #0
 8005af6:	e001      	b.n	8005afc <STM32L0_unlock_prog+0xb8>
    }
    return -105;
 8005af8:	2369      	movs	r3, #105	; 0x69
 8005afa:	425b      	negs	r3, r3
}
 8005afc:	0018      	movs	r0, r3
 8005afe:	46bd      	mov	sp, r7
 8005b00:	b004      	add	sp, #16
 8005b02:	bd80      	pop	{r7, pc}
 8005b04:	40022004 	.word	0x40022004
 8005b08:	8c9daebf 	.word	0x8c9daebf
 8005b0c:	40022010 	.word	0x40022010
 8005b10:	13141516 	.word	0x13141516

08005b14 <STM32L0_mass_erase>:



int32_t STM32L0_mass_erase(libswd_ctx_t *libswdctx)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b088      	sub	sp, #32
 8005b18:	af02      	add	r7, sp, #8
 8005b1a:	6078      	str	r0, [r7, #4]
    uint32_t optr, sr;

    int ret = STM32L0_unlock_nvm(libswdctx);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	0018      	movs	r0, r3
 8005b20:	f7ff fee2 	bl	80058e8 <STM32L0_unlock_nvm>
 8005b24:	0003      	movs	r3, r0
 8005b26:	617b      	str	r3, [r7, #20]
    if (ret < 0) return ret;
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	da01      	bge.n	8005b32 <STM32L0_mass_erase+0x1e>
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	e06a      	b.n	8005c08 <STM32L0_mass_erase+0xf4>
    ret = STM32L0_unlock_opt(libswdctx);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	0018      	movs	r0, r3
 8005b36:	f7ff ff1d 	bl	8005974 <STM32L0_unlock_opt>
 8005b3a:	0003      	movs	r3, r0
 8005b3c:	617b      	str	r3, [r7, #20]
    if (ret < 0) return ret;
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	da01      	bge.n	8005b48 <STM32L0_mass_erase+0x34>
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	e05f      	b.n	8005c08 <STM32L0_mass_erase+0xf4>
    
    ret = libswd_memap_read_int_32(libswdctx, LIBSWD_OPERATION_EXECUTE, STM32L0_FLASH_SR_ADDR, 1, (int*)&sr);
 8005b48:	4a31      	ldr	r2, [pc, #196]	; (8005c10 <STM32L0_mass_erase+0xfc>)
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	230c      	movs	r3, #12
 8005b4e:	18fb      	adds	r3, r7, r3
 8005b50:	9300      	str	r3, [sp, #0]
 8005b52:	2301      	movs	r3, #1
 8005b54:	2102      	movs	r1, #2
 8005b56:	f7ff fa15 	bl	8004f84 <libswd_memap_read_int_32>
 8005b5a:	0003      	movs	r3, r0
 8005b5c:	617b      	str	r3, [r7, #20]
    if (ret < 0) return ret;   
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	da01      	bge.n	8005b68 <STM32L0_mass_erase+0x54>
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	e04f      	b.n	8005c08 <STM32L0_mass_erase+0xf4>
    
    ret = libswd_memap_read_int_32(libswdctx, LIBSWD_OPERATION_EXECUTE, STM32L0_FLASH_OPTR_ADDR, 1, (int*)&optr);
 8005b68:	4a2a      	ldr	r2, [pc, #168]	; (8005c14 <STM32L0_mass_erase+0x100>)
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	2310      	movs	r3, #16
 8005b6e:	18fb      	adds	r3, r7, r3
 8005b70:	9300      	str	r3, [sp, #0]
 8005b72:	2301      	movs	r3, #1
 8005b74:	2102      	movs	r1, #2
 8005b76:	f7ff fa05 	bl	8004f84 <libswd_memap_read_int_32>
 8005b7a:	0003      	movs	r3, r0
 8005b7c:	617b      	str	r3, [r7, #20]
    if (ret < 0) return ret;
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	da01      	bge.n	8005b88 <STM32L0_mass_erase+0x74>
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	e03f      	b.n	8005c08 <STM32L0_mass_erase+0xf4>
    
    if ((optr & 0x000000FF) == 0xCC)
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	22ff      	movs	r2, #255	; 0xff
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	2bcc      	cmp	r3, #204	; 0xcc
 8005b90:	d102      	bne.n	8005b98 <STM32L0_mass_erase+0x84>
    {
        // Device locked to level 2, not possible to program/erase
        return -100;
 8005b92:	2364      	movs	r3, #100	; 0x64
 8005b94:	425b      	negs	r3, r3
 8005b96:	e037      	b.n	8005c08 <STM32L0_mass_erase+0xf4>
    }
    else if ((optr & 0x000000FF) == 0xAA)
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	22ff      	movs	r2, #255	; 0xff
 8005b9c:	4013      	ands	r3, r2
 8005b9e:	2baa      	cmp	r3, #170	; 0xaa
 8005ba0:	d120      	bne.n	8005be4 <STM32L0_mass_erase+0xd0>
    {
        ret = STM32L0_option_byte_erase(libswdctx, 0x1FF80000);
 8005ba2:	4a1d      	ldr	r2, [pc, #116]	; (8005c18 <STM32L0_mass_erase+0x104>)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	0011      	movs	r1, r2
 8005ba8:	0018      	movs	r0, r3
 8005baa:	f7ff fe6b 	bl	8005884 <STM32L0_option_byte_erase>
 8005bae:	0003      	movs	r3, r0
 8005bb0:	617b      	str	r3, [r7, #20]
        if (ret < 0) return ret;
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	da01      	bge.n	8005bbc <STM32L0_mass_erase+0xa8>
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	e025      	b.n	8005c08 <STM32L0_mass_erase+0xf4>
        // The MCU will reset while executing the option bytes reloading

        ret = STM32L0_set_bits(libswdctx, STM32L0_FLASH_PECR_ADDR, STM32L0_FLASH_PECR_OBL_LAUNCH);
 8005bbc:	2380      	movs	r3, #128	; 0x80
 8005bbe:	02da      	lsls	r2, r3, #11
 8005bc0:	4916      	ldr	r1, [pc, #88]	; (8005c1c <STM32L0_mass_erase+0x108>)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	0018      	movs	r0, r3
 8005bc6:	f7ff fd7a 	bl	80056be <STM32L0_set_bits>
 8005bca:	0003      	movs	r3, r0
 8005bcc:	617b      	str	r3, [r7, #20]
                   if (ret < 0) return ret;
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	da01      	bge.n	8005bd8 <STM32L0_mass_erase+0xc4>
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	e017      	b.n	8005c08 <STM32L0_mass_erase+0xf4>
        Delay(40000);
 8005bd8:	4b11      	ldr	r3, [pc, #68]	; (8005c20 <STM32L0_mass_erase+0x10c>)
 8005bda:	0018      	movs	r0, r3
 8005bdc:	f7ff fbf6 	bl	80053cc <Delay>
        return 42;
 8005be0:	232a      	movs	r3, #42	; 0x2a
 8005be2:	e011      	b.n	8005c08 <STM32L0_mass_erase+0xf4>
    }

    ret = STM32L0_option_byte_prog(libswdctx,0x1FF80000, 0x00AA);
 8005be4:	490c      	ldr	r1, [pc, #48]	; (8005c18 <STM32L0_mass_erase+0x104>)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	22aa      	movs	r2, #170	; 0xaa
 8005bea:	0018      	movs	r0, r3
 8005bec:	f7ff fe30 	bl	8005850 <STM32L0_option_byte_prog>
 8005bf0:	0003      	movs	r3, r0
 8005bf2:	617b      	str	r3, [r7, #20]
    if (ret < 0) 
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	da01      	bge.n	8005bfe <STM32L0_mass_erase+0xea>
    {
        return ret;
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	e004      	b.n	8005c08 <STM32L0_mass_erase+0xf4>
    }
//Mass erase operation takes atleast 30s
    Delay(1000000);
 8005bfe:	4b09      	ldr	r3, [pc, #36]	; (8005c24 <STM32L0_mass_erase+0x110>)
 8005c00:	0018      	movs	r0, r3
 8005c02:	f7ff fbe3 	bl	80053cc <Delay>
    return 0;
 8005c06:	2300      	movs	r3, #0
}
 8005c08:	0018      	movs	r0, r3
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	b006      	add	sp, #24
 8005c0e:	bd80      	pop	{r7, pc}
 8005c10:	40022018 	.word	0x40022018
 8005c14:	4002201c 	.word	0x4002201c
 8005c18:	1ff80000 	.word	0x1ff80000
 8005c1c:	40022004 	.word	0x40022004
 8005c20:	00009c40 	.word	0x00009c40
 8005c24:	000f4240 	.word	0x000f4240

08005c28 <STM32L0_ReadOut_Lock>:

int32_t STM32L0_ReadOut_Lock(libswd_ctx_t *libswdctx)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b088      	sub	sp, #32
 8005c2c:	af02      	add	r7, sp, #8
 8005c2e:	6078      	str	r0, [r7, #4]
    uint32_t optr, sr;

    int ret = STM32L0_unlock_nvm(libswdctx);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	0018      	movs	r0, r3
 8005c34:	f7ff fe58 	bl	80058e8 <STM32L0_unlock_nvm>
 8005c38:	0003      	movs	r3, r0
 8005c3a:	617b      	str	r3, [r7, #20]
    if (ret < 0) return ret;
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	da01      	bge.n	8005c46 <STM32L0_ReadOut_Lock+0x1e>
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	e057      	b.n	8005cf6 <STM32L0_ReadOut_Lock+0xce>
    ret = STM32L0_unlock_opt(libswdctx);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	0018      	movs	r0, r3
 8005c4a:	f7ff fe93 	bl	8005974 <STM32L0_unlock_opt>
 8005c4e:	0003      	movs	r3, r0
 8005c50:	617b      	str	r3, [r7, #20]
    if (ret < 0) return ret;
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	da01      	bge.n	8005c5c <STM32L0_ReadOut_Lock+0x34>
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	e04c      	b.n	8005cf6 <STM32L0_ReadOut_Lock+0xce>

    ret = libswd_memap_read_int_32(libswdctx, LIBSWD_OPERATION_EXECUTE, STM32L0_FLASH_SR_ADDR, 1, (int*)&sr);
 8005c5c:	4a28      	ldr	r2, [pc, #160]	; (8005d00 <STM32L0_ReadOut_Lock+0xd8>)
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	2308      	movs	r3, #8
 8005c62:	18fb      	adds	r3, r7, r3
 8005c64:	9300      	str	r3, [sp, #0]
 8005c66:	2301      	movs	r3, #1
 8005c68:	2102      	movs	r1, #2
 8005c6a:	f7ff f98b 	bl	8004f84 <libswd_memap_read_int_32>
 8005c6e:	0003      	movs	r3, r0
 8005c70:	617b      	str	r3, [r7, #20]
    if (ret < 0) return ret;
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	da01      	bge.n	8005c7c <STM32L0_ReadOut_Lock+0x54>
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	e03c      	b.n	8005cf6 <STM32L0_ReadOut_Lock+0xce>

    ret = libswd_memap_read_int_32(libswdctx, LIBSWD_OPERATION_EXECUTE, STM32L0_FLASH_OPTR_ADDR, 1, (int*)&optr);
 8005c7c:	4a21      	ldr	r2, [pc, #132]	; (8005d04 <STM32L0_ReadOut_Lock+0xdc>)
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	230c      	movs	r3, #12
 8005c82:	18fb      	adds	r3, r7, r3
 8005c84:	9300      	str	r3, [sp, #0]
 8005c86:	2301      	movs	r3, #1
 8005c88:	2102      	movs	r1, #2
 8005c8a:	f7ff f97b 	bl	8004f84 <libswd_memap_read_int_32>
 8005c8e:	0003      	movs	r3, r0
 8005c90:	617b      	str	r3, [r7, #20]
    if (ret < 0) return ret;
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	da01      	bge.n	8005c9c <STM32L0_ReadOut_Lock+0x74>
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	e02c      	b.n	8005cf6 <STM32L0_ReadOut_Lock+0xce>

    if ((optr & 0x000000FF) == 0xCC)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	22ff      	movs	r2, #255	; 0xff
 8005ca0:	4013      	ands	r3, r2
 8005ca2:	2bcc      	cmp	r3, #204	; 0xcc
 8005ca4:	d102      	bne.n	8005cac <STM32L0_ReadOut_Lock+0x84>
    {
        // Device locked to level 2, not possible to program/erase
        return -100;
 8005ca6:	2364      	movs	r3, #100	; 0x64
 8005ca8:	425b      	negs	r3, r3
 8005caa:	e024      	b.n	8005cf6 <STM32L0_ReadOut_Lock+0xce>
    }
    else if ((optr & 0x000000FF) == 0xAA)
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	22ff      	movs	r2, #255	; 0xff
 8005cb0:	4013      	ands	r3, r2
 8005cb2:	2baa      	cmp	r3, #170	; 0xaa
 8005cb4:	d11e      	bne.n	8005cf4 <STM32L0_ReadOut_Lock+0xcc>
    {
    	//Level 1 is set by assigning a value other than 0xAA and 0xCC to first word of option byte
    	//I have assigned Zeros in [15:0] and its compliment in [31:16]
    	int retval = STM32L0_option_byte_write(libswdctx, 0x1FF80000, 0xFFFF0000);
 8005cb6:	4a14      	ldr	r2, [pc, #80]	; (8005d08 <STM32L0_ReadOut_Lock+0xe0>)
 8005cb8:	4914      	ldr	r1, [pc, #80]	; (8005d0c <STM32L0_ReadOut_Lock+0xe4>)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	0018      	movs	r0, r3
 8005cbe:	f7ff fd7f 	bl	80057c0 <STM32L0_option_byte_write>
 8005cc2:	0003      	movs	r3, r0
 8005cc4:	613b      	str	r3, [r7, #16]
    	    if (retval < 0)
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	da01      	bge.n	8005cd0 <STM32L0_ReadOut_Lock+0xa8>
    	    {
    	        return retval;
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	e012      	b.n	8005cf6 <STM32L0_ReadOut_Lock+0xce>
    	    }
       ret = STM32L0_set_bits(libswdctx, STM32L0_FLASH_PECR_ADDR, STM32L0_FLASH_PECR_OBL_LAUNCH);
 8005cd0:	2380      	movs	r3, #128	; 0x80
 8005cd2:	02da      	lsls	r2, r3, #11
 8005cd4:	490e      	ldr	r1, [pc, #56]	; (8005d10 <STM32L0_ReadOut_Lock+0xe8>)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	0018      	movs	r0, r3
 8005cda:	f7ff fcf0 	bl	80056be <STM32L0_set_bits>
 8005cde:	0003      	movs	r3, r0
 8005ce0:	617b      	str	r3, [r7, #20]
    	                      if (ret < 0) return ret;
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	da01      	bge.n	8005cec <STM32L0_ReadOut_Lock+0xc4>
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	e004      	b.n	8005cf6 <STM32L0_ReadOut_Lock+0xce>
       Delay(40000);
 8005cec:	4b09      	ldr	r3, [pc, #36]	; (8005d14 <STM32L0_ReadOut_Lock+0xec>)
 8005cee:	0018      	movs	r0, r3
 8005cf0:	f7ff fb6c 	bl	80053cc <Delay>

    }
    return 0;
 8005cf4:	2300      	movs	r3, #0
}
 8005cf6:	0018      	movs	r0, r3
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	b006      	add	sp, #24
 8005cfc:	bd80      	pop	{r7, pc}
 8005cfe:	46c0      	nop			; (mov r8, r8)
 8005d00:	40022018 	.word	0x40022018
 8005d04:	4002201c 	.word	0x4002201c
 8005d08:	ffff0000 	.word	0xffff0000
 8005d0c:	1ff80000 	.word	0x1ff80000
 8005d10:	40022004 	.word	0x40022004
 8005d14:	00009c40 	.word	0x00009c40

08005d18 <STM32L0_half_page_prog>:


int32_t STM32L0_half_page_prog(libswd_ctx_t *libswdctx, uint32_t *data, uint32_t addr, uint32_t half_page_size)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b088      	sub	sp, #32
 8005d1c:	af02      	add	r7, sp, #8
 8005d1e:	60f8      	str	r0, [r7, #12]
 8005d20:	60b9      	str	r1, [r7, #8]
 8005d22:	607a      	str	r2, [r7, #4]
 8005d24:	603b      	str	r3, [r7, #0]
   int ret = libswd_memap_write_int_32(libswdctx, LIBSWD_OPERATION_EXECUTE, addr, half_page_size / 4, (int*)data);
 8005d26:	687a      	ldr	r2, [r7, #4]
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	089b      	lsrs	r3, r3, #2
 8005d2c:	0019      	movs	r1, r3
 8005d2e:	68f8      	ldr	r0, [r7, #12]
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	9300      	str	r3, [sp, #0]
 8005d34:	000b      	movs	r3, r1
 8005d36:	2102      	movs	r1, #2
 8005d38:	f7ff fae8 	bl	800530c <libswd_memap_write_int_32>
 8005d3c:	0003      	movs	r3, r0
 8005d3e:	617b      	str	r3, [r7, #20]
    if (ret < 0) return ret;        
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	da01      	bge.n	8005d4a <STM32L0_half_page_prog+0x32>
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	e02f      	b.n	8005daa <STM32L0_half_page_prog+0x92>
    
    // Wait until the BSY bit is reset in the FLASH_SR register
    ret = STM32L0_wait_busy(libswdctx);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	0018      	movs	r0, r3
 8005d4e:	f7ff fd07 	bl	8005760 <STM32L0_wait_busy>
 8005d52:	0003      	movs	r3, r0
 8005d54:	617b      	str	r3, [r7, #20]
    if (ret < 0) return ret;        
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	da01      	bge.n	8005d60 <STM32L0_half_page_prog+0x48>
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	e024      	b.n	8005daa <STM32L0_half_page_prog+0x92>

    uint32_t sr;
    // Check the EOP flag in the FLASH_SR register
    ret = libswd_memap_read_int_32(libswdctx, LIBSWD_OPERATION_EXECUTE, STM32L0_FLASH_SR_ADDR, 1, (int*)&sr);
 8005d60:	4a14      	ldr	r2, [pc, #80]	; (8005db4 <STM32L0_half_page_prog+0x9c>)
 8005d62:	68f8      	ldr	r0, [r7, #12]
 8005d64:	2310      	movs	r3, #16
 8005d66:	18fb      	adds	r3, r7, r3
 8005d68:	9300      	str	r3, [sp, #0]
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	2102      	movs	r1, #2
 8005d6e:	f7ff f909 	bl	8004f84 <libswd_memap_read_int_32>
 8005d72:	0003      	movs	r3, r0
 8005d74:	617b      	str	r3, [r7, #20]
    if (ret < 0) return ret;        
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	da01      	bge.n	8005d80 <STM32L0_half_page_prog+0x68>
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	e014      	b.n	8005daa <STM32L0_half_page_prog+0x92>
 
    if ((sr & STM32L0_FLASH_SR_EOP) != 0)
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	2202      	movs	r2, #2
 8005d84:	4013      	ands	r3, r2
 8005d86:	d00c      	beq.n	8005da2 <STM32L0_half_page_prog+0x8a>
    {
        // Clear EOP flag by software by writing EOP at 1 
        ret = libswd_memap_write_int_32_val(libswdctx, LIBSWD_OPERATION_EXECUTE, 
 8005d88:	4a0a      	ldr	r2, [pc, #40]	; (8005db4 <STM32L0_half_page_prog+0x9c>)
 8005d8a:	68f8      	ldr	r0, [r7, #12]
 8005d8c:	2302      	movs	r3, #2
 8005d8e:	2102      	movs	r1, #2
 8005d90:	f7ff faee 	bl	8005370 <libswd_memap_write_int_32_val>
 8005d94:	0003      	movs	r3, r0
 8005d96:	617b      	str	r3, [r7, #20]
                                             STM32L0_FLASH_SR_ADDR, STM32L0_FLASH_SR_EOP);
        if (ret < 0) return ret; 
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	da04      	bge.n	8005da8 <STM32L0_half_page_prog+0x90>
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	e003      	b.n	8005daa <STM32L0_half_page_prog+0x92>
    } 
    else
    {
        return -102;
 8005da2:	2366      	movs	r3, #102	; 0x66
 8005da4:	425b      	negs	r3, r3
 8005da6:	e000      	b.n	8005daa <STM32L0_half_page_prog+0x92>
    }

   return 0;
 8005da8:	2300      	movs	r3, #0
}
 8005daa:	0018      	movs	r0, r3
 8005dac:	46bd      	mov	sp, r7
 8005dae:	b006      	add	sp, #24
 8005db0:	bd80      	pop	{r7, pc}
 8005db2:	46c0      	nop			; (mov r8, r8)
 8005db4:	40022018 	.word	0x40022018

08005db8 <STM32L0_prog>:



int32_t STM32L0_prog(libswd_ctx_t *libswdctx, uint8_t *data, uint32_t count, uint32_t addr, uint32_t page_size)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b08a      	sub	sp, #40	; 0x28
 8005dbc:	af02      	add	r7, sp, #8
 8005dbe:	60f8      	str	r0, [r7, #12]
 8005dc0:	60b9      	str	r1, [r7, #8]
 8005dc2:	607a      	str	r2, [r7, #4]
 8005dc4:	603b      	str	r3, [r7, #0]
    int ret = STM32L0_unlock_nvm(libswdctx);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	0018      	movs	r0, r3
 8005dca:	f7ff fd8d 	bl	80058e8 <STM32L0_unlock_nvm>
 8005dce:	0003      	movs	r3, r0
 8005dd0:	61bb      	str	r3, [r7, #24]
    if (ret < 0) return ret;
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	da01      	bge.n	8005ddc <STM32L0_prog+0x24>
 8005dd8:	69bb      	ldr	r3, [r7, #24]
 8005dda:	e078      	b.n	8005ece <STM32L0_prog+0x116>
    ret = STM32L0_unlock_prog(libswdctx);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	0018      	movs	r0, r3
 8005de0:	f7ff fe30 	bl	8005a44 <STM32L0_unlock_prog>
 8005de4:	0003      	movs	r3, r0
 8005de6:	61bb      	str	r3, [r7, #24]
    if (ret < 0) return ret;
 8005de8:	69bb      	ldr	r3, [r7, #24]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	da01      	bge.n	8005df2 <STM32L0_prog+0x3a>
 8005dee:	69bb      	ldr	r3, [r7, #24]
 8005df0:	e06d      	b.n	8005ece <STM32L0_prog+0x116>

    uint32_t sr, pecr;
       // Check the EOP flag in the FLASH_SR register
       ret = libswd_memap_read_int_32(libswdctx, LIBSWD_OPERATION_EXECUTE, STM32L0_FLASH_SR_ADDR, 1, (int*)&sr);
 8005df2:	4a39      	ldr	r2, [pc, #228]	; (8005ed8 <STM32L0_prog+0x120>)
 8005df4:	68f8      	ldr	r0, [r7, #12]
 8005df6:	2314      	movs	r3, #20
 8005df8:	18fb      	adds	r3, r7, r3
 8005dfa:	9300      	str	r3, [sp, #0]
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	2102      	movs	r1, #2
 8005e00:	f7ff f8c0 	bl	8004f84 <libswd_memap_read_int_32>
 8005e04:	0003      	movs	r3, r0
 8005e06:	61bb      	str	r3, [r7, #24]
       if (ret < 0) return ret;
 8005e08:	69bb      	ldr	r3, [r7, #24]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	da01      	bge.n	8005e12 <STM32L0_prog+0x5a>
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	e05d      	b.n	8005ece <STM32L0_prog+0x116>

        ret = libswd_memap_read_int_32(libswdctx, LIBSWD_OPERATION_EXECUTE, STM32L0_FLASH_PECR_ADDR, 1, (int*)&pecr);
 8005e12:	4a32      	ldr	r2, [pc, #200]	; (8005edc <STM32L0_prog+0x124>)
 8005e14:	68f8      	ldr	r0, [r7, #12]
 8005e16:	2310      	movs	r3, #16
 8005e18:	18fb      	adds	r3, r7, r3
 8005e1a:	9300      	str	r3, [sp, #0]
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	2102      	movs	r1, #2
 8005e20:	f7ff f8b0 	bl	8004f84 <libswd_memap_read_int_32>
 8005e24:	0003      	movs	r3, r0
 8005e26:	61bb      	str	r3, [r7, #24]
       if (ret < 0) return ret;
 8005e28:	69bb      	ldr	r3, [r7, #24]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	da01      	bge.n	8005e32 <STM32L0_prog+0x7a>
 8005e2e:	69bb      	ldr	r3, [r7, #24]
 8005e30:	e04d      	b.n	8005ece <STM32L0_prog+0x116>

       // Set the PROG and FPRG bits in the FLASH_PECR register to enable a half page programming
        ret = STM32L0_set_bits(libswdctx, STM32L0_FLASH_PECR_ADDR,
 8005e32:	2381      	movs	r3, #129	; 0x81
 8005e34:	00da      	lsls	r2, r3, #3
 8005e36:	4929      	ldr	r1, [pc, #164]	; (8005edc <STM32L0_prog+0x124>)
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	0018      	movs	r0, r3
 8005e3c:	f7ff fc3f 	bl	80056be <STM32L0_set_bits>
 8005e40:	0003      	movs	r3, r0
 8005e42:	61bb      	str	r3, [r7, #24]
                                         STM32L0_FLASH_PECR_PROG | STM32L0_FLASH_PECR_FPRG);
       if (ret < 0) return ret;
 8005e44:	69bb      	ldr	r3, [r7, #24]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	da01      	bge.n	8005e4e <STM32L0_prog+0x96>
 8005e4a:	69bb      	ldr	r3, [r7, #24]
 8005e4c:	e03f      	b.n	8005ece <STM32L0_prog+0x116>

    for (uint32_t i = 0; i < count; i+= page_size / 2)
 8005e4e:	2300      	movs	r3, #0
 8005e50:	61fb      	str	r3, [r7, #28]
 8005e52:	e01c      	b.n	8005e8e <STM32L0_prog+0xd6>
    {
        ret = STM32L0_half_page_prog(libswdctx, (uint32_t*)data, addr, page_size / 2);
 8005e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e56:	085b      	lsrs	r3, r3, #1
 8005e58:	683a      	ldr	r2, [r7, #0]
 8005e5a:	68b9      	ldr	r1, [r7, #8]
 8005e5c:	68f8      	ldr	r0, [r7, #12]
 8005e5e:	f7ff ff5b 	bl	8005d18 <STM32L0_half_page_prog>
 8005e62:	0003      	movs	r3, r0
 8005e64:	61bb      	str	r3, [r7, #24]
        if (ret < 0) return ret;
 8005e66:	69bb      	ldr	r3, [r7, #24]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	da01      	bge.n	8005e70 <STM32L0_prog+0xb8>
 8005e6c:	69bb      	ldr	r3, [r7, #24]
 8005e6e:	e02e      	b.n	8005ece <STM32L0_prog+0x116>
        addr += page_size / 2;
 8005e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e72:	085b      	lsrs	r3, r3, #1
 8005e74:	683a      	ldr	r2, [r7, #0]
 8005e76:	18d3      	adds	r3, r2, r3
 8005e78:	603b      	str	r3, [r7, #0]
        data += page_size / 2;
 8005e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e7c:	085b      	lsrs	r3, r3, #1
 8005e7e:	68ba      	ldr	r2, [r7, #8]
 8005e80:	18d3      	adds	r3, r2, r3
 8005e82:	60bb      	str	r3, [r7, #8]
    for (uint32_t i = 0; i < count; i+= page_size / 2)
 8005e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e86:	085b      	lsrs	r3, r3, #1
 8005e88:	69fa      	ldr	r2, [r7, #28]
 8005e8a:	18d3      	adds	r3, r2, r3
 8005e8c:	61fb      	str	r3, [r7, #28]
 8005e8e:	69fa      	ldr	r2, [r7, #28]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d3de      	bcc.n	8005e54 <STM32L0_prog+0x9c>
    }
    // Reset the ERASE and PROG bits in the FLASH_PECR register to disable the page erase
        ret = STM32L0_clear_bits(libswdctx, STM32L0_FLASH_PECR_ADDR,
 8005e96:	2381      	movs	r3, #129	; 0x81
 8005e98:	00da      	lsls	r2, r3, #3
 8005e9a:	4910      	ldr	r1, [pc, #64]	; (8005edc <STM32L0_prog+0x124>)
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	0018      	movs	r0, r3
 8005ea0:	f7ff fc35 	bl	800570e <STM32L0_clear_bits>
 8005ea4:	0003      	movs	r3, r0
 8005ea6:	61bb      	str	r3, [r7, #24]
                                  STM32L0_FLASH_PECR_PROG | STM32L0_FLASH_PECR_FPRG);
        if (ret < 0) return ret;
 8005ea8:	69bb      	ldr	r3, [r7, #24]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	da01      	bge.n	8005eb2 <STM32L0_prog+0xfa>
 8005eae:	69bb      	ldr	r3, [r7, #24]
 8005eb0:	e00d      	b.n	8005ece <STM32L0_prog+0x116>
        ret = libswd_memap_write_int_32_val(libswdctx, LIBSWD_OPERATION_EXECUTE,
 8005eb2:	4a0a      	ldr	r2, [pc, #40]	; (8005edc <STM32L0_prog+0x124>)
 8005eb4:	68f8      	ldr	r0, [r7, #12]
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	2102      	movs	r1, #2
 8005eba:	f7ff fa59 	bl	8005370 <libswd_memap_write_int_32_val>
 8005ebe:	0003      	movs	r3, r0
 8005ec0:	61bb      	str	r3, [r7, #24]
                                                     STM32L0_FLASH_PECR_ADDR, STM32L0_FLASH_PECR_PELOCK);
                if (ret < 0) return ret;
 8005ec2:	69bb      	ldr	r3, [r7, #24]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	da01      	bge.n	8005ecc <STM32L0_prog+0x114>
 8005ec8:	69bb      	ldr	r3, [r7, #24]
 8005eca:	e000      	b.n	8005ece <STM32L0_prog+0x116>
        return 0;
 8005ecc:	2300      	movs	r3, #0
}
 8005ece:	0018      	movs	r0, r3
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	b008      	add	sp, #32
 8005ed4:	bd80      	pop	{r7, pc}
 8005ed6:	46c0      	nop			; (mov r8, r8)
 8005ed8:	40022018 	.word	0x40022018
 8005edc:	40022004 	.word	0x40022004

08005ee0 <STM32L0_main>:
 
extern const char program1[6496];
extern const char program2[6496];

int32_t STM32L0_main(void)
{
 8005ee0:	b590      	push	{r4, r7, lr}
 8005ee2:	b087      	sub	sp, #28
 8005ee4:	af02      	add	r7, sp, #8
    libswd_ctx_t *libswdctx = libswd_init();
 8005ee6:	f7fb fd35 	bl	8001954 <libswd_init>
 8005eea:	0003      	movs	r3, r0
 8005eec:	60fb      	str	r3, [r7, #12]
    int32_t retval;
    
    // Check if target is halted, halt if necessary.
    if (!libswd_debug_is_halted(libswdctx, LIBSWD_OPERATION_EXECUTE))
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2102      	movs	r1, #2
 8005ef2:	0018      	movs	r0, r3
 8005ef4:	f7fd f9d8 	bl	80032a8 <libswd_debug_is_halted>
 8005ef8:	1e03      	subs	r3, r0, #0
 8005efa:	d10c      	bne.n	8005f16 <STM32L0_main+0x36>
    {
        retval = libswd_debug_halt(libswdctx, LIBSWD_OPERATION_EXECUTE);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2102      	movs	r1, #2
 8005f00:	0018      	movs	r0, r3
 8005f02:	f7fd f92f 	bl	8003164 <libswd_debug_halt>
 8005f06:	0003      	movs	r3, r0
 8005f08:	60bb      	str	r3, [r7, #8]
        if (retval < 0) return -101;
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	da02      	bge.n	8005f16 <STM32L0_main+0x36>
 8005f10:	2365      	movs	r3, #101	; 0x65
 8005f12:	425b      	negs	r3, r3
 8005f14:	e0dd      	b.n	80060d2 <STM32L0_main+0x1f2>
    }

      if(Counter % 2 == 0)
 8005f16:	4b71      	ldr	r3, [pc, #452]	; (80060dc <STM32L0_main+0x1fc>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	001a      	movs	r2, r3
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	4013      	ands	r3, r2
 8005f20:	d169      	bne.n	8005ff6 <STM32L0_main+0x116>
    {
    retval = STM32L0_mass_erase(libswdctx);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	0018      	movs	r0, r3
 8005f26:	f7ff fdf5 	bl	8005b14 <STM32L0_mass_erase>
 8005f2a:	0003      	movs	r3, r0
 8005f2c:	60bb      	str	r3, [r7, #8]
    if (retval == 42)
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	2b2a      	cmp	r3, #42	; 0x2a
 8005f32:	d127      	bne.n	8005f84 <STM32L0_main+0xa4>
       	    {
       	        // MCU reset performed, reinit SWD
       	        libswd_deinit(libswdctx);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	0018      	movs	r0, r3
 8005f38:	f7fb fd77 	bl	8001a2a <libswd_deinit>
       	        libswdctx = libswd_init();
 8005f3c:	f7fb fd0a 	bl	8001954 <libswd_init>
 8005f40:	0003      	movs	r3, r0
 8005f42:	60fb      	str	r3, [r7, #12]

       	        if (!libswd_debug_is_halted(libswdctx, LIBSWD_OPERATION_EXECUTE))
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2102      	movs	r1, #2
 8005f48:	0018      	movs	r0, r3
 8005f4a:	f7fd f9ad 	bl	80032a8 <libswd_debug_is_halted>
 8005f4e:	1e03      	subs	r3, r0, #0
 8005f50:	d10c      	bne.n	8005f6c <STM32L0_main+0x8c>
       	        {
       	            retval = libswd_debug_halt(libswdctx, LIBSWD_OPERATION_EXECUTE);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2102      	movs	r1, #2
 8005f56:	0018      	movs	r0, r3
 8005f58:	f7fd f904 	bl	8003164 <libswd_debug_halt>
 8005f5c:	0003      	movs	r3, r0
 8005f5e:	60bb      	str	r3, [r7, #8]
       	            if (retval < 0) return -101;
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	da02      	bge.n	8005f6c <STM32L0_main+0x8c>
 8005f66:	2365      	movs	r3, #101	; 0x65
 8005f68:	425b      	negs	r3, r3
 8005f6a:	e0b2      	b.n	80060d2 <STM32L0_main+0x1f2>
       	        }
       	        retval = STM32L0_mass_erase(libswdctx);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	0018      	movs	r0, r3
 8005f70:	f7ff fdd0 	bl	8005b14 <STM32L0_mass_erase>
 8005f74:	0003      	movs	r3, r0
 8005f76:	60bb      	str	r3, [r7, #8]
       	        if (retval < 0) return -102;
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	da02      	bge.n	8005f84 <STM32L0_main+0xa4>
 8005f7e:	2366      	movs	r3, #102	; 0x66
 8005f80:	425b      	negs	r3, r3
 8005f82:	e0a6      	b.n	80060d2 <STM32L0_main+0x1f2>
       	    }
    //Delay(50000);
    // The MCU will reset while executing the option bytes reloading
   int ret = STM32L0_set_bits(libswdctx, STM32L0_FLASH_PECR_ADDR, STM32L0_FLASH_PECR_OBL_LAUNCH);
 8005f84:	2380      	movs	r3, #128	; 0x80
 8005f86:	02da      	lsls	r2, r3, #11
 8005f88:	4955      	ldr	r1, [pc, #340]	; (80060e0 <STM32L0_main+0x200>)
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	0018      	movs	r0, r3
 8005f8e:	f7ff fb96 	bl	80056be <STM32L0_set_bits>
 8005f92:	0003      	movs	r3, r0
 8005f94:	603b      	str	r3, [r7, #0]
                       if (ret < 0) return ret;
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	da01      	bge.n	8005fa0 <STM32L0_main+0xc0>
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	e098      	b.n	80060d2 <STM32L0_main+0x1f2>
                       libswd_deinit(libswdctx);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	0018      	movs	r0, r3
 8005fa4:	f7fb fd41 	bl	8001a2a <libswd_deinit>
    libswdctx = libswd_init();
 8005fa8:	f7fb fcd4 	bl	8001954 <libswd_init>
 8005fac:	0003      	movs	r3, r0
 8005fae:	60fb      	str	r3, [r7, #12]
    if (!libswd_debug_is_halted(libswdctx, LIBSWD_OPERATION_EXECUTE))
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2102      	movs	r1, #2
 8005fb4:	0018      	movs	r0, r3
 8005fb6:	f7fd f977 	bl	80032a8 <libswd_debug_is_halted>
 8005fba:	1e03      	subs	r3, r0, #0
 8005fbc:	d10c      	bne.n	8005fd8 <STM32L0_main+0xf8>
    	          	        {
    	          	            retval = libswd_debug_halt(libswdctx, LIBSWD_OPERATION_EXECUTE);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2102      	movs	r1, #2
 8005fc2:	0018      	movs	r0, r3
 8005fc4:	f7fd f8ce 	bl	8003164 <libswd_debug_halt>
 8005fc8:	0003      	movs	r3, r0
 8005fca:	60bb      	str	r3, [r7, #8]
    	          	            if (retval < 0) return -101;
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	da02      	bge.n	8005fd8 <STM32L0_main+0xf8>
 8005fd2:	2365      	movs	r3, #101	; 0x65
 8005fd4:	425b      	negs	r3, r3
 8005fd6:	e07c      	b.n	80060d2 <STM32L0_main+0x1f2>
    	          	        }
    STM32L0_prog(libswdctx, (uint8_t*)program2, sizeof(program2), 0x08000000, 128);
 8005fd8:	2380      	movs	r3, #128	; 0x80
 8005fda:	051b      	lsls	r3, r3, #20
 8005fdc:	22cb      	movs	r2, #203	; 0xcb
 8005fde:	0152      	lsls	r2, r2, #5
 8005fe0:	4940      	ldr	r1, [pc, #256]	; (80060e4 <STM32L0_main+0x204>)
 8005fe2:	68f8      	ldr	r0, [r7, #12]
 8005fe4:	2480      	movs	r4, #128	; 0x80
 8005fe6:	9400      	str	r4, [sp, #0]
 8005fe8:	f7ff fee6 	bl	8005db8 <STM32L0_prog>
    //changing to Level1 for Readout Protection
    STM32L0_ReadOut_Lock(libswdctx);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	0018      	movs	r0, r3
 8005ff0:	f7ff fe1a 	bl	8005c28 <STM32L0_ReadOut_Lock>
 8005ff4:	e068      	b.n	80060c8 <STM32L0_main+0x1e8>
    }
   else
   {
	   retval = STM32L0_mass_erase(libswdctx);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	0018      	movs	r0, r3
 8005ffa:	f7ff fd8b 	bl	8005b14 <STM32L0_mass_erase>
 8005ffe:	0003      	movs	r3, r0
 8006000:	60bb      	str	r3, [r7, #8]
	       if (retval == 42)
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	2b2a      	cmp	r3, #42	; 0x2a
 8006006:	d127      	bne.n	8006058 <STM32L0_main+0x178>
	          	    {
	          	        // MCU reset performed, reinit SWD
	          	        libswd_deinit(libswdctx);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	0018      	movs	r0, r3
 800600c:	f7fb fd0d 	bl	8001a2a <libswd_deinit>
	          	        libswdctx = libswd_init();
 8006010:	f7fb fca0 	bl	8001954 <libswd_init>
 8006014:	0003      	movs	r3, r0
 8006016:	60fb      	str	r3, [r7, #12]

	          	        if (!libswd_debug_is_halted(libswdctx, LIBSWD_OPERATION_EXECUTE))
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2102      	movs	r1, #2
 800601c:	0018      	movs	r0, r3
 800601e:	f7fd f943 	bl	80032a8 <libswd_debug_is_halted>
 8006022:	1e03      	subs	r3, r0, #0
 8006024:	d10c      	bne.n	8006040 <STM32L0_main+0x160>
	          	        {
	          	            retval = libswd_debug_halt(libswdctx, LIBSWD_OPERATION_EXECUTE);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2102      	movs	r1, #2
 800602a:	0018      	movs	r0, r3
 800602c:	f7fd f89a 	bl	8003164 <libswd_debug_halt>
 8006030:	0003      	movs	r3, r0
 8006032:	60bb      	str	r3, [r7, #8]
	          	            if (retval < 0) return -101;
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	2b00      	cmp	r3, #0
 8006038:	da02      	bge.n	8006040 <STM32L0_main+0x160>
 800603a:	2365      	movs	r3, #101	; 0x65
 800603c:	425b      	negs	r3, r3
 800603e:	e048      	b.n	80060d2 <STM32L0_main+0x1f2>
	          	        }
	          	        retval = STM32L0_mass_erase(libswdctx);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	0018      	movs	r0, r3
 8006044:	f7ff fd66 	bl	8005b14 <STM32L0_mass_erase>
 8006048:	0003      	movs	r3, r0
 800604a:	60bb      	str	r3, [r7, #8]
	          	        if (retval < 0) return -102;
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	2b00      	cmp	r3, #0
 8006050:	da02      	bge.n	8006058 <STM32L0_main+0x178>
 8006052:	2366      	movs	r3, #102	; 0x66
 8006054:	425b      	negs	r3, r3
 8006056:	e03c      	b.n	80060d2 <STM32L0_main+0x1f2>
	          	    }
	      // Delay(50000);
	       // The MCU will reset while executing the option bytes reloading
	      int ret = STM32L0_set_bits(libswdctx, STM32L0_FLASH_PECR_ADDR, STM32L0_FLASH_PECR_OBL_LAUNCH);
 8006058:	2380      	movs	r3, #128	; 0x80
 800605a:	02da      	lsls	r2, r3, #11
 800605c:	4920      	ldr	r1, [pc, #128]	; (80060e0 <STM32L0_main+0x200>)
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	0018      	movs	r0, r3
 8006062:	f7ff fb2c 	bl	80056be <STM32L0_set_bits>
 8006066:	0003      	movs	r3, r0
 8006068:	607b      	str	r3, [r7, #4]
	                          if (ret < 0) return ret;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2b00      	cmp	r3, #0
 800606e:	da01      	bge.n	8006074 <STM32L0_main+0x194>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	e02e      	b.n	80060d2 <STM32L0_main+0x1f2>
	                          libswd_deinit(libswdctx);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	0018      	movs	r0, r3
 8006078:	f7fb fcd7 	bl	8001a2a <libswd_deinit>
	       libswdctx = libswd_init();
 800607c:	f7fb fc6a 	bl	8001954 <libswd_init>
 8006080:	0003      	movs	r3, r0
 8006082:	60fb      	str	r3, [r7, #12]
	       if (!libswd_debug_is_halted(libswdctx, LIBSWD_OPERATION_EXECUTE))
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2102      	movs	r1, #2
 8006088:	0018      	movs	r0, r3
 800608a:	f7fd f90d 	bl	80032a8 <libswd_debug_is_halted>
 800608e:	1e03      	subs	r3, r0, #0
 8006090:	d10c      	bne.n	80060ac <STM32L0_main+0x1cc>
	       	          	        {
	       	          	            retval = libswd_debug_halt(libswdctx, LIBSWD_OPERATION_EXECUTE);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2102      	movs	r1, #2
 8006096:	0018      	movs	r0, r3
 8006098:	f7fd f864 	bl	8003164 <libswd_debug_halt>
 800609c:	0003      	movs	r3, r0
 800609e:	60bb      	str	r3, [r7, #8]
	       	          	            if (retval < 0) return -101;
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	da02      	bge.n	80060ac <STM32L0_main+0x1cc>
 80060a6:	2365      	movs	r3, #101	; 0x65
 80060a8:	425b      	negs	r3, r3
 80060aa:	e012      	b.n	80060d2 <STM32L0_main+0x1f2>
	       	          	        }
   	STM32L0_prog(libswdctx, (uint8_t*)program1, sizeof(program1), 0x08000000, 128);
 80060ac:	2380      	movs	r3, #128	; 0x80
 80060ae:	051b      	lsls	r3, r3, #20
 80060b0:	22cb      	movs	r2, #203	; 0xcb
 80060b2:	0152      	lsls	r2, r2, #5
 80060b4:	490c      	ldr	r1, [pc, #48]	; (80060e8 <STM32L0_main+0x208>)
 80060b6:	68f8      	ldr	r0, [r7, #12]
 80060b8:	2480      	movs	r4, #128	; 0x80
 80060ba:	9400      	str	r4, [sp, #0]
 80060bc:	f7ff fe7c 	bl	8005db8 <STM32L0_prog>
    //Changing to Level1 for Readout Protection
    STM32L0_ReadOut_Lock(libswdctx);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	0018      	movs	r0, r3
 80060c4:	f7ff fdb0 	bl	8005c28 <STM32L0_ReadOut_Lock>
   }
    
    libswd_deinit(libswdctx);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	0018      	movs	r0, r3
 80060cc:	f7fb fcad 	bl	8001a2a <libswd_deinit>
    return 0;
 80060d0:	2300      	movs	r3, #0
}
 80060d2:	0018      	movs	r0, r3
 80060d4:	46bd      	mov	sp, r7
 80060d6:	b005      	add	sp, #20
 80060d8:	bd90      	pop	{r4, r7, pc}
 80060da:	46c0      	nop			; (mov r8, r8)
 80060dc:	20000008 	.word	0x20000008
 80060e0:	40022004 	.word	0x40022004
 80060e4:	0800da2c 	.word	0x0800da2c
 80060e8:	0800c0cc 	.word	0x0800c0cc

080060ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80060f0:	4b0b      	ldr	r3, [pc, #44]	; (8006120 <HAL_MspInit+0x34>)
 80060f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060f4:	4b0a      	ldr	r3, [pc, #40]	; (8006120 <HAL_MspInit+0x34>)
 80060f6:	2101      	movs	r1, #1
 80060f8:	430a      	orrs	r2, r1
 80060fa:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80060fc:	4b08      	ldr	r3, [pc, #32]	; (8006120 <HAL_MspInit+0x34>)
 80060fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006100:	4b07      	ldr	r3, [pc, #28]	; (8006120 <HAL_MspInit+0x34>)
 8006102:	2180      	movs	r1, #128	; 0x80
 8006104:	0549      	lsls	r1, r1, #21
 8006106:	430a      	orrs	r2, r1
 8006108:	639a      	str	r2, [r3, #56]	; 0x38

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_CRS_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_CRS_IRQn, 0, 0);
 800610a:	2200      	movs	r2, #0
 800610c:	2100      	movs	r1, #0
 800610e:	2004      	movs	r0, #4
 8006110:	f000 fa40 	bl	8006594 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_CRS_IRQn);
 8006114:	2004      	movs	r0, #4
 8006116:	f000 fa52 	bl	80065be <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800611a:	46c0      	nop			; (mov r8, r8)
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}
 8006120:	40021000 	.word	0x40021000

08006124 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b082      	sub	sp, #8
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	2380      	movs	r3, #128	; 0x80
 8006132:	05db      	lsls	r3, r3, #23
 8006134:	429a      	cmp	r2, r3
 8006136:	d105      	bne.n	8006144 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006138:	4b04      	ldr	r3, [pc, #16]	; (800614c <HAL_TIM_Base_MspInit+0x28>)
 800613a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800613c:	4b03      	ldr	r3, [pc, #12]	; (800614c <HAL_TIM_Base_MspInit+0x28>)
 800613e:	2101      	movs	r1, #1
 8006140:	430a      	orrs	r2, r1
 8006142:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8006144:	46c0      	nop			; (mov r8, r8)
 8006146:	46bd      	mov	sp, r7
 8006148:	b002      	add	sp, #8
 800614a:	bd80      	pop	{r7, pc}
 800614c:	40021000 	.word	0x40021000

08006150 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006154:	e7fe      	b.n	8006154 <NMI_Handler+0x4>

08006156 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006156:	b580      	push	{r7, lr}
 8006158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800615a:	e7fe      	b.n	800615a <HardFault_Handler+0x4>

0800615c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8006160:	46c0      	nop			; (mov r8, r8)
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}

08006166 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006166:	b580      	push	{r7, lr}
 8006168:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800616a:	46c0      	nop			; (mov r8, r8)
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}

08006170 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006174:	f000 f946 	bl	8006404 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006178:	46c0      	nop			; (mov r8, r8)
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}

0800617e <RCC_CRS_IRQHandler>:

/**
  * @brief This function handles RCC and CRS global interrupt.
  */
void RCC_CRS_IRQHandler(void)
{
 800617e:	b580      	push	{r7, lr}
 8006180:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_CRS_IRQn 0 */
  /* USER CODE BEGIN RCC_CRS_IRQn 1 */

  /* USER CODE END RCC_CRS_IRQn 1 */
}
 8006182:	46c0      	nop			; (mov r8, r8)
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}

08006188 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */
if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13))
 800618c:	2380      	movs	r3, #128	; 0x80
 800618e:	019b      	lsls	r3, r3, #6
 8006190:	4a0a      	ldr	r2, [pc, #40]	; (80061bc <EXTI4_15_IRQHandler+0x34>)
 8006192:	0019      	movs	r1, r3
 8006194:	0010      	movs	r0, r2
 8006196:	f000 fbad 	bl	80068f4 <HAL_GPIO_ReadPin>
 800619a:	1e03      	subs	r3, r0, #0
 800619c:	d004      	beq.n	80061a8 <EXTI4_15_IRQHandler+0x20>
{
Counter++;
 800619e:	4b08      	ldr	r3, [pc, #32]	; (80061c0 <EXTI4_15_IRQHandler+0x38>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	1c5a      	adds	r2, r3, #1
 80061a4:	4b06      	ldr	r3, [pc, #24]	; (80061c0 <EXTI4_15_IRQHandler+0x38>)
 80061a6:	601a      	str	r2, [r3, #0]
}
STM32L0_main();
 80061a8:	f7ff fe9a 	bl	8005ee0 <STM32L0_main>
  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80061ac:	2380      	movs	r3, #128	; 0x80
 80061ae:	019b      	lsls	r3, r3, #6
 80061b0:	0018      	movs	r0, r3
 80061b2:	f000 fbd9 	bl	8006968 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80061b6:	46c0      	nop			; (mov r8, r8)
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}
 80061bc:	50000800 	.word	0x50000800
 80061c0:	20000008 	.word	0x20000008

080061c4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b086      	sub	sp, #24
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	60f8      	str	r0, [r7, #12]
 80061cc:	60b9      	str	r1, [r7, #8]
 80061ce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80061d0:	2300      	movs	r3, #0
 80061d2:	617b      	str	r3, [r7, #20]
 80061d4:	e00a      	b.n	80061ec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80061d6:	e000      	b.n	80061da <_read+0x16>
 80061d8:	bf00      	nop
 80061da:	0001      	movs	r1, r0
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	1c5a      	adds	r2, r3, #1
 80061e0:	60ba      	str	r2, [r7, #8]
 80061e2:	b2ca      	uxtb	r2, r1
 80061e4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	3301      	adds	r3, #1
 80061ea:	617b      	str	r3, [r7, #20]
 80061ec:	697a      	ldr	r2, [r7, #20]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	429a      	cmp	r2, r3
 80061f2:	dbf0      	blt.n	80061d6 <_read+0x12>
	}

return len;
 80061f4:	687b      	ldr	r3, [r7, #4]
}
 80061f6:	0018      	movs	r0, r3
 80061f8:	46bd      	mov	sp, r7
 80061fa:	b006      	add	sp, #24
 80061fc:	bd80      	pop	{r7, pc}

080061fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80061fe:	b580      	push	{r7, lr}
 8006200:	b086      	sub	sp, #24
 8006202:	af00      	add	r7, sp, #0
 8006204:	60f8      	str	r0, [r7, #12]
 8006206:	60b9      	str	r1, [r7, #8]
 8006208:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800620a:	2300      	movs	r3, #0
 800620c:	617b      	str	r3, [r7, #20]
 800620e:	e009      	b.n	8006224 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	1c5a      	adds	r2, r3, #1
 8006214:	60ba      	str	r2, [r7, #8]
 8006216:	781b      	ldrb	r3, [r3, #0]
 8006218:	0018      	movs	r0, r3
 800621a:	e000      	b.n	800621e <_write+0x20>
 800621c:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	3301      	adds	r3, #1
 8006222:	617b      	str	r3, [r7, #20]
 8006224:	697a      	ldr	r2, [r7, #20]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	429a      	cmp	r2, r3
 800622a:	dbf1      	blt.n	8006210 <_write+0x12>
	}
	return len;
 800622c:	687b      	ldr	r3, [r7, #4]
}
 800622e:	0018      	movs	r0, r3
 8006230:	46bd      	mov	sp, r7
 8006232:	b006      	add	sp, #24
 8006234:	bd80      	pop	{r7, pc}

08006236 <_close>:

int _close(int file)
{
 8006236:	b580      	push	{r7, lr}
 8006238:	b082      	sub	sp, #8
 800623a:	af00      	add	r7, sp, #0
 800623c:	6078      	str	r0, [r7, #4]
	return -1;
 800623e:	2301      	movs	r3, #1
 8006240:	425b      	negs	r3, r3
}
 8006242:	0018      	movs	r0, r3
 8006244:	46bd      	mov	sp, r7
 8006246:	b002      	add	sp, #8
 8006248:	bd80      	pop	{r7, pc}

0800624a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800624a:	b580      	push	{r7, lr}
 800624c:	b082      	sub	sp, #8
 800624e:	af00      	add	r7, sp, #0
 8006250:	6078      	str	r0, [r7, #4]
 8006252:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	2280      	movs	r2, #128	; 0x80
 8006258:	0192      	lsls	r2, r2, #6
 800625a:	605a      	str	r2, [r3, #4]
	return 0;
 800625c:	2300      	movs	r3, #0
}
 800625e:	0018      	movs	r0, r3
 8006260:	46bd      	mov	sp, r7
 8006262:	b002      	add	sp, #8
 8006264:	bd80      	pop	{r7, pc}

08006266 <_isatty>:

int _isatty(int file)
{
 8006266:	b580      	push	{r7, lr}
 8006268:	b082      	sub	sp, #8
 800626a:	af00      	add	r7, sp, #0
 800626c:	6078      	str	r0, [r7, #4]
	return 1;
 800626e:	2301      	movs	r3, #1
}
 8006270:	0018      	movs	r0, r3
 8006272:	46bd      	mov	sp, r7
 8006274:	b002      	add	sp, #8
 8006276:	bd80      	pop	{r7, pc}

08006278 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b084      	sub	sp, #16
 800627c:	af00      	add	r7, sp, #0
 800627e:	60f8      	str	r0, [r7, #12]
 8006280:	60b9      	str	r1, [r7, #8]
 8006282:	607a      	str	r2, [r7, #4]
	return 0;
 8006284:	2300      	movs	r3, #0
}
 8006286:	0018      	movs	r0, r3
 8006288:	46bd      	mov	sp, r7
 800628a:	b004      	add	sp, #16
 800628c:	bd80      	pop	{r7, pc}
	...

08006290 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b086      	sub	sp, #24
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006298:	4a14      	ldr	r2, [pc, #80]	; (80062ec <_sbrk+0x5c>)
 800629a:	4b15      	ldr	r3, [pc, #84]	; (80062f0 <_sbrk+0x60>)
 800629c:	1ad3      	subs	r3, r2, r3
 800629e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80062a4:	4b13      	ldr	r3, [pc, #76]	; (80062f4 <_sbrk+0x64>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d102      	bne.n	80062b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80062ac:	4b11      	ldr	r3, [pc, #68]	; (80062f4 <_sbrk+0x64>)
 80062ae:	4a12      	ldr	r2, [pc, #72]	; (80062f8 <_sbrk+0x68>)
 80062b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80062b2:	4b10      	ldr	r3, [pc, #64]	; (80062f4 <_sbrk+0x64>)
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	18d3      	adds	r3, r2, r3
 80062ba:	693a      	ldr	r2, [r7, #16]
 80062bc:	429a      	cmp	r2, r3
 80062be:	d207      	bcs.n	80062d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80062c0:	f001 fbee 	bl	8007aa0 <__errno>
 80062c4:	0003      	movs	r3, r0
 80062c6:	220c      	movs	r2, #12
 80062c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80062ca:	2301      	movs	r3, #1
 80062cc:	425b      	negs	r3, r3
 80062ce:	e009      	b.n	80062e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80062d0:	4b08      	ldr	r3, [pc, #32]	; (80062f4 <_sbrk+0x64>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80062d6:	4b07      	ldr	r3, [pc, #28]	; (80062f4 <_sbrk+0x64>)
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	18d2      	adds	r2, r2, r3
 80062de:	4b05      	ldr	r3, [pc, #20]	; (80062f4 <_sbrk+0x64>)
 80062e0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80062e2:	68fb      	ldr	r3, [r7, #12]
}
 80062e4:	0018      	movs	r0, r3
 80062e6:	46bd      	mov	sp, r7
 80062e8:	b006      	add	sp, #24
 80062ea:	bd80      	pop	{r7, pc}
 80062ec:	20005000 	.word	0x20005000
 80062f0:	00000400 	.word	0x00000400
 80062f4:	2000013c 	.word	0x2000013c
 80062f8:	200003f8 	.word	0x200003f8

080062fc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006300:	46c0      	nop			; (mov r8, r8)
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}
	...

08006308 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8006308:	480d      	ldr	r0, [pc, #52]	; (8006340 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800630a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800630c:	480d      	ldr	r0, [pc, #52]	; (8006344 <LoopForever+0x6>)
  ldr r1, =_edata
 800630e:	490e      	ldr	r1, [pc, #56]	; (8006348 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006310:	4a0e      	ldr	r2, [pc, #56]	; (800634c <LoopForever+0xe>)
  movs r3, #0
 8006312:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006314:	e002      	b.n	800631c <LoopCopyDataInit>

08006316 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006316:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006318:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800631a:	3304      	adds	r3, #4

0800631c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800631c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800631e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006320:	d3f9      	bcc.n	8006316 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006322:	4a0b      	ldr	r2, [pc, #44]	; (8006350 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006324:	4c0b      	ldr	r4, [pc, #44]	; (8006354 <LoopForever+0x16>)
  movs r3, #0
 8006326:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006328:	e001      	b.n	800632e <LoopFillZerobss>

0800632a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800632a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800632c:	3204      	adds	r2, #4

0800632e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800632e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006330:	d3fb      	bcc.n	800632a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8006332:	f7ff ffe3 	bl	80062fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006336:	f001 fd9d 	bl	8007e74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800633a:	f7ff f861 	bl	8005400 <main>

0800633e <LoopForever>:

LoopForever:
    b LoopForever
 800633e:	e7fe      	b.n	800633e <LoopForever>
   ldr   r0, =_estack
 8006340:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8006344:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006348:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 800634c:	0800f450 	.word	0x0800f450
  ldr r2, =_sbss
 8006350:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8006354:	200003f4 	.word	0x200003f4

08006358 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006358:	e7fe      	b.n	8006358 <ADC1_COMP_IRQHandler>
	...

0800635c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b082      	sub	sp, #8
 8006360:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006362:	1dfb      	adds	r3, r7, #7
 8006364:	2200      	movs	r2, #0
 8006366:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8006368:	4b0b      	ldr	r3, [pc, #44]	; (8006398 <HAL_Init+0x3c>)
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	4b0a      	ldr	r3, [pc, #40]	; (8006398 <HAL_Init+0x3c>)
 800636e:	2140      	movs	r1, #64	; 0x40
 8006370:	430a      	orrs	r2, r1
 8006372:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006374:	2000      	movs	r0, #0
 8006376:	f000 f811 	bl	800639c <HAL_InitTick>
 800637a:	1e03      	subs	r3, r0, #0
 800637c:	d003      	beq.n	8006386 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800637e:	1dfb      	adds	r3, r7, #7
 8006380:	2201      	movs	r2, #1
 8006382:	701a      	strb	r2, [r3, #0]
 8006384:	e001      	b.n	800638a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006386:	f7ff feb1 	bl	80060ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800638a:	1dfb      	adds	r3, r7, #7
 800638c:	781b      	ldrb	r3, [r3, #0]
}
 800638e:	0018      	movs	r0, r3
 8006390:	46bd      	mov	sp, r7
 8006392:	b002      	add	sp, #8
 8006394:	bd80      	pop	{r7, pc}
 8006396:	46c0      	nop			; (mov r8, r8)
 8006398:	40022000 	.word	0x40022000

0800639c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800639c:	b590      	push	{r4, r7, lr}
 800639e:	b083      	sub	sp, #12
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80063a4:	4b14      	ldr	r3, [pc, #80]	; (80063f8 <HAL_InitTick+0x5c>)
 80063a6:	681c      	ldr	r4, [r3, #0]
 80063a8:	4b14      	ldr	r3, [pc, #80]	; (80063fc <HAL_InitTick+0x60>)
 80063aa:	781b      	ldrb	r3, [r3, #0]
 80063ac:	0019      	movs	r1, r3
 80063ae:	23fa      	movs	r3, #250	; 0xfa
 80063b0:	0098      	lsls	r0, r3, #2
 80063b2:	f7f9 febb 	bl	800012c <__udivsi3>
 80063b6:	0003      	movs	r3, r0
 80063b8:	0019      	movs	r1, r3
 80063ba:	0020      	movs	r0, r4
 80063bc:	f7f9 feb6 	bl	800012c <__udivsi3>
 80063c0:	0003      	movs	r3, r0
 80063c2:	0018      	movs	r0, r3
 80063c4:	f000 f90b 	bl	80065de <HAL_SYSTICK_Config>
 80063c8:	1e03      	subs	r3, r0, #0
 80063ca:	d001      	beq.n	80063d0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80063cc:	2301      	movs	r3, #1
 80063ce:	e00f      	b.n	80063f0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2b03      	cmp	r3, #3
 80063d4:	d80b      	bhi.n	80063ee <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80063d6:	6879      	ldr	r1, [r7, #4]
 80063d8:	2301      	movs	r3, #1
 80063da:	425b      	negs	r3, r3
 80063dc:	2200      	movs	r2, #0
 80063de:	0018      	movs	r0, r3
 80063e0:	f000 f8d8 	bl	8006594 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80063e4:	4b06      	ldr	r3, [pc, #24]	; (8006400 <HAL_InitTick+0x64>)
 80063e6:	687a      	ldr	r2, [r7, #4]
 80063e8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80063ea:	2300      	movs	r3, #0
 80063ec:	e000      	b.n	80063f0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80063ee:	2301      	movs	r3, #1
}
 80063f0:	0018      	movs	r0, r3
 80063f2:	46bd      	mov	sp, r7
 80063f4:	b003      	add	sp, #12
 80063f6:	bd90      	pop	{r4, r7, pc}
 80063f8:	2000000c 	.word	0x2000000c
 80063fc:	20000014 	.word	0x20000014
 8006400:	20000010 	.word	0x20000010

08006404 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006408:	4b05      	ldr	r3, [pc, #20]	; (8006420 <HAL_IncTick+0x1c>)
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	001a      	movs	r2, r3
 800640e:	4b05      	ldr	r3, [pc, #20]	; (8006424 <HAL_IncTick+0x20>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	18d2      	adds	r2, r2, r3
 8006414:	4b03      	ldr	r3, [pc, #12]	; (8006424 <HAL_IncTick+0x20>)
 8006416:	601a      	str	r2, [r3, #0]
}
 8006418:	46c0      	nop			; (mov r8, r8)
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
 800641e:	46c0      	nop			; (mov r8, r8)
 8006420:	20000014 	.word	0x20000014
 8006424:	200003e0 	.word	0x200003e0

08006428 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	af00      	add	r7, sp, #0
  return uwTick;
 800642c:	4b02      	ldr	r3, [pc, #8]	; (8006438 <HAL_GetTick+0x10>)
 800642e:	681b      	ldr	r3, [r3, #0]
}
 8006430:	0018      	movs	r0, r3
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}
 8006436:	46c0      	nop			; (mov r8, r8)
 8006438:	200003e0 	.word	0x200003e0

0800643c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b082      	sub	sp, #8
 8006440:	af00      	add	r7, sp, #0
 8006442:	0002      	movs	r2, r0
 8006444:	1dfb      	adds	r3, r7, #7
 8006446:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006448:	1dfb      	adds	r3, r7, #7
 800644a:	781b      	ldrb	r3, [r3, #0]
 800644c:	2b7f      	cmp	r3, #127	; 0x7f
 800644e:	d809      	bhi.n	8006464 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006450:	1dfb      	adds	r3, r7, #7
 8006452:	781b      	ldrb	r3, [r3, #0]
 8006454:	001a      	movs	r2, r3
 8006456:	231f      	movs	r3, #31
 8006458:	401a      	ands	r2, r3
 800645a:	4b04      	ldr	r3, [pc, #16]	; (800646c <__NVIC_EnableIRQ+0x30>)
 800645c:	2101      	movs	r1, #1
 800645e:	4091      	lsls	r1, r2
 8006460:	000a      	movs	r2, r1
 8006462:	601a      	str	r2, [r3, #0]
  }
}
 8006464:	46c0      	nop			; (mov r8, r8)
 8006466:	46bd      	mov	sp, r7
 8006468:	b002      	add	sp, #8
 800646a:	bd80      	pop	{r7, pc}
 800646c:	e000e100 	.word	0xe000e100

08006470 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006470:	b590      	push	{r4, r7, lr}
 8006472:	b083      	sub	sp, #12
 8006474:	af00      	add	r7, sp, #0
 8006476:	0002      	movs	r2, r0
 8006478:	6039      	str	r1, [r7, #0]
 800647a:	1dfb      	adds	r3, r7, #7
 800647c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800647e:	1dfb      	adds	r3, r7, #7
 8006480:	781b      	ldrb	r3, [r3, #0]
 8006482:	2b7f      	cmp	r3, #127	; 0x7f
 8006484:	d828      	bhi.n	80064d8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006486:	4a2f      	ldr	r2, [pc, #188]	; (8006544 <__NVIC_SetPriority+0xd4>)
 8006488:	1dfb      	adds	r3, r7, #7
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	b25b      	sxtb	r3, r3
 800648e:	089b      	lsrs	r3, r3, #2
 8006490:	33c0      	adds	r3, #192	; 0xc0
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	589b      	ldr	r3, [r3, r2]
 8006496:	1dfa      	adds	r2, r7, #7
 8006498:	7812      	ldrb	r2, [r2, #0]
 800649a:	0011      	movs	r1, r2
 800649c:	2203      	movs	r2, #3
 800649e:	400a      	ands	r2, r1
 80064a0:	00d2      	lsls	r2, r2, #3
 80064a2:	21ff      	movs	r1, #255	; 0xff
 80064a4:	4091      	lsls	r1, r2
 80064a6:	000a      	movs	r2, r1
 80064a8:	43d2      	mvns	r2, r2
 80064aa:	401a      	ands	r2, r3
 80064ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	019b      	lsls	r3, r3, #6
 80064b2:	22ff      	movs	r2, #255	; 0xff
 80064b4:	401a      	ands	r2, r3
 80064b6:	1dfb      	adds	r3, r7, #7
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	0018      	movs	r0, r3
 80064bc:	2303      	movs	r3, #3
 80064be:	4003      	ands	r3, r0
 80064c0:	00db      	lsls	r3, r3, #3
 80064c2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80064c4:	481f      	ldr	r0, [pc, #124]	; (8006544 <__NVIC_SetPriority+0xd4>)
 80064c6:	1dfb      	adds	r3, r7, #7
 80064c8:	781b      	ldrb	r3, [r3, #0]
 80064ca:	b25b      	sxtb	r3, r3
 80064cc:	089b      	lsrs	r3, r3, #2
 80064ce:	430a      	orrs	r2, r1
 80064d0:	33c0      	adds	r3, #192	; 0xc0
 80064d2:	009b      	lsls	r3, r3, #2
 80064d4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80064d6:	e031      	b.n	800653c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80064d8:	4a1b      	ldr	r2, [pc, #108]	; (8006548 <__NVIC_SetPriority+0xd8>)
 80064da:	1dfb      	adds	r3, r7, #7
 80064dc:	781b      	ldrb	r3, [r3, #0]
 80064de:	0019      	movs	r1, r3
 80064e0:	230f      	movs	r3, #15
 80064e2:	400b      	ands	r3, r1
 80064e4:	3b08      	subs	r3, #8
 80064e6:	089b      	lsrs	r3, r3, #2
 80064e8:	3306      	adds	r3, #6
 80064ea:	009b      	lsls	r3, r3, #2
 80064ec:	18d3      	adds	r3, r2, r3
 80064ee:	3304      	adds	r3, #4
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	1dfa      	adds	r2, r7, #7
 80064f4:	7812      	ldrb	r2, [r2, #0]
 80064f6:	0011      	movs	r1, r2
 80064f8:	2203      	movs	r2, #3
 80064fa:	400a      	ands	r2, r1
 80064fc:	00d2      	lsls	r2, r2, #3
 80064fe:	21ff      	movs	r1, #255	; 0xff
 8006500:	4091      	lsls	r1, r2
 8006502:	000a      	movs	r2, r1
 8006504:	43d2      	mvns	r2, r2
 8006506:	401a      	ands	r2, r3
 8006508:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	019b      	lsls	r3, r3, #6
 800650e:	22ff      	movs	r2, #255	; 0xff
 8006510:	401a      	ands	r2, r3
 8006512:	1dfb      	adds	r3, r7, #7
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	0018      	movs	r0, r3
 8006518:	2303      	movs	r3, #3
 800651a:	4003      	ands	r3, r0
 800651c:	00db      	lsls	r3, r3, #3
 800651e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006520:	4809      	ldr	r0, [pc, #36]	; (8006548 <__NVIC_SetPriority+0xd8>)
 8006522:	1dfb      	adds	r3, r7, #7
 8006524:	781b      	ldrb	r3, [r3, #0]
 8006526:	001c      	movs	r4, r3
 8006528:	230f      	movs	r3, #15
 800652a:	4023      	ands	r3, r4
 800652c:	3b08      	subs	r3, #8
 800652e:	089b      	lsrs	r3, r3, #2
 8006530:	430a      	orrs	r2, r1
 8006532:	3306      	adds	r3, #6
 8006534:	009b      	lsls	r3, r3, #2
 8006536:	18c3      	adds	r3, r0, r3
 8006538:	3304      	adds	r3, #4
 800653a:	601a      	str	r2, [r3, #0]
}
 800653c:	46c0      	nop			; (mov r8, r8)
 800653e:	46bd      	mov	sp, r7
 8006540:	b003      	add	sp, #12
 8006542:	bd90      	pop	{r4, r7, pc}
 8006544:	e000e100 	.word	0xe000e100
 8006548:	e000ed00 	.word	0xe000ed00

0800654c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b082      	sub	sp, #8
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	1e5a      	subs	r2, r3, #1
 8006558:	2380      	movs	r3, #128	; 0x80
 800655a:	045b      	lsls	r3, r3, #17
 800655c:	429a      	cmp	r2, r3
 800655e:	d301      	bcc.n	8006564 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006560:	2301      	movs	r3, #1
 8006562:	e010      	b.n	8006586 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006564:	4b0a      	ldr	r3, [pc, #40]	; (8006590 <SysTick_Config+0x44>)
 8006566:	687a      	ldr	r2, [r7, #4]
 8006568:	3a01      	subs	r2, #1
 800656a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800656c:	2301      	movs	r3, #1
 800656e:	425b      	negs	r3, r3
 8006570:	2103      	movs	r1, #3
 8006572:	0018      	movs	r0, r3
 8006574:	f7ff ff7c 	bl	8006470 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006578:	4b05      	ldr	r3, [pc, #20]	; (8006590 <SysTick_Config+0x44>)
 800657a:	2200      	movs	r2, #0
 800657c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800657e:	4b04      	ldr	r3, [pc, #16]	; (8006590 <SysTick_Config+0x44>)
 8006580:	2207      	movs	r2, #7
 8006582:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006584:	2300      	movs	r3, #0
}
 8006586:	0018      	movs	r0, r3
 8006588:	46bd      	mov	sp, r7
 800658a:	b002      	add	sp, #8
 800658c:	bd80      	pop	{r7, pc}
 800658e:	46c0      	nop			; (mov r8, r8)
 8006590:	e000e010 	.word	0xe000e010

08006594 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006594:	b580      	push	{r7, lr}
 8006596:	b084      	sub	sp, #16
 8006598:	af00      	add	r7, sp, #0
 800659a:	60b9      	str	r1, [r7, #8]
 800659c:	607a      	str	r2, [r7, #4]
 800659e:	210f      	movs	r1, #15
 80065a0:	187b      	adds	r3, r7, r1
 80065a2:	1c02      	adds	r2, r0, #0
 80065a4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80065a6:	68ba      	ldr	r2, [r7, #8]
 80065a8:	187b      	adds	r3, r7, r1
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	b25b      	sxtb	r3, r3
 80065ae:	0011      	movs	r1, r2
 80065b0:	0018      	movs	r0, r3
 80065b2:	f7ff ff5d 	bl	8006470 <__NVIC_SetPriority>
}
 80065b6:	46c0      	nop			; (mov r8, r8)
 80065b8:	46bd      	mov	sp, r7
 80065ba:	b004      	add	sp, #16
 80065bc:	bd80      	pop	{r7, pc}

080065be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80065be:	b580      	push	{r7, lr}
 80065c0:	b082      	sub	sp, #8
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	0002      	movs	r2, r0
 80065c6:	1dfb      	adds	r3, r7, #7
 80065c8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80065ca:	1dfb      	adds	r3, r7, #7
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	b25b      	sxtb	r3, r3
 80065d0:	0018      	movs	r0, r3
 80065d2:	f7ff ff33 	bl	800643c <__NVIC_EnableIRQ>
}
 80065d6:	46c0      	nop			; (mov r8, r8)
 80065d8:	46bd      	mov	sp, r7
 80065da:	b002      	add	sp, #8
 80065dc:	bd80      	pop	{r7, pc}

080065de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80065de:	b580      	push	{r7, lr}
 80065e0:	b082      	sub	sp, #8
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	0018      	movs	r0, r3
 80065ea:	f7ff ffaf 	bl	800654c <SysTick_Config>
 80065ee:	0003      	movs	r3, r0
}
 80065f0:	0018      	movs	r0, r3
 80065f2:	46bd      	mov	sp, r7
 80065f4:	b002      	add	sp, #8
 80065f6:	bd80      	pop	{r7, pc}

080065f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b086      	sub	sp, #24
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006602:	2300      	movs	r3, #0
 8006604:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006606:	2300      	movs	r3, #0
 8006608:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800660a:	2300      	movs	r3, #0
 800660c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800660e:	e155      	b.n	80068bc <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	2101      	movs	r1, #1
 8006616:	697a      	ldr	r2, [r7, #20]
 8006618:	4091      	lsls	r1, r2
 800661a:	000a      	movs	r2, r1
 800661c:	4013      	ands	r3, r2
 800661e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d100      	bne.n	8006628 <HAL_GPIO_Init+0x30>
 8006626:	e146      	b.n	80068b6 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	2b01      	cmp	r3, #1
 800662e:	d00b      	beq.n	8006648 <HAL_GPIO_Init+0x50>
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	2b02      	cmp	r3, #2
 8006636:	d007      	beq.n	8006648 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800663c:	2b11      	cmp	r3, #17
 800663e:	d003      	beq.n	8006648 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	2b12      	cmp	r3, #18
 8006646:	d130      	bne.n	80066aa <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	005b      	lsls	r3, r3, #1
 8006652:	2203      	movs	r2, #3
 8006654:	409a      	lsls	r2, r3
 8006656:	0013      	movs	r3, r2
 8006658:	43da      	mvns	r2, r3
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	4013      	ands	r3, r2
 800665e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	68da      	ldr	r2, [r3, #12]
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	005b      	lsls	r3, r3, #1
 8006668:	409a      	lsls	r2, r3
 800666a:	0013      	movs	r3, r2
 800666c:	693a      	ldr	r2, [r7, #16]
 800666e:	4313      	orrs	r3, r2
 8006670:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	693a      	ldr	r2, [r7, #16]
 8006676:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800667e:	2201      	movs	r2, #1
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	409a      	lsls	r2, r3
 8006684:	0013      	movs	r3, r2
 8006686:	43da      	mvns	r2, r3
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	4013      	ands	r3, r2
 800668c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	091b      	lsrs	r3, r3, #4
 8006694:	2201      	movs	r2, #1
 8006696:	401a      	ands	r2, r3
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	409a      	lsls	r2, r3
 800669c:	0013      	movs	r3, r2
 800669e:	693a      	ldr	r2, [r7, #16]
 80066a0:	4313      	orrs	r3, r2
 80066a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	693a      	ldr	r2, [r7, #16]
 80066a8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	68db      	ldr	r3, [r3, #12]
 80066ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	005b      	lsls	r3, r3, #1
 80066b4:	2203      	movs	r2, #3
 80066b6:	409a      	lsls	r2, r3
 80066b8:	0013      	movs	r3, r2
 80066ba:	43da      	mvns	r2, r3
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	4013      	ands	r3, r2
 80066c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	689a      	ldr	r2, [r3, #8]
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	005b      	lsls	r3, r3, #1
 80066ca:	409a      	lsls	r2, r3
 80066cc:	0013      	movs	r3, r2
 80066ce:	693a      	ldr	r2, [r7, #16]
 80066d0:	4313      	orrs	r3, r2
 80066d2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	693a      	ldr	r2, [r7, #16]
 80066d8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	2b02      	cmp	r3, #2
 80066e0:	d003      	beq.n	80066ea <HAL_GPIO_Init+0xf2>
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	2b12      	cmp	r3, #18
 80066e8:	d123      	bne.n	8006732 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	08da      	lsrs	r2, r3, #3
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	3208      	adds	r2, #8
 80066f2:	0092      	lsls	r2, r2, #2
 80066f4:	58d3      	ldr	r3, [r2, r3]
 80066f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	2207      	movs	r2, #7
 80066fc:	4013      	ands	r3, r2
 80066fe:	009b      	lsls	r3, r3, #2
 8006700:	220f      	movs	r2, #15
 8006702:	409a      	lsls	r2, r3
 8006704:	0013      	movs	r3, r2
 8006706:	43da      	mvns	r2, r3
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	4013      	ands	r3, r2
 800670c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	691a      	ldr	r2, [r3, #16]
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	2107      	movs	r1, #7
 8006716:	400b      	ands	r3, r1
 8006718:	009b      	lsls	r3, r3, #2
 800671a:	409a      	lsls	r2, r3
 800671c:	0013      	movs	r3, r2
 800671e:	693a      	ldr	r2, [r7, #16]
 8006720:	4313      	orrs	r3, r2
 8006722:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	08da      	lsrs	r2, r3, #3
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	3208      	adds	r2, #8
 800672c:	0092      	lsls	r2, r2, #2
 800672e:	6939      	ldr	r1, [r7, #16]
 8006730:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	005b      	lsls	r3, r3, #1
 800673c:	2203      	movs	r2, #3
 800673e:	409a      	lsls	r2, r3
 8006740:	0013      	movs	r3, r2
 8006742:	43da      	mvns	r2, r3
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	4013      	ands	r3, r2
 8006748:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	2203      	movs	r2, #3
 8006750:	401a      	ands	r2, r3
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	005b      	lsls	r3, r3, #1
 8006756:	409a      	lsls	r2, r3
 8006758:	0013      	movs	r3, r2
 800675a:	693a      	ldr	r2, [r7, #16]
 800675c:	4313      	orrs	r3, r2
 800675e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	693a      	ldr	r2, [r7, #16]
 8006764:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	685a      	ldr	r2, [r3, #4]
 800676a:	2380      	movs	r3, #128	; 0x80
 800676c:	055b      	lsls	r3, r3, #21
 800676e:	4013      	ands	r3, r2
 8006770:	d100      	bne.n	8006774 <HAL_GPIO_Init+0x17c>
 8006772:	e0a0      	b.n	80068b6 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006774:	4b57      	ldr	r3, [pc, #348]	; (80068d4 <HAL_GPIO_Init+0x2dc>)
 8006776:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006778:	4b56      	ldr	r3, [pc, #344]	; (80068d4 <HAL_GPIO_Init+0x2dc>)
 800677a:	2101      	movs	r1, #1
 800677c:	430a      	orrs	r2, r1
 800677e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8006780:	4a55      	ldr	r2, [pc, #340]	; (80068d8 <HAL_GPIO_Init+0x2e0>)
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	089b      	lsrs	r3, r3, #2
 8006786:	3302      	adds	r3, #2
 8006788:	009b      	lsls	r3, r3, #2
 800678a:	589b      	ldr	r3, [r3, r2]
 800678c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	2203      	movs	r2, #3
 8006792:	4013      	ands	r3, r2
 8006794:	009b      	lsls	r3, r3, #2
 8006796:	220f      	movs	r2, #15
 8006798:	409a      	lsls	r2, r3
 800679a:	0013      	movs	r3, r2
 800679c:	43da      	mvns	r2, r3
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	4013      	ands	r3, r2
 80067a2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80067a4:	687a      	ldr	r2, [r7, #4]
 80067a6:	23a0      	movs	r3, #160	; 0xa0
 80067a8:	05db      	lsls	r3, r3, #23
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d01f      	beq.n	80067ee <HAL_GPIO_Init+0x1f6>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	4a4a      	ldr	r2, [pc, #296]	; (80068dc <HAL_GPIO_Init+0x2e4>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d019      	beq.n	80067ea <HAL_GPIO_Init+0x1f2>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	4a49      	ldr	r2, [pc, #292]	; (80068e0 <HAL_GPIO_Init+0x2e8>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d013      	beq.n	80067e6 <HAL_GPIO_Init+0x1ee>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	4a48      	ldr	r2, [pc, #288]	; (80068e4 <HAL_GPIO_Init+0x2ec>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d00d      	beq.n	80067e2 <HAL_GPIO_Init+0x1ea>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	4a47      	ldr	r2, [pc, #284]	; (80068e8 <HAL_GPIO_Init+0x2f0>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d007      	beq.n	80067de <HAL_GPIO_Init+0x1e6>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	4a46      	ldr	r2, [pc, #280]	; (80068ec <HAL_GPIO_Init+0x2f4>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d101      	bne.n	80067da <HAL_GPIO_Init+0x1e2>
 80067d6:	2305      	movs	r3, #5
 80067d8:	e00a      	b.n	80067f0 <HAL_GPIO_Init+0x1f8>
 80067da:	2306      	movs	r3, #6
 80067dc:	e008      	b.n	80067f0 <HAL_GPIO_Init+0x1f8>
 80067de:	2304      	movs	r3, #4
 80067e0:	e006      	b.n	80067f0 <HAL_GPIO_Init+0x1f8>
 80067e2:	2303      	movs	r3, #3
 80067e4:	e004      	b.n	80067f0 <HAL_GPIO_Init+0x1f8>
 80067e6:	2302      	movs	r3, #2
 80067e8:	e002      	b.n	80067f0 <HAL_GPIO_Init+0x1f8>
 80067ea:	2301      	movs	r3, #1
 80067ec:	e000      	b.n	80067f0 <HAL_GPIO_Init+0x1f8>
 80067ee:	2300      	movs	r3, #0
 80067f0:	697a      	ldr	r2, [r7, #20]
 80067f2:	2103      	movs	r1, #3
 80067f4:	400a      	ands	r2, r1
 80067f6:	0092      	lsls	r2, r2, #2
 80067f8:	4093      	lsls	r3, r2
 80067fa:	693a      	ldr	r2, [r7, #16]
 80067fc:	4313      	orrs	r3, r2
 80067fe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006800:	4935      	ldr	r1, [pc, #212]	; (80068d8 <HAL_GPIO_Init+0x2e0>)
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	089b      	lsrs	r3, r3, #2
 8006806:	3302      	adds	r3, #2
 8006808:	009b      	lsls	r3, r3, #2
 800680a:	693a      	ldr	r2, [r7, #16]
 800680c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800680e:	4b38      	ldr	r3, [pc, #224]	; (80068f0 <HAL_GPIO_Init+0x2f8>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	43da      	mvns	r2, r3
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	4013      	ands	r3, r2
 800681c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	685a      	ldr	r2, [r3, #4]
 8006822:	2380      	movs	r3, #128	; 0x80
 8006824:	025b      	lsls	r3, r3, #9
 8006826:	4013      	ands	r3, r2
 8006828:	d003      	beq.n	8006832 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800682a:	693a      	ldr	r2, [r7, #16]
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	4313      	orrs	r3, r2
 8006830:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8006832:	4b2f      	ldr	r3, [pc, #188]	; (80068f0 <HAL_GPIO_Init+0x2f8>)
 8006834:	693a      	ldr	r2, [r7, #16]
 8006836:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8006838:	4b2d      	ldr	r3, [pc, #180]	; (80068f0 <HAL_GPIO_Init+0x2f8>)
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	43da      	mvns	r2, r3
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	4013      	ands	r3, r2
 8006846:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	685a      	ldr	r2, [r3, #4]
 800684c:	2380      	movs	r3, #128	; 0x80
 800684e:	029b      	lsls	r3, r3, #10
 8006850:	4013      	ands	r3, r2
 8006852:	d003      	beq.n	800685c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8006854:	693a      	ldr	r2, [r7, #16]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	4313      	orrs	r3, r2
 800685a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800685c:	4b24      	ldr	r3, [pc, #144]	; (80068f0 <HAL_GPIO_Init+0x2f8>)
 800685e:	693a      	ldr	r2, [r7, #16]
 8006860:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006862:	4b23      	ldr	r3, [pc, #140]	; (80068f0 <HAL_GPIO_Init+0x2f8>)
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	43da      	mvns	r2, r3
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	4013      	ands	r3, r2
 8006870:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	685a      	ldr	r2, [r3, #4]
 8006876:	2380      	movs	r3, #128	; 0x80
 8006878:	035b      	lsls	r3, r3, #13
 800687a:	4013      	ands	r3, r2
 800687c:	d003      	beq.n	8006886 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800687e:	693a      	ldr	r2, [r7, #16]
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	4313      	orrs	r3, r2
 8006884:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8006886:	4b1a      	ldr	r3, [pc, #104]	; (80068f0 <HAL_GPIO_Init+0x2f8>)
 8006888:	693a      	ldr	r2, [r7, #16]
 800688a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800688c:	4b18      	ldr	r3, [pc, #96]	; (80068f0 <HAL_GPIO_Init+0x2f8>)
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	43da      	mvns	r2, r3
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	4013      	ands	r3, r2
 800689a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	685a      	ldr	r2, [r3, #4]
 80068a0:	2380      	movs	r3, #128	; 0x80
 80068a2:	039b      	lsls	r3, r3, #14
 80068a4:	4013      	ands	r3, r2
 80068a6:	d003      	beq.n	80068b0 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80068a8:	693a      	ldr	r2, [r7, #16]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	4313      	orrs	r3, r2
 80068ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80068b0:	4b0f      	ldr	r3, [pc, #60]	; (80068f0 <HAL_GPIO_Init+0x2f8>)
 80068b2:	693a      	ldr	r2, [r7, #16]
 80068b4:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	3301      	adds	r3, #1
 80068ba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	40da      	lsrs	r2, r3
 80068c4:	1e13      	subs	r3, r2, #0
 80068c6:	d000      	beq.n	80068ca <HAL_GPIO_Init+0x2d2>
 80068c8:	e6a2      	b.n	8006610 <HAL_GPIO_Init+0x18>
  }
}
 80068ca:	46c0      	nop			; (mov r8, r8)
 80068cc:	46c0      	nop			; (mov r8, r8)
 80068ce:	46bd      	mov	sp, r7
 80068d0:	b006      	add	sp, #24
 80068d2:	bd80      	pop	{r7, pc}
 80068d4:	40021000 	.word	0x40021000
 80068d8:	40010000 	.word	0x40010000
 80068dc:	50000400 	.word	0x50000400
 80068e0:	50000800 	.word	0x50000800
 80068e4:	50000c00 	.word	0x50000c00
 80068e8:	50001000 	.word	0x50001000
 80068ec:	50001c00 	.word	0x50001c00
 80068f0:	40010400 	.word	0x40010400

080068f4 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b084      	sub	sp, #16
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	000a      	movs	r2, r1
 80068fe:	1cbb      	adds	r3, r7, #2
 8006900:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	691b      	ldr	r3, [r3, #16]
 8006906:	1cba      	adds	r2, r7, #2
 8006908:	8812      	ldrh	r2, [r2, #0]
 800690a:	4013      	ands	r3, r2
 800690c:	d004      	beq.n	8006918 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800690e:	230f      	movs	r3, #15
 8006910:	18fb      	adds	r3, r7, r3
 8006912:	2201      	movs	r2, #1
 8006914:	701a      	strb	r2, [r3, #0]
 8006916:	e003      	b.n	8006920 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006918:	230f      	movs	r3, #15
 800691a:	18fb      	adds	r3, r7, r3
 800691c:	2200      	movs	r2, #0
 800691e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8006920:	230f      	movs	r3, #15
 8006922:	18fb      	adds	r3, r7, r3
 8006924:	781b      	ldrb	r3, [r3, #0]
}
 8006926:	0018      	movs	r0, r3
 8006928:	46bd      	mov	sp, r7
 800692a:	b004      	add	sp, #16
 800692c:	bd80      	pop	{r7, pc}

0800692e <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800692e:	b580      	push	{r7, lr}
 8006930:	b082      	sub	sp, #8
 8006932:	af00      	add	r7, sp, #0
 8006934:	6078      	str	r0, [r7, #4]
 8006936:	0008      	movs	r0, r1
 8006938:	0011      	movs	r1, r2
 800693a:	1cbb      	adds	r3, r7, #2
 800693c:	1c02      	adds	r2, r0, #0
 800693e:	801a      	strh	r2, [r3, #0]
 8006940:	1c7b      	adds	r3, r7, #1
 8006942:	1c0a      	adds	r2, r1, #0
 8006944:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006946:	1c7b      	adds	r3, r7, #1
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d004      	beq.n	8006958 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800694e:	1cbb      	adds	r3, r7, #2
 8006950:	881a      	ldrh	r2, [r3, #0]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8006956:	e003      	b.n	8006960 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8006958:	1cbb      	adds	r3, r7, #2
 800695a:	881a      	ldrh	r2, [r3, #0]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006960:	46c0      	nop			; (mov r8, r8)
 8006962:	46bd      	mov	sp, r7
 8006964:	b002      	add	sp, #8
 8006966:	bd80      	pop	{r7, pc}

08006968 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b082      	sub	sp, #8
 800696c:	af00      	add	r7, sp, #0
 800696e:	0002      	movs	r2, r0
 8006970:	1dbb      	adds	r3, r7, #6
 8006972:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006974:	4b09      	ldr	r3, [pc, #36]	; (800699c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8006976:	695b      	ldr	r3, [r3, #20]
 8006978:	1dba      	adds	r2, r7, #6
 800697a:	8812      	ldrh	r2, [r2, #0]
 800697c:	4013      	ands	r3, r2
 800697e:	d008      	beq.n	8006992 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006980:	4b06      	ldr	r3, [pc, #24]	; (800699c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8006982:	1dba      	adds	r2, r7, #6
 8006984:	8812      	ldrh	r2, [r2, #0]
 8006986:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006988:	1dbb      	adds	r3, r7, #6
 800698a:	881b      	ldrh	r3, [r3, #0]
 800698c:	0018      	movs	r0, r3
 800698e:	f000 f807 	bl	80069a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8006992:	46c0      	nop			; (mov r8, r8)
 8006994:	46bd      	mov	sp, r7
 8006996:	b002      	add	sp, #8
 8006998:	bd80      	pop	{r7, pc}
 800699a:	46c0      	nop			; (mov r8, r8)
 800699c:	40010400 	.word	0x40010400

080069a0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b082      	sub	sp, #8
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	0002      	movs	r2, r0
 80069a8:	1dbb      	adds	r3, r7, #6
 80069aa:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80069ac:	46c0      	nop			; (mov r8, r8)
 80069ae:	46bd      	mov	sp, r7
 80069b0:	b002      	add	sp, #8
 80069b2:	bd80      	pop	{r7, pc}

080069b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80069b4:	b5b0      	push	{r4, r5, r7, lr}
 80069b6:	b08a      	sub	sp, #40	; 0x28
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d102      	bne.n	80069c8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80069c2:	2301      	movs	r3, #1
 80069c4:	f000 fbbf 	bl	8007146 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80069c8:	4bc9      	ldr	r3, [pc, #804]	; (8006cf0 <HAL_RCC_OscConfig+0x33c>)
 80069ca:	68db      	ldr	r3, [r3, #12]
 80069cc:	220c      	movs	r2, #12
 80069ce:	4013      	ands	r3, r2
 80069d0:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80069d2:	4bc7      	ldr	r3, [pc, #796]	; (8006cf0 <HAL_RCC_OscConfig+0x33c>)
 80069d4:	68da      	ldr	r2, [r3, #12]
 80069d6:	2380      	movs	r3, #128	; 0x80
 80069d8:	025b      	lsls	r3, r3, #9
 80069da:	4013      	ands	r3, r2
 80069dc:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	2201      	movs	r2, #1
 80069e4:	4013      	ands	r3, r2
 80069e6:	d100      	bne.n	80069ea <HAL_RCC_OscConfig+0x36>
 80069e8:	e07e      	b.n	8006ae8 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80069ea:	69fb      	ldr	r3, [r7, #28]
 80069ec:	2b08      	cmp	r3, #8
 80069ee:	d007      	beq.n	8006a00 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80069f0:	69fb      	ldr	r3, [r7, #28]
 80069f2:	2b0c      	cmp	r3, #12
 80069f4:	d112      	bne.n	8006a1c <HAL_RCC_OscConfig+0x68>
 80069f6:	69ba      	ldr	r2, [r7, #24]
 80069f8:	2380      	movs	r3, #128	; 0x80
 80069fa:	025b      	lsls	r3, r3, #9
 80069fc:	429a      	cmp	r2, r3
 80069fe:	d10d      	bne.n	8006a1c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a00:	4bbb      	ldr	r3, [pc, #748]	; (8006cf0 <HAL_RCC_OscConfig+0x33c>)
 8006a02:	681a      	ldr	r2, [r3, #0]
 8006a04:	2380      	movs	r3, #128	; 0x80
 8006a06:	029b      	lsls	r3, r3, #10
 8006a08:	4013      	ands	r3, r2
 8006a0a:	d100      	bne.n	8006a0e <HAL_RCC_OscConfig+0x5a>
 8006a0c:	e06b      	b.n	8006ae6 <HAL_RCC_OscConfig+0x132>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d167      	bne.n	8006ae6 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8006a16:	2301      	movs	r3, #1
 8006a18:	f000 fb95 	bl	8007146 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	685a      	ldr	r2, [r3, #4]
 8006a20:	2380      	movs	r3, #128	; 0x80
 8006a22:	025b      	lsls	r3, r3, #9
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d107      	bne.n	8006a38 <HAL_RCC_OscConfig+0x84>
 8006a28:	4bb1      	ldr	r3, [pc, #708]	; (8006cf0 <HAL_RCC_OscConfig+0x33c>)
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	4bb0      	ldr	r3, [pc, #704]	; (8006cf0 <HAL_RCC_OscConfig+0x33c>)
 8006a2e:	2180      	movs	r1, #128	; 0x80
 8006a30:	0249      	lsls	r1, r1, #9
 8006a32:	430a      	orrs	r2, r1
 8006a34:	601a      	str	r2, [r3, #0]
 8006a36:	e027      	b.n	8006a88 <HAL_RCC_OscConfig+0xd4>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	685a      	ldr	r2, [r3, #4]
 8006a3c:	23a0      	movs	r3, #160	; 0xa0
 8006a3e:	02db      	lsls	r3, r3, #11
 8006a40:	429a      	cmp	r2, r3
 8006a42:	d10e      	bne.n	8006a62 <HAL_RCC_OscConfig+0xae>
 8006a44:	4baa      	ldr	r3, [pc, #680]	; (8006cf0 <HAL_RCC_OscConfig+0x33c>)
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	4ba9      	ldr	r3, [pc, #676]	; (8006cf0 <HAL_RCC_OscConfig+0x33c>)
 8006a4a:	2180      	movs	r1, #128	; 0x80
 8006a4c:	02c9      	lsls	r1, r1, #11
 8006a4e:	430a      	orrs	r2, r1
 8006a50:	601a      	str	r2, [r3, #0]
 8006a52:	4ba7      	ldr	r3, [pc, #668]	; (8006cf0 <HAL_RCC_OscConfig+0x33c>)
 8006a54:	681a      	ldr	r2, [r3, #0]
 8006a56:	4ba6      	ldr	r3, [pc, #664]	; (8006cf0 <HAL_RCC_OscConfig+0x33c>)
 8006a58:	2180      	movs	r1, #128	; 0x80
 8006a5a:	0249      	lsls	r1, r1, #9
 8006a5c:	430a      	orrs	r2, r1
 8006a5e:	601a      	str	r2, [r3, #0]
 8006a60:	e012      	b.n	8006a88 <HAL_RCC_OscConfig+0xd4>
 8006a62:	4ba3      	ldr	r3, [pc, #652]	; (8006cf0 <HAL_RCC_OscConfig+0x33c>)
 8006a64:	681a      	ldr	r2, [r3, #0]
 8006a66:	4ba2      	ldr	r3, [pc, #648]	; (8006cf0 <HAL_RCC_OscConfig+0x33c>)
 8006a68:	49a2      	ldr	r1, [pc, #648]	; (8006cf4 <HAL_RCC_OscConfig+0x340>)
 8006a6a:	400a      	ands	r2, r1
 8006a6c:	601a      	str	r2, [r3, #0]
 8006a6e:	4ba0      	ldr	r3, [pc, #640]	; (8006cf0 <HAL_RCC_OscConfig+0x33c>)
 8006a70:	681a      	ldr	r2, [r3, #0]
 8006a72:	2380      	movs	r3, #128	; 0x80
 8006a74:	025b      	lsls	r3, r3, #9
 8006a76:	4013      	ands	r3, r2
 8006a78:	60fb      	str	r3, [r7, #12]
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	4b9c      	ldr	r3, [pc, #624]	; (8006cf0 <HAL_RCC_OscConfig+0x33c>)
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	4b9b      	ldr	r3, [pc, #620]	; (8006cf0 <HAL_RCC_OscConfig+0x33c>)
 8006a82:	499d      	ldr	r1, [pc, #628]	; (8006cf8 <HAL_RCC_OscConfig+0x344>)
 8006a84:	400a      	ands	r2, r1
 8006a86:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d015      	beq.n	8006abc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a90:	f7ff fcca 	bl	8006428 <HAL_GetTick>
 8006a94:	0003      	movs	r3, r0
 8006a96:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006a98:	e009      	b.n	8006aae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a9a:	f7ff fcc5 	bl	8006428 <HAL_GetTick>
 8006a9e:	0002      	movs	r2, r0
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	1ad3      	subs	r3, r2, r3
 8006aa4:	2b64      	cmp	r3, #100	; 0x64
 8006aa6:	d902      	bls.n	8006aae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006aa8:	2303      	movs	r3, #3
 8006aaa:	f000 fb4c 	bl	8007146 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006aae:	4b90      	ldr	r3, [pc, #576]	; (8006cf0 <HAL_RCC_OscConfig+0x33c>)
 8006ab0:	681a      	ldr	r2, [r3, #0]
 8006ab2:	2380      	movs	r3, #128	; 0x80
 8006ab4:	029b      	lsls	r3, r3, #10
 8006ab6:	4013      	ands	r3, r2
 8006ab8:	d0ef      	beq.n	8006a9a <HAL_RCC_OscConfig+0xe6>
 8006aba:	e015      	b.n	8006ae8 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006abc:	f7ff fcb4 	bl	8006428 <HAL_GetTick>
 8006ac0:	0003      	movs	r3, r0
 8006ac2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006ac4:	e008      	b.n	8006ad8 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006ac6:	f7ff fcaf 	bl	8006428 <HAL_GetTick>
 8006aca:	0002      	movs	r2, r0
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	1ad3      	subs	r3, r2, r3
 8006ad0:	2b64      	cmp	r3, #100	; 0x64
 8006ad2:	d901      	bls.n	8006ad8 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8006ad4:	2303      	movs	r3, #3
 8006ad6:	e336      	b.n	8007146 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006ad8:	4b85      	ldr	r3, [pc, #532]	; (8006cf0 <HAL_RCC_OscConfig+0x33c>)
 8006ada:	681a      	ldr	r2, [r3, #0]
 8006adc:	2380      	movs	r3, #128	; 0x80
 8006ade:	029b      	lsls	r3, r3, #10
 8006ae0:	4013      	ands	r3, r2
 8006ae2:	d1f0      	bne.n	8006ac6 <HAL_RCC_OscConfig+0x112>
 8006ae4:	e000      	b.n	8006ae8 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ae6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	2202      	movs	r2, #2
 8006aee:	4013      	ands	r3, r2
 8006af0:	d100      	bne.n	8006af4 <HAL_RCC_OscConfig+0x140>
 8006af2:	e099      	b.n	8006c28 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	68db      	ldr	r3, [r3, #12]
 8006af8:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8006afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afc:	2220      	movs	r2, #32
 8006afe:	4013      	ands	r3, r2
 8006b00:	d009      	beq.n	8006b16 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8006b02:	4b7b      	ldr	r3, [pc, #492]	; (8006cf0 <HAL_RCC_OscConfig+0x33c>)
 8006b04:	681a      	ldr	r2, [r3, #0]
 8006b06:	4b7a      	ldr	r3, [pc, #488]	; (8006cf0 <HAL_RCC_OscConfig+0x33c>)
 8006b08:	2120      	movs	r1, #32
 8006b0a:	430a      	orrs	r2, r1
 8006b0c:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8006b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b10:	2220      	movs	r2, #32
 8006b12:	4393      	bics	r3, r2
 8006b14:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006b16:	69fb      	ldr	r3, [r7, #28]
 8006b18:	2b04      	cmp	r3, #4
 8006b1a:	d005      	beq.n	8006b28 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006b1c:	69fb      	ldr	r3, [r7, #28]
 8006b1e:	2b0c      	cmp	r3, #12
 8006b20:	d13e      	bne.n	8006ba0 <HAL_RCC_OscConfig+0x1ec>
 8006b22:	69bb      	ldr	r3, [r7, #24]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d13b      	bne.n	8006ba0 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8006b28:	4b71      	ldr	r3, [pc, #452]	; (8006cf0 <HAL_RCC_OscConfig+0x33c>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	2204      	movs	r2, #4
 8006b2e:	4013      	ands	r3, r2
 8006b30:	d004      	beq.n	8006b3c <HAL_RCC_OscConfig+0x188>
 8006b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d101      	bne.n	8006b3c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	e304      	b.n	8007146 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b3c:	4b6c      	ldr	r3, [pc, #432]	; (8006cf0 <HAL_RCC_OscConfig+0x33c>)
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	4a6e      	ldr	r2, [pc, #440]	; (8006cfc <HAL_RCC_OscConfig+0x348>)
 8006b42:	4013      	ands	r3, r2
 8006b44:	0019      	movs	r1, r3
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	691b      	ldr	r3, [r3, #16]
 8006b4a:	021a      	lsls	r2, r3, #8
 8006b4c:	4b68      	ldr	r3, [pc, #416]	; (8006cf0 <HAL_RCC_OscConfig+0x33c>)
 8006b4e:	430a      	orrs	r2, r1
 8006b50:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8006b52:	4b67      	ldr	r3, [pc, #412]	; (8006cf0 <HAL_RCC_OscConfig+0x33c>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	2209      	movs	r2, #9
 8006b58:	4393      	bics	r3, r2
 8006b5a:	0019      	movs	r1, r3
 8006b5c:	4b64      	ldr	r3, [pc, #400]	; (8006cf0 <HAL_RCC_OscConfig+0x33c>)
 8006b5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b60:	430a      	orrs	r2, r1
 8006b62:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006b64:	f000 fc42 	bl	80073ec <HAL_RCC_GetSysClockFreq>
 8006b68:	0001      	movs	r1, r0
 8006b6a:	4b61      	ldr	r3, [pc, #388]	; (8006cf0 <HAL_RCC_OscConfig+0x33c>)
 8006b6c:	68db      	ldr	r3, [r3, #12]
 8006b6e:	091b      	lsrs	r3, r3, #4
 8006b70:	220f      	movs	r2, #15
 8006b72:	4013      	ands	r3, r2
 8006b74:	4a62      	ldr	r2, [pc, #392]	; (8006d00 <HAL_RCC_OscConfig+0x34c>)
 8006b76:	5cd3      	ldrb	r3, [r2, r3]
 8006b78:	000a      	movs	r2, r1
 8006b7a:	40da      	lsrs	r2, r3
 8006b7c:	4b61      	ldr	r3, [pc, #388]	; (8006d04 <HAL_RCC_OscConfig+0x350>)
 8006b7e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8006b80:	4b61      	ldr	r3, [pc, #388]	; (8006d08 <HAL_RCC_OscConfig+0x354>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	2513      	movs	r5, #19
 8006b86:	197c      	adds	r4, r7, r5
 8006b88:	0018      	movs	r0, r3
 8006b8a:	f7ff fc07 	bl	800639c <HAL_InitTick>
 8006b8e:	0003      	movs	r3, r0
 8006b90:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8006b92:	197b      	adds	r3, r7, r5
 8006b94:	781b      	ldrb	r3, [r3, #0]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d046      	beq.n	8006c28 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8006b9a:	197b      	adds	r3, r7, r5
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	e2d2      	b.n	8007146 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8006ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d027      	beq.n	8006bf6 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8006ba6:	4b52      	ldr	r3, [pc, #328]	; (8006cf0 <HAL_RCC_OscConfig+0x33c>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	2209      	movs	r2, #9
 8006bac:	4393      	bics	r3, r2
 8006bae:	0019      	movs	r1, r3
 8006bb0:	4b4f      	ldr	r3, [pc, #316]	; (8006cf0 <HAL_RCC_OscConfig+0x33c>)
 8006bb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bb4:	430a      	orrs	r2, r1
 8006bb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bb8:	f7ff fc36 	bl	8006428 <HAL_GetTick>
 8006bbc:	0003      	movs	r3, r0
 8006bbe:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006bc0:	e008      	b.n	8006bd4 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006bc2:	f7ff fc31 	bl	8006428 <HAL_GetTick>
 8006bc6:	0002      	movs	r2, r0
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	1ad3      	subs	r3, r2, r3
 8006bcc:	2b02      	cmp	r3, #2
 8006bce:	d901      	bls.n	8006bd4 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8006bd0:	2303      	movs	r3, #3
 8006bd2:	e2b8      	b.n	8007146 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006bd4:	4b46      	ldr	r3, [pc, #280]	; (8006cf0 <HAL_RCC_OscConfig+0x33c>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	2204      	movs	r2, #4
 8006bda:	4013      	ands	r3, r2
 8006bdc:	d0f1      	beq.n	8006bc2 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bde:	4b44      	ldr	r3, [pc, #272]	; (8006cf0 <HAL_RCC_OscConfig+0x33c>)
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	4a46      	ldr	r2, [pc, #280]	; (8006cfc <HAL_RCC_OscConfig+0x348>)
 8006be4:	4013      	ands	r3, r2
 8006be6:	0019      	movs	r1, r3
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	691b      	ldr	r3, [r3, #16]
 8006bec:	021a      	lsls	r2, r3, #8
 8006bee:	4b40      	ldr	r3, [pc, #256]	; (8006cf0 <HAL_RCC_OscConfig+0x33c>)
 8006bf0:	430a      	orrs	r2, r1
 8006bf2:	605a      	str	r2, [r3, #4]
 8006bf4:	e018      	b.n	8006c28 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006bf6:	4b3e      	ldr	r3, [pc, #248]	; (8006cf0 <HAL_RCC_OscConfig+0x33c>)
 8006bf8:	681a      	ldr	r2, [r3, #0]
 8006bfa:	4b3d      	ldr	r3, [pc, #244]	; (8006cf0 <HAL_RCC_OscConfig+0x33c>)
 8006bfc:	2101      	movs	r1, #1
 8006bfe:	438a      	bics	r2, r1
 8006c00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c02:	f7ff fc11 	bl	8006428 <HAL_GetTick>
 8006c06:	0003      	movs	r3, r0
 8006c08:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006c0a:	e008      	b.n	8006c1e <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c0c:	f7ff fc0c 	bl	8006428 <HAL_GetTick>
 8006c10:	0002      	movs	r2, r0
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	1ad3      	subs	r3, r2, r3
 8006c16:	2b02      	cmp	r3, #2
 8006c18:	d901      	bls.n	8006c1e <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8006c1a:	2303      	movs	r3, #3
 8006c1c:	e293      	b.n	8007146 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006c1e:	4b34      	ldr	r3, [pc, #208]	; (8006cf0 <HAL_RCC_OscConfig+0x33c>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	2204      	movs	r2, #4
 8006c24:	4013      	ands	r3, r2
 8006c26:	d1f1      	bne.n	8006c0c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	2210      	movs	r2, #16
 8006c2e:	4013      	ands	r3, r2
 8006c30:	d100      	bne.n	8006c34 <HAL_RCC_OscConfig+0x280>
 8006c32:	e0a2      	b.n	8006d7a <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006c34:	69fb      	ldr	r3, [r7, #28]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d140      	bne.n	8006cbc <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006c3a:	4b2d      	ldr	r3, [pc, #180]	; (8006cf0 <HAL_RCC_OscConfig+0x33c>)
 8006c3c:	681a      	ldr	r2, [r3, #0]
 8006c3e:	2380      	movs	r3, #128	; 0x80
 8006c40:	009b      	lsls	r3, r3, #2
 8006c42:	4013      	ands	r3, r2
 8006c44:	d005      	beq.n	8006c52 <HAL_RCC_OscConfig+0x29e>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	69db      	ldr	r3, [r3, #28]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d101      	bne.n	8006c52 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	e279      	b.n	8007146 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006c52:	4b27      	ldr	r3, [pc, #156]	; (8006cf0 <HAL_RCC_OscConfig+0x33c>)
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	4a2d      	ldr	r2, [pc, #180]	; (8006d0c <HAL_RCC_OscConfig+0x358>)
 8006c58:	4013      	ands	r3, r2
 8006c5a:	0019      	movs	r1, r3
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c60:	4b23      	ldr	r3, [pc, #140]	; (8006cf0 <HAL_RCC_OscConfig+0x33c>)
 8006c62:	430a      	orrs	r2, r1
 8006c64:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006c66:	4b22      	ldr	r3, [pc, #136]	; (8006cf0 <HAL_RCC_OscConfig+0x33c>)
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	021b      	lsls	r3, r3, #8
 8006c6c:	0a19      	lsrs	r1, r3, #8
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6a1b      	ldr	r3, [r3, #32]
 8006c72:	061a      	lsls	r2, r3, #24
 8006c74:	4b1e      	ldr	r3, [pc, #120]	; (8006cf0 <HAL_RCC_OscConfig+0x33c>)
 8006c76:	430a      	orrs	r2, r1
 8006c78:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c7e:	0b5b      	lsrs	r3, r3, #13
 8006c80:	3301      	adds	r3, #1
 8006c82:	2280      	movs	r2, #128	; 0x80
 8006c84:	0212      	lsls	r2, r2, #8
 8006c86:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8006c88:	4b19      	ldr	r3, [pc, #100]	; (8006cf0 <HAL_RCC_OscConfig+0x33c>)
 8006c8a:	68db      	ldr	r3, [r3, #12]
 8006c8c:	091b      	lsrs	r3, r3, #4
 8006c8e:	210f      	movs	r1, #15
 8006c90:	400b      	ands	r3, r1
 8006c92:	491b      	ldr	r1, [pc, #108]	; (8006d00 <HAL_RCC_OscConfig+0x34c>)
 8006c94:	5ccb      	ldrb	r3, [r1, r3]
 8006c96:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8006c98:	4b1a      	ldr	r3, [pc, #104]	; (8006d04 <HAL_RCC_OscConfig+0x350>)
 8006c9a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8006c9c:	4b1a      	ldr	r3, [pc, #104]	; (8006d08 <HAL_RCC_OscConfig+0x354>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	2513      	movs	r5, #19
 8006ca2:	197c      	adds	r4, r7, r5
 8006ca4:	0018      	movs	r0, r3
 8006ca6:	f7ff fb79 	bl	800639c <HAL_InitTick>
 8006caa:	0003      	movs	r3, r0
 8006cac:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8006cae:	197b      	adds	r3, r7, r5
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d061      	beq.n	8006d7a <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8006cb6:	197b      	adds	r3, r7, r5
 8006cb8:	781b      	ldrb	r3, [r3, #0]
 8006cba:	e244      	b.n	8007146 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	69db      	ldr	r3, [r3, #28]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d040      	beq.n	8006d46 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006cc4:	4b0a      	ldr	r3, [pc, #40]	; (8006cf0 <HAL_RCC_OscConfig+0x33c>)
 8006cc6:	681a      	ldr	r2, [r3, #0]
 8006cc8:	4b09      	ldr	r3, [pc, #36]	; (8006cf0 <HAL_RCC_OscConfig+0x33c>)
 8006cca:	2180      	movs	r1, #128	; 0x80
 8006ccc:	0049      	lsls	r1, r1, #1
 8006cce:	430a      	orrs	r2, r1
 8006cd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cd2:	f7ff fba9 	bl	8006428 <HAL_GetTick>
 8006cd6:	0003      	movs	r3, r0
 8006cd8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006cda:	e019      	b.n	8006d10 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006cdc:	f7ff fba4 	bl	8006428 <HAL_GetTick>
 8006ce0:	0002      	movs	r2, r0
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	1ad3      	subs	r3, r2, r3
 8006ce6:	2b02      	cmp	r3, #2
 8006ce8:	d912      	bls.n	8006d10 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8006cea:	2303      	movs	r3, #3
 8006cec:	e22b      	b.n	8007146 <HAL_RCC_OscConfig+0x792>
 8006cee:	46c0      	nop			; (mov r8, r8)
 8006cf0:	40021000 	.word	0x40021000
 8006cf4:	fffeffff 	.word	0xfffeffff
 8006cf8:	fffbffff 	.word	0xfffbffff
 8006cfc:	ffffe0ff 	.word	0xffffe0ff
 8006d00:	0800f38c 	.word	0x0800f38c
 8006d04:	2000000c 	.word	0x2000000c
 8006d08:	20000010 	.word	0x20000010
 8006d0c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006d10:	4bca      	ldr	r3, [pc, #808]	; (800703c <HAL_RCC_OscConfig+0x688>)
 8006d12:	681a      	ldr	r2, [r3, #0]
 8006d14:	2380      	movs	r3, #128	; 0x80
 8006d16:	009b      	lsls	r3, r3, #2
 8006d18:	4013      	ands	r3, r2
 8006d1a:	d0df      	beq.n	8006cdc <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006d1c:	4bc7      	ldr	r3, [pc, #796]	; (800703c <HAL_RCC_OscConfig+0x688>)
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	4ac7      	ldr	r2, [pc, #796]	; (8007040 <HAL_RCC_OscConfig+0x68c>)
 8006d22:	4013      	ands	r3, r2
 8006d24:	0019      	movs	r1, r3
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d2a:	4bc4      	ldr	r3, [pc, #784]	; (800703c <HAL_RCC_OscConfig+0x688>)
 8006d2c:	430a      	orrs	r2, r1
 8006d2e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006d30:	4bc2      	ldr	r3, [pc, #776]	; (800703c <HAL_RCC_OscConfig+0x688>)
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	021b      	lsls	r3, r3, #8
 8006d36:	0a19      	lsrs	r1, r3, #8
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6a1b      	ldr	r3, [r3, #32]
 8006d3c:	061a      	lsls	r2, r3, #24
 8006d3e:	4bbf      	ldr	r3, [pc, #764]	; (800703c <HAL_RCC_OscConfig+0x688>)
 8006d40:	430a      	orrs	r2, r1
 8006d42:	605a      	str	r2, [r3, #4]
 8006d44:	e019      	b.n	8006d7a <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006d46:	4bbd      	ldr	r3, [pc, #756]	; (800703c <HAL_RCC_OscConfig+0x688>)
 8006d48:	681a      	ldr	r2, [r3, #0]
 8006d4a:	4bbc      	ldr	r3, [pc, #752]	; (800703c <HAL_RCC_OscConfig+0x688>)
 8006d4c:	49bd      	ldr	r1, [pc, #756]	; (8007044 <HAL_RCC_OscConfig+0x690>)
 8006d4e:	400a      	ands	r2, r1
 8006d50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d52:	f7ff fb69 	bl	8006428 <HAL_GetTick>
 8006d56:	0003      	movs	r3, r0
 8006d58:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8006d5a:	e008      	b.n	8006d6e <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006d5c:	f7ff fb64 	bl	8006428 <HAL_GetTick>
 8006d60:	0002      	movs	r2, r0
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	1ad3      	subs	r3, r2, r3
 8006d66:	2b02      	cmp	r3, #2
 8006d68:	d901      	bls.n	8006d6e <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8006d6a:	2303      	movs	r3, #3
 8006d6c:	e1eb      	b.n	8007146 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8006d6e:	4bb3      	ldr	r3, [pc, #716]	; (800703c <HAL_RCC_OscConfig+0x688>)
 8006d70:	681a      	ldr	r2, [r3, #0]
 8006d72:	2380      	movs	r3, #128	; 0x80
 8006d74:	009b      	lsls	r3, r3, #2
 8006d76:	4013      	ands	r3, r2
 8006d78:	d1f0      	bne.n	8006d5c <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	2208      	movs	r2, #8
 8006d80:	4013      	ands	r3, r2
 8006d82:	d036      	beq.n	8006df2 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	695b      	ldr	r3, [r3, #20]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d019      	beq.n	8006dc0 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d8c:	4bab      	ldr	r3, [pc, #684]	; (800703c <HAL_RCC_OscConfig+0x688>)
 8006d8e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006d90:	4baa      	ldr	r3, [pc, #680]	; (800703c <HAL_RCC_OscConfig+0x688>)
 8006d92:	2101      	movs	r1, #1
 8006d94:	430a      	orrs	r2, r1
 8006d96:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d98:	f7ff fb46 	bl	8006428 <HAL_GetTick>
 8006d9c:	0003      	movs	r3, r0
 8006d9e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006da0:	e008      	b.n	8006db4 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006da2:	f7ff fb41 	bl	8006428 <HAL_GetTick>
 8006da6:	0002      	movs	r2, r0
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	1ad3      	subs	r3, r2, r3
 8006dac:	2b02      	cmp	r3, #2
 8006dae:	d901      	bls.n	8006db4 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8006db0:	2303      	movs	r3, #3
 8006db2:	e1c8      	b.n	8007146 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006db4:	4ba1      	ldr	r3, [pc, #644]	; (800703c <HAL_RCC_OscConfig+0x688>)
 8006db6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006db8:	2202      	movs	r2, #2
 8006dba:	4013      	ands	r3, r2
 8006dbc:	d0f1      	beq.n	8006da2 <HAL_RCC_OscConfig+0x3ee>
 8006dbe:	e018      	b.n	8006df2 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006dc0:	4b9e      	ldr	r3, [pc, #632]	; (800703c <HAL_RCC_OscConfig+0x688>)
 8006dc2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006dc4:	4b9d      	ldr	r3, [pc, #628]	; (800703c <HAL_RCC_OscConfig+0x688>)
 8006dc6:	2101      	movs	r1, #1
 8006dc8:	438a      	bics	r2, r1
 8006dca:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006dcc:	f7ff fb2c 	bl	8006428 <HAL_GetTick>
 8006dd0:	0003      	movs	r3, r0
 8006dd2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006dd4:	e008      	b.n	8006de8 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006dd6:	f7ff fb27 	bl	8006428 <HAL_GetTick>
 8006dda:	0002      	movs	r2, r0
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	1ad3      	subs	r3, r2, r3
 8006de0:	2b02      	cmp	r3, #2
 8006de2:	d901      	bls.n	8006de8 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8006de4:	2303      	movs	r3, #3
 8006de6:	e1ae      	b.n	8007146 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006de8:	4b94      	ldr	r3, [pc, #592]	; (800703c <HAL_RCC_OscConfig+0x688>)
 8006dea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dec:	2202      	movs	r2, #2
 8006dee:	4013      	ands	r3, r2
 8006df0:	d1f1      	bne.n	8006dd6 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	2204      	movs	r2, #4
 8006df8:	4013      	ands	r3, r2
 8006dfa:	d100      	bne.n	8006dfe <HAL_RCC_OscConfig+0x44a>
 8006dfc:	e0ae      	b.n	8006f5c <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006dfe:	2023      	movs	r0, #35	; 0x23
 8006e00:	183b      	adds	r3, r7, r0
 8006e02:	2200      	movs	r2, #0
 8006e04:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e06:	4b8d      	ldr	r3, [pc, #564]	; (800703c <HAL_RCC_OscConfig+0x688>)
 8006e08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e0a:	2380      	movs	r3, #128	; 0x80
 8006e0c:	055b      	lsls	r3, r3, #21
 8006e0e:	4013      	ands	r3, r2
 8006e10:	d109      	bne.n	8006e26 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e12:	4b8a      	ldr	r3, [pc, #552]	; (800703c <HAL_RCC_OscConfig+0x688>)
 8006e14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e16:	4b89      	ldr	r3, [pc, #548]	; (800703c <HAL_RCC_OscConfig+0x688>)
 8006e18:	2180      	movs	r1, #128	; 0x80
 8006e1a:	0549      	lsls	r1, r1, #21
 8006e1c:	430a      	orrs	r2, r1
 8006e1e:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8006e20:	183b      	adds	r3, r7, r0
 8006e22:	2201      	movs	r2, #1
 8006e24:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e26:	4b88      	ldr	r3, [pc, #544]	; (8007048 <HAL_RCC_OscConfig+0x694>)
 8006e28:	681a      	ldr	r2, [r3, #0]
 8006e2a:	2380      	movs	r3, #128	; 0x80
 8006e2c:	005b      	lsls	r3, r3, #1
 8006e2e:	4013      	ands	r3, r2
 8006e30:	d11a      	bne.n	8006e68 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006e32:	4b85      	ldr	r3, [pc, #532]	; (8007048 <HAL_RCC_OscConfig+0x694>)
 8006e34:	681a      	ldr	r2, [r3, #0]
 8006e36:	4b84      	ldr	r3, [pc, #528]	; (8007048 <HAL_RCC_OscConfig+0x694>)
 8006e38:	2180      	movs	r1, #128	; 0x80
 8006e3a:	0049      	lsls	r1, r1, #1
 8006e3c:	430a      	orrs	r2, r1
 8006e3e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e40:	f7ff faf2 	bl	8006428 <HAL_GetTick>
 8006e44:	0003      	movs	r3, r0
 8006e46:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e48:	e008      	b.n	8006e5c <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e4a:	f7ff faed 	bl	8006428 <HAL_GetTick>
 8006e4e:	0002      	movs	r2, r0
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	1ad3      	subs	r3, r2, r3
 8006e54:	2b64      	cmp	r3, #100	; 0x64
 8006e56:	d901      	bls.n	8006e5c <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8006e58:	2303      	movs	r3, #3
 8006e5a:	e174      	b.n	8007146 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e5c:	4b7a      	ldr	r3, [pc, #488]	; (8007048 <HAL_RCC_OscConfig+0x694>)
 8006e5e:	681a      	ldr	r2, [r3, #0]
 8006e60:	2380      	movs	r3, #128	; 0x80
 8006e62:	005b      	lsls	r3, r3, #1
 8006e64:	4013      	ands	r3, r2
 8006e66:	d0f0      	beq.n	8006e4a <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	689a      	ldr	r2, [r3, #8]
 8006e6c:	2380      	movs	r3, #128	; 0x80
 8006e6e:	005b      	lsls	r3, r3, #1
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d107      	bne.n	8006e84 <HAL_RCC_OscConfig+0x4d0>
 8006e74:	4b71      	ldr	r3, [pc, #452]	; (800703c <HAL_RCC_OscConfig+0x688>)
 8006e76:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006e78:	4b70      	ldr	r3, [pc, #448]	; (800703c <HAL_RCC_OscConfig+0x688>)
 8006e7a:	2180      	movs	r1, #128	; 0x80
 8006e7c:	0049      	lsls	r1, r1, #1
 8006e7e:	430a      	orrs	r2, r1
 8006e80:	651a      	str	r2, [r3, #80]	; 0x50
 8006e82:	e031      	b.n	8006ee8 <HAL_RCC_OscConfig+0x534>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	689b      	ldr	r3, [r3, #8]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d10c      	bne.n	8006ea6 <HAL_RCC_OscConfig+0x4f2>
 8006e8c:	4b6b      	ldr	r3, [pc, #428]	; (800703c <HAL_RCC_OscConfig+0x688>)
 8006e8e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006e90:	4b6a      	ldr	r3, [pc, #424]	; (800703c <HAL_RCC_OscConfig+0x688>)
 8006e92:	496c      	ldr	r1, [pc, #432]	; (8007044 <HAL_RCC_OscConfig+0x690>)
 8006e94:	400a      	ands	r2, r1
 8006e96:	651a      	str	r2, [r3, #80]	; 0x50
 8006e98:	4b68      	ldr	r3, [pc, #416]	; (800703c <HAL_RCC_OscConfig+0x688>)
 8006e9a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006e9c:	4b67      	ldr	r3, [pc, #412]	; (800703c <HAL_RCC_OscConfig+0x688>)
 8006e9e:	496b      	ldr	r1, [pc, #428]	; (800704c <HAL_RCC_OscConfig+0x698>)
 8006ea0:	400a      	ands	r2, r1
 8006ea2:	651a      	str	r2, [r3, #80]	; 0x50
 8006ea4:	e020      	b.n	8006ee8 <HAL_RCC_OscConfig+0x534>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	689a      	ldr	r2, [r3, #8]
 8006eaa:	23a0      	movs	r3, #160	; 0xa0
 8006eac:	00db      	lsls	r3, r3, #3
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	d10e      	bne.n	8006ed0 <HAL_RCC_OscConfig+0x51c>
 8006eb2:	4b62      	ldr	r3, [pc, #392]	; (800703c <HAL_RCC_OscConfig+0x688>)
 8006eb4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006eb6:	4b61      	ldr	r3, [pc, #388]	; (800703c <HAL_RCC_OscConfig+0x688>)
 8006eb8:	2180      	movs	r1, #128	; 0x80
 8006eba:	00c9      	lsls	r1, r1, #3
 8006ebc:	430a      	orrs	r2, r1
 8006ebe:	651a      	str	r2, [r3, #80]	; 0x50
 8006ec0:	4b5e      	ldr	r3, [pc, #376]	; (800703c <HAL_RCC_OscConfig+0x688>)
 8006ec2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006ec4:	4b5d      	ldr	r3, [pc, #372]	; (800703c <HAL_RCC_OscConfig+0x688>)
 8006ec6:	2180      	movs	r1, #128	; 0x80
 8006ec8:	0049      	lsls	r1, r1, #1
 8006eca:	430a      	orrs	r2, r1
 8006ecc:	651a      	str	r2, [r3, #80]	; 0x50
 8006ece:	e00b      	b.n	8006ee8 <HAL_RCC_OscConfig+0x534>
 8006ed0:	4b5a      	ldr	r3, [pc, #360]	; (800703c <HAL_RCC_OscConfig+0x688>)
 8006ed2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006ed4:	4b59      	ldr	r3, [pc, #356]	; (800703c <HAL_RCC_OscConfig+0x688>)
 8006ed6:	495b      	ldr	r1, [pc, #364]	; (8007044 <HAL_RCC_OscConfig+0x690>)
 8006ed8:	400a      	ands	r2, r1
 8006eda:	651a      	str	r2, [r3, #80]	; 0x50
 8006edc:	4b57      	ldr	r3, [pc, #348]	; (800703c <HAL_RCC_OscConfig+0x688>)
 8006ede:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006ee0:	4b56      	ldr	r3, [pc, #344]	; (800703c <HAL_RCC_OscConfig+0x688>)
 8006ee2:	495a      	ldr	r1, [pc, #360]	; (800704c <HAL_RCC_OscConfig+0x698>)
 8006ee4:	400a      	ands	r2, r1
 8006ee6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d015      	beq.n	8006f1c <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ef0:	f7ff fa9a 	bl	8006428 <HAL_GetTick>
 8006ef4:	0003      	movs	r3, r0
 8006ef6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006ef8:	e009      	b.n	8006f0e <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006efa:	f7ff fa95 	bl	8006428 <HAL_GetTick>
 8006efe:	0002      	movs	r2, r0
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	1ad3      	subs	r3, r2, r3
 8006f04:	4a52      	ldr	r2, [pc, #328]	; (8007050 <HAL_RCC_OscConfig+0x69c>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d901      	bls.n	8006f0e <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8006f0a:	2303      	movs	r3, #3
 8006f0c:	e11b      	b.n	8007146 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006f0e:	4b4b      	ldr	r3, [pc, #300]	; (800703c <HAL_RCC_OscConfig+0x688>)
 8006f10:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006f12:	2380      	movs	r3, #128	; 0x80
 8006f14:	009b      	lsls	r3, r3, #2
 8006f16:	4013      	ands	r3, r2
 8006f18:	d0ef      	beq.n	8006efa <HAL_RCC_OscConfig+0x546>
 8006f1a:	e014      	b.n	8006f46 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f1c:	f7ff fa84 	bl	8006428 <HAL_GetTick>
 8006f20:	0003      	movs	r3, r0
 8006f22:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006f24:	e009      	b.n	8006f3a <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f26:	f7ff fa7f 	bl	8006428 <HAL_GetTick>
 8006f2a:	0002      	movs	r2, r0
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	1ad3      	subs	r3, r2, r3
 8006f30:	4a47      	ldr	r2, [pc, #284]	; (8007050 <HAL_RCC_OscConfig+0x69c>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d901      	bls.n	8006f3a <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8006f36:	2303      	movs	r3, #3
 8006f38:	e105      	b.n	8007146 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006f3a:	4b40      	ldr	r3, [pc, #256]	; (800703c <HAL_RCC_OscConfig+0x688>)
 8006f3c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006f3e:	2380      	movs	r3, #128	; 0x80
 8006f40:	009b      	lsls	r3, r3, #2
 8006f42:	4013      	ands	r3, r2
 8006f44:	d1ef      	bne.n	8006f26 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006f46:	2323      	movs	r3, #35	; 0x23
 8006f48:	18fb      	adds	r3, r7, r3
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d105      	bne.n	8006f5c <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f50:	4b3a      	ldr	r3, [pc, #232]	; (800703c <HAL_RCC_OscConfig+0x688>)
 8006f52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f54:	4b39      	ldr	r3, [pc, #228]	; (800703c <HAL_RCC_OscConfig+0x688>)
 8006f56:	493f      	ldr	r1, [pc, #252]	; (8007054 <HAL_RCC_OscConfig+0x6a0>)
 8006f58:	400a      	ands	r2, r1
 8006f5a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	2220      	movs	r2, #32
 8006f62:	4013      	ands	r3, r2
 8006f64:	d049      	beq.n	8006ffa <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	699b      	ldr	r3, [r3, #24]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d026      	beq.n	8006fbc <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8006f6e:	4b33      	ldr	r3, [pc, #204]	; (800703c <HAL_RCC_OscConfig+0x688>)
 8006f70:	689a      	ldr	r2, [r3, #8]
 8006f72:	4b32      	ldr	r3, [pc, #200]	; (800703c <HAL_RCC_OscConfig+0x688>)
 8006f74:	2101      	movs	r1, #1
 8006f76:	430a      	orrs	r2, r1
 8006f78:	609a      	str	r2, [r3, #8]
 8006f7a:	4b30      	ldr	r3, [pc, #192]	; (800703c <HAL_RCC_OscConfig+0x688>)
 8006f7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f7e:	4b2f      	ldr	r3, [pc, #188]	; (800703c <HAL_RCC_OscConfig+0x688>)
 8006f80:	2101      	movs	r1, #1
 8006f82:	430a      	orrs	r2, r1
 8006f84:	635a      	str	r2, [r3, #52]	; 0x34
 8006f86:	4b34      	ldr	r3, [pc, #208]	; (8007058 <HAL_RCC_OscConfig+0x6a4>)
 8006f88:	6a1a      	ldr	r2, [r3, #32]
 8006f8a:	4b33      	ldr	r3, [pc, #204]	; (8007058 <HAL_RCC_OscConfig+0x6a4>)
 8006f8c:	2180      	movs	r1, #128	; 0x80
 8006f8e:	0189      	lsls	r1, r1, #6
 8006f90:	430a      	orrs	r2, r1
 8006f92:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f94:	f7ff fa48 	bl	8006428 <HAL_GetTick>
 8006f98:	0003      	movs	r3, r0
 8006f9a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006f9c:	e008      	b.n	8006fb0 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006f9e:	f7ff fa43 	bl	8006428 <HAL_GetTick>
 8006fa2:	0002      	movs	r2, r0
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	1ad3      	subs	r3, r2, r3
 8006fa8:	2b02      	cmp	r3, #2
 8006faa:	d901      	bls.n	8006fb0 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8006fac:	2303      	movs	r3, #3
 8006fae:	e0ca      	b.n	8007146 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006fb0:	4b22      	ldr	r3, [pc, #136]	; (800703c <HAL_RCC_OscConfig+0x688>)
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	2202      	movs	r2, #2
 8006fb6:	4013      	ands	r3, r2
 8006fb8:	d0f1      	beq.n	8006f9e <HAL_RCC_OscConfig+0x5ea>
 8006fba:	e01e      	b.n	8006ffa <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8006fbc:	4b1f      	ldr	r3, [pc, #124]	; (800703c <HAL_RCC_OscConfig+0x688>)
 8006fbe:	689a      	ldr	r2, [r3, #8]
 8006fc0:	4b1e      	ldr	r3, [pc, #120]	; (800703c <HAL_RCC_OscConfig+0x688>)
 8006fc2:	2101      	movs	r1, #1
 8006fc4:	438a      	bics	r2, r1
 8006fc6:	609a      	str	r2, [r3, #8]
 8006fc8:	4b23      	ldr	r3, [pc, #140]	; (8007058 <HAL_RCC_OscConfig+0x6a4>)
 8006fca:	6a1a      	ldr	r2, [r3, #32]
 8006fcc:	4b22      	ldr	r3, [pc, #136]	; (8007058 <HAL_RCC_OscConfig+0x6a4>)
 8006fce:	4923      	ldr	r1, [pc, #140]	; (800705c <HAL_RCC_OscConfig+0x6a8>)
 8006fd0:	400a      	ands	r2, r1
 8006fd2:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fd4:	f7ff fa28 	bl	8006428 <HAL_GetTick>
 8006fd8:	0003      	movs	r3, r0
 8006fda:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006fdc:	e008      	b.n	8006ff0 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006fde:	f7ff fa23 	bl	8006428 <HAL_GetTick>
 8006fe2:	0002      	movs	r2, r0
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	1ad3      	subs	r3, r2, r3
 8006fe8:	2b02      	cmp	r3, #2
 8006fea:	d901      	bls.n	8006ff0 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8006fec:	2303      	movs	r3, #3
 8006fee:	e0aa      	b.n	8007146 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006ff0:	4b12      	ldr	r3, [pc, #72]	; (800703c <HAL_RCC_OscConfig+0x688>)
 8006ff2:	689b      	ldr	r3, [r3, #8]
 8006ff4:	2202      	movs	r2, #2
 8006ff6:	4013      	ands	r3, r2
 8006ff8:	d1f1      	bne.n	8006fde <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d100      	bne.n	8007004 <HAL_RCC_OscConfig+0x650>
 8007002:	e09f      	b.n	8007144 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007004:	69fb      	ldr	r3, [r7, #28]
 8007006:	2b0c      	cmp	r3, #12
 8007008:	d100      	bne.n	800700c <HAL_RCC_OscConfig+0x658>
 800700a:	e078      	b.n	80070fe <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007010:	2b02      	cmp	r3, #2
 8007012:	d159      	bne.n	80070c8 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007014:	4b09      	ldr	r3, [pc, #36]	; (800703c <HAL_RCC_OscConfig+0x688>)
 8007016:	681a      	ldr	r2, [r3, #0]
 8007018:	4b08      	ldr	r3, [pc, #32]	; (800703c <HAL_RCC_OscConfig+0x688>)
 800701a:	4911      	ldr	r1, [pc, #68]	; (8007060 <HAL_RCC_OscConfig+0x6ac>)
 800701c:	400a      	ands	r2, r1
 800701e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007020:	f7ff fa02 	bl	8006428 <HAL_GetTick>
 8007024:	0003      	movs	r3, r0
 8007026:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8007028:	e01c      	b.n	8007064 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800702a:	f7ff f9fd 	bl	8006428 <HAL_GetTick>
 800702e:	0002      	movs	r2, r0
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	1ad3      	subs	r3, r2, r3
 8007034:	2b02      	cmp	r3, #2
 8007036:	d915      	bls.n	8007064 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8007038:	2303      	movs	r3, #3
 800703a:	e084      	b.n	8007146 <HAL_RCC_OscConfig+0x792>
 800703c:	40021000 	.word	0x40021000
 8007040:	ffff1fff 	.word	0xffff1fff
 8007044:	fffffeff 	.word	0xfffffeff
 8007048:	40007000 	.word	0x40007000
 800704c:	fffffbff 	.word	0xfffffbff
 8007050:	00001388 	.word	0x00001388
 8007054:	efffffff 	.word	0xefffffff
 8007058:	40010000 	.word	0x40010000
 800705c:	ffffdfff 	.word	0xffffdfff
 8007060:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8007064:	4b3a      	ldr	r3, [pc, #232]	; (8007150 <HAL_RCC_OscConfig+0x79c>)
 8007066:	681a      	ldr	r2, [r3, #0]
 8007068:	2380      	movs	r3, #128	; 0x80
 800706a:	049b      	lsls	r3, r3, #18
 800706c:	4013      	ands	r3, r2
 800706e:	d1dc      	bne.n	800702a <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007070:	4b37      	ldr	r3, [pc, #220]	; (8007150 <HAL_RCC_OscConfig+0x79c>)
 8007072:	68db      	ldr	r3, [r3, #12]
 8007074:	4a37      	ldr	r2, [pc, #220]	; (8007154 <HAL_RCC_OscConfig+0x7a0>)
 8007076:	4013      	ands	r3, r2
 8007078:	0019      	movs	r1, r3
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007082:	431a      	orrs	r2, r3
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007088:	431a      	orrs	r2, r3
 800708a:	4b31      	ldr	r3, [pc, #196]	; (8007150 <HAL_RCC_OscConfig+0x79c>)
 800708c:	430a      	orrs	r2, r1
 800708e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007090:	4b2f      	ldr	r3, [pc, #188]	; (8007150 <HAL_RCC_OscConfig+0x79c>)
 8007092:	681a      	ldr	r2, [r3, #0]
 8007094:	4b2e      	ldr	r3, [pc, #184]	; (8007150 <HAL_RCC_OscConfig+0x79c>)
 8007096:	2180      	movs	r1, #128	; 0x80
 8007098:	0449      	lsls	r1, r1, #17
 800709a:	430a      	orrs	r2, r1
 800709c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800709e:	f7ff f9c3 	bl	8006428 <HAL_GetTick>
 80070a2:	0003      	movs	r3, r0
 80070a4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80070a6:	e008      	b.n	80070ba <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80070a8:	f7ff f9be 	bl	8006428 <HAL_GetTick>
 80070ac:	0002      	movs	r2, r0
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	1ad3      	subs	r3, r2, r3
 80070b2:	2b02      	cmp	r3, #2
 80070b4:	d901      	bls.n	80070ba <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 80070b6:	2303      	movs	r3, #3
 80070b8:	e045      	b.n	8007146 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80070ba:	4b25      	ldr	r3, [pc, #148]	; (8007150 <HAL_RCC_OscConfig+0x79c>)
 80070bc:	681a      	ldr	r2, [r3, #0]
 80070be:	2380      	movs	r3, #128	; 0x80
 80070c0:	049b      	lsls	r3, r3, #18
 80070c2:	4013      	ands	r3, r2
 80070c4:	d0f0      	beq.n	80070a8 <HAL_RCC_OscConfig+0x6f4>
 80070c6:	e03d      	b.n	8007144 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070c8:	4b21      	ldr	r3, [pc, #132]	; (8007150 <HAL_RCC_OscConfig+0x79c>)
 80070ca:	681a      	ldr	r2, [r3, #0]
 80070cc:	4b20      	ldr	r3, [pc, #128]	; (8007150 <HAL_RCC_OscConfig+0x79c>)
 80070ce:	4922      	ldr	r1, [pc, #136]	; (8007158 <HAL_RCC_OscConfig+0x7a4>)
 80070d0:	400a      	ands	r2, r1
 80070d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070d4:	f7ff f9a8 	bl	8006428 <HAL_GetTick>
 80070d8:	0003      	movs	r3, r0
 80070da:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80070dc:	e008      	b.n	80070f0 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80070de:	f7ff f9a3 	bl	8006428 <HAL_GetTick>
 80070e2:	0002      	movs	r2, r0
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	1ad3      	subs	r3, r2, r3
 80070e8:	2b02      	cmp	r3, #2
 80070ea:	d901      	bls.n	80070f0 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80070ec:	2303      	movs	r3, #3
 80070ee:	e02a      	b.n	8007146 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80070f0:	4b17      	ldr	r3, [pc, #92]	; (8007150 <HAL_RCC_OscConfig+0x79c>)
 80070f2:	681a      	ldr	r2, [r3, #0]
 80070f4:	2380      	movs	r3, #128	; 0x80
 80070f6:	049b      	lsls	r3, r3, #18
 80070f8:	4013      	ands	r3, r2
 80070fa:	d1f0      	bne.n	80070de <HAL_RCC_OscConfig+0x72a>
 80070fc:	e022      	b.n	8007144 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007102:	2b01      	cmp	r3, #1
 8007104:	d101      	bne.n	800710a <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8007106:	2301      	movs	r3, #1
 8007108:	e01d      	b.n	8007146 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800710a:	4b11      	ldr	r3, [pc, #68]	; (8007150 <HAL_RCC_OscConfig+0x79c>)
 800710c:	68db      	ldr	r3, [r3, #12]
 800710e:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007110:	69ba      	ldr	r2, [r7, #24]
 8007112:	2380      	movs	r3, #128	; 0x80
 8007114:	025b      	lsls	r3, r3, #9
 8007116:	401a      	ands	r2, r3
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800711c:	429a      	cmp	r2, r3
 800711e:	d10f      	bne.n	8007140 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8007120:	69ba      	ldr	r2, [r7, #24]
 8007122:	23f0      	movs	r3, #240	; 0xf0
 8007124:	039b      	lsls	r3, r3, #14
 8007126:	401a      	ands	r2, r3
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800712c:	429a      	cmp	r2, r3
 800712e:	d107      	bne.n	8007140 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8007130:	69ba      	ldr	r2, [r7, #24]
 8007132:	23c0      	movs	r3, #192	; 0xc0
 8007134:	041b      	lsls	r3, r3, #16
 8007136:	401a      	ands	r2, r3
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800713c:	429a      	cmp	r2, r3
 800713e:	d001      	beq.n	8007144 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8007140:	2301      	movs	r3, #1
 8007142:	e000      	b.n	8007146 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8007144:	2300      	movs	r3, #0
}
 8007146:	0018      	movs	r0, r3
 8007148:	46bd      	mov	sp, r7
 800714a:	b00a      	add	sp, #40	; 0x28
 800714c:	bdb0      	pop	{r4, r5, r7, pc}
 800714e:	46c0      	nop			; (mov r8, r8)
 8007150:	40021000 	.word	0x40021000
 8007154:	ff02ffff 	.word	0xff02ffff
 8007158:	feffffff 	.word	0xfeffffff

0800715c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800715c:	b5b0      	push	{r4, r5, r7, lr}
 800715e:	b084      	sub	sp, #16
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
 8007164:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d101      	bne.n	8007170 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800716c:	2301      	movs	r3, #1
 800716e:	e128      	b.n	80073c2 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007170:	4b96      	ldr	r3, [pc, #600]	; (80073cc <HAL_RCC_ClockConfig+0x270>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	2201      	movs	r2, #1
 8007176:	4013      	ands	r3, r2
 8007178:	683a      	ldr	r2, [r7, #0]
 800717a:	429a      	cmp	r2, r3
 800717c:	d91e      	bls.n	80071bc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800717e:	4b93      	ldr	r3, [pc, #588]	; (80073cc <HAL_RCC_ClockConfig+0x270>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	2201      	movs	r2, #1
 8007184:	4393      	bics	r3, r2
 8007186:	0019      	movs	r1, r3
 8007188:	4b90      	ldr	r3, [pc, #576]	; (80073cc <HAL_RCC_ClockConfig+0x270>)
 800718a:	683a      	ldr	r2, [r7, #0]
 800718c:	430a      	orrs	r2, r1
 800718e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007190:	f7ff f94a 	bl	8006428 <HAL_GetTick>
 8007194:	0003      	movs	r3, r0
 8007196:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007198:	e009      	b.n	80071ae <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800719a:	f7ff f945 	bl	8006428 <HAL_GetTick>
 800719e:	0002      	movs	r2, r0
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	1ad3      	subs	r3, r2, r3
 80071a4:	4a8a      	ldr	r2, [pc, #552]	; (80073d0 <HAL_RCC_ClockConfig+0x274>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d901      	bls.n	80071ae <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80071aa:	2303      	movs	r3, #3
 80071ac:	e109      	b.n	80073c2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80071ae:	4b87      	ldr	r3, [pc, #540]	; (80073cc <HAL_RCC_ClockConfig+0x270>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	2201      	movs	r2, #1
 80071b4:	4013      	ands	r3, r2
 80071b6:	683a      	ldr	r2, [r7, #0]
 80071b8:	429a      	cmp	r2, r3
 80071ba:	d1ee      	bne.n	800719a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	2202      	movs	r2, #2
 80071c2:	4013      	ands	r3, r2
 80071c4:	d009      	beq.n	80071da <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80071c6:	4b83      	ldr	r3, [pc, #524]	; (80073d4 <HAL_RCC_ClockConfig+0x278>)
 80071c8:	68db      	ldr	r3, [r3, #12]
 80071ca:	22f0      	movs	r2, #240	; 0xf0
 80071cc:	4393      	bics	r3, r2
 80071ce:	0019      	movs	r1, r3
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	689a      	ldr	r2, [r3, #8]
 80071d4:	4b7f      	ldr	r3, [pc, #508]	; (80073d4 <HAL_RCC_ClockConfig+0x278>)
 80071d6:	430a      	orrs	r2, r1
 80071d8:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	2201      	movs	r2, #1
 80071e0:	4013      	ands	r3, r2
 80071e2:	d100      	bne.n	80071e6 <HAL_RCC_ClockConfig+0x8a>
 80071e4:	e089      	b.n	80072fa <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	685b      	ldr	r3, [r3, #4]
 80071ea:	2b02      	cmp	r3, #2
 80071ec:	d107      	bne.n	80071fe <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80071ee:	4b79      	ldr	r3, [pc, #484]	; (80073d4 <HAL_RCC_ClockConfig+0x278>)
 80071f0:	681a      	ldr	r2, [r3, #0]
 80071f2:	2380      	movs	r3, #128	; 0x80
 80071f4:	029b      	lsls	r3, r3, #10
 80071f6:	4013      	ands	r3, r2
 80071f8:	d120      	bne.n	800723c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80071fa:	2301      	movs	r3, #1
 80071fc:	e0e1      	b.n	80073c2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	2b03      	cmp	r3, #3
 8007204:	d107      	bne.n	8007216 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007206:	4b73      	ldr	r3, [pc, #460]	; (80073d4 <HAL_RCC_ClockConfig+0x278>)
 8007208:	681a      	ldr	r2, [r3, #0]
 800720a:	2380      	movs	r3, #128	; 0x80
 800720c:	049b      	lsls	r3, r3, #18
 800720e:	4013      	ands	r3, r2
 8007210:	d114      	bne.n	800723c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8007212:	2301      	movs	r3, #1
 8007214:	e0d5      	b.n	80073c2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	2b01      	cmp	r3, #1
 800721c:	d106      	bne.n	800722c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800721e:	4b6d      	ldr	r3, [pc, #436]	; (80073d4 <HAL_RCC_ClockConfig+0x278>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	2204      	movs	r2, #4
 8007224:	4013      	ands	r3, r2
 8007226:	d109      	bne.n	800723c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8007228:	2301      	movs	r3, #1
 800722a:	e0ca      	b.n	80073c2 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800722c:	4b69      	ldr	r3, [pc, #420]	; (80073d4 <HAL_RCC_ClockConfig+0x278>)
 800722e:	681a      	ldr	r2, [r3, #0]
 8007230:	2380      	movs	r3, #128	; 0x80
 8007232:	009b      	lsls	r3, r3, #2
 8007234:	4013      	ands	r3, r2
 8007236:	d101      	bne.n	800723c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8007238:	2301      	movs	r3, #1
 800723a:	e0c2      	b.n	80073c2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800723c:	4b65      	ldr	r3, [pc, #404]	; (80073d4 <HAL_RCC_ClockConfig+0x278>)
 800723e:	68db      	ldr	r3, [r3, #12]
 8007240:	2203      	movs	r2, #3
 8007242:	4393      	bics	r3, r2
 8007244:	0019      	movs	r1, r3
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	685a      	ldr	r2, [r3, #4]
 800724a:	4b62      	ldr	r3, [pc, #392]	; (80073d4 <HAL_RCC_ClockConfig+0x278>)
 800724c:	430a      	orrs	r2, r1
 800724e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007250:	f7ff f8ea 	bl	8006428 <HAL_GetTick>
 8007254:	0003      	movs	r3, r0
 8007256:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	685b      	ldr	r3, [r3, #4]
 800725c:	2b02      	cmp	r3, #2
 800725e:	d111      	bne.n	8007284 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007260:	e009      	b.n	8007276 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007262:	f7ff f8e1 	bl	8006428 <HAL_GetTick>
 8007266:	0002      	movs	r2, r0
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	1ad3      	subs	r3, r2, r3
 800726c:	4a58      	ldr	r2, [pc, #352]	; (80073d0 <HAL_RCC_ClockConfig+0x274>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d901      	bls.n	8007276 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8007272:	2303      	movs	r3, #3
 8007274:	e0a5      	b.n	80073c2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007276:	4b57      	ldr	r3, [pc, #348]	; (80073d4 <HAL_RCC_ClockConfig+0x278>)
 8007278:	68db      	ldr	r3, [r3, #12]
 800727a:	220c      	movs	r2, #12
 800727c:	4013      	ands	r3, r2
 800727e:	2b08      	cmp	r3, #8
 8007280:	d1ef      	bne.n	8007262 <HAL_RCC_ClockConfig+0x106>
 8007282:	e03a      	b.n	80072fa <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	2b03      	cmp	r3, #3
 800728a:	d111      	bne.n	80072b0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800728c:	e009      	b.n	80072a2 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800728e:	f7ff f8cb 	bl	8006428 <HAL_GetTick>
 8007292:	0002      	movs	r2, r0
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	1ad3      	subs	r3, r2, r3
 8007298:	4a4d      	ldr	r2, [pc, #308]	; (80073d0 <HAL_RCC_ClockConfig+0x274>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d901      	bls.n	80072a2 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800729e:	2303      	movs	r3, #3
 80072a0:	e08f      	b.n	80073c2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80072a2:	4b4c      	ldr	r3, [pc, #304]	; (80073d4 <HAL_RCC_ClockConfig+0x278>)
 80072a4:	68db      	ldr	r3, [r3, #12]
 80072a6:	220c      	movs	r2, #12
 80072a8:	4013      	ands	r3, r2
 80072aa:	2b0c      	cmp	r3, #12
 80072ac:	d1ef      	bne.n	800728e <HAL_RCC_ClockConfig+0x132>
 80072ae:	e024      	b.n	80072fa <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	2b01      	cmp	r3, #1
 80072b6:	d11b      	bne.n	80072f0 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80072b8:	e009      	b.n	80072ce <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80072ba:	f7ff f8b5 	bl	8006428 <HAL_GetTick>
 80072be:	0002      	movs	r2, r0
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	1ad3      	subs	r3, r2, r3
 80072c4:	4a42      	ldr	r2, [pc, #264]	; (80073d0 <HAL_RCC_ClockConfig+0x274>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d901      	bls.n	80072ce <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80072ca:	2303      	movs	r3, #3
 80072cc:	e079      	b.n	80073c2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80072ce:	4b41      	ldr	r3, [pc, #260]	; (80073d4 <HAL_RCC_ClockConfig+0x278>)
 80072d0:	68db      	ldr	r3, [r3, #12]
 80072d2:	220c      	movs	r2, #12
 80072d4:	4013      	ands	r3, r2
 80072d6:	2b04      	cmp	r3, #4
 80072d8:	d1ef      	bne.n	80072ba <HAL_RCC_ClockConfig+0x15e>
 80072da:	e00e      	b.n	80072fa <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80072dc:	f7ff f8a4 	bl	8006428 <HAL_GetTick>
 80072e0:	0002      	movs	r2, r0
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	1ad3      	subs	r3, r2, r3
 80072e6:	4a3a      	ldr	r2, [pc, #232]	; (80073d0 <HAL_RCC_ClockConfig+0x274>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d901      	bls.n	80072f0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80072ec:	2303      	movs	r3, #3
 80072ee:	e068      	b.n	80073c2 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80072f0:	4b38      	ldr	r3, [pc, #224]	; (80073d4 <HAL_RCC_ClockConfig+0x278>)
 80072f2:	68db      	ldr	r3, [r3, #12]
 80072f4:	220c      	movs	r2, #12
 80072f6:	4013      	ands	r3, r2
 80072f8:	d1f0      	bne.n	80072dc <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80072fa:	4b34      	ldr	r3, [pc, #208]	; (80073cc <HAL_RCC_ClockConfig+0x270>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	2201      	movs	r2, #1
 8007300:	4013      	ands	r3, r2
 8007302:	683a      	ldr	r2, [r7, #0]
 8007304:	429a      	cmp	r2, r3
 8007306:	d21e      	bcs.n	8007346 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007308:	4b30      	ldr	r3, [pc, #192]	; (80073cc <HAL_RCC_ClockConfig+0x270>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	2201      	movs	r2, #1
 800730e:	4393      	bics	r3, r2
 8007310:	0019      	movs	r1, r3
 8007312:	4b2e      	ldr	r3, [pc, #184]	; (80073cc <HAL_RCC_ClockConfig+0x270>)
 8007314:	683a      	ldr	r2, [r7, #0]
 8007316:	430a      	orrs	r2, r1
 8007318:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800731a:	f7ff f885 	bl	8006428 <HAL_GetTick>
 800731e:	0003      	movs	r3, r0
 8007320:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007322:	e009      	b.n	8007338 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007324:	f7ff f880 	bl	8006428 <HAL_GetTick>
 8007328:	0002      	movs	r2, r0
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	1ad3      	subs	r3, r2, r3
 800732e:	4a28      	ldr	r2, [pc, #160]	; (80073d0 <HAL_RCC_ClockConfig+0x274>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d901      	bls.n	8007338 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8007334:	2303      	movs	r3, #3
 8007336:	e044      	b.n	80073c2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007338:	4b24      	ldr	r3, [pc, #144]	; (80073cc <HAL_RCC_ClockConfig+0x270>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	2201      	movs	r2, #1
 800733e:	4013      	ands	r3, r2
 8007340:	683a      	ldr	r2, [r7, #0]
 8007342:	429a      	cmp	r2, r3
 8007344:	d1ee      	bne.n	8007324 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	2204      	movs	r2, #4
 800734c:	4013      	ands	r3, r2
 800734e:	d009      	beq.n	8007364 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007350:	4b20      	ldr	r3, [pc, #128]	; (80073d4 <HAL_RCC_ClockConfig+0x278>)
 8007352:	68db      	ldr	r3, [r3, #12]
 8007354:	4a20      	ldr	r2, [pc, #128]	; (80073d8 <HAL_RCC_ClockConfig+0x27c>)
 8007356:	4013      	ands	r3, r2
 8007358:	0019      	movs	r1, r3
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	68da      	ldr	r2, [r3, #12]
 800735e:	4b1d      	ldr	r3, [pc, #116]	; (80073d4 <HAL_RCC_ClockConfig+0x278>)
 8007360:	430a      	orrs	r2, r1
 8007362:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	2208      	movs	r2, #8
 800736a:	4013      	ands	r3, r2
 800736c:	d00a      	beq.n	8007384 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800736e:	4b19      	ldr	r3, [pc, #100]	; (80073d4 <HAL_RCC_ClockConfig+0x278>)
 8007370:	68db      	ldr	r3, [r3, #12]
 8007372:	4a1a      	ldr	r2, [pc, #104]	; (80073dc <HAL_RCC_ClockConfig+0x280>)
 8007374:	4013      	ands	r3, r2
 8007376:	0019      	movs	r1, r3
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	691b      	ldr	r3, [r3, #16]
 800737c:	00da      	lsls	r2, r3, #3
 800737e:	4b15      	ldr	r3, [pc, #84]	; (80073d4 <HAL_RCC_ClockConfig+0x278>)
 8007380:	430a      	orrs	r2, r1
 8007382:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007384:	f000 f832 	bl	80073ec <HAL_RCC_GetSysClockFreq>
 8007388:	0001      	movs	r1, r0
 800738a:	4b12      	ldr	r3, [pc, #72]	; (80073d4 <HAL_RCC_ClockConfig+0x278>)
 800738c:	68db      	ldr	r3, [r3, #12]
 800738e:	091b      	lsrs	r3, r3, #4
 8007390:	220f      	movs	r2, #15
 8007392:	4013      	ands	r3, r2
 8007394:	4a12      	ldr	r2, [pc, #72]	; (80073e0 <HAL_RCC_ClockConfig+0x284>)
 8007396:	5cd3      	ldrb	r3, [r2, r3]
 8007398:	000a      	movs	r2, r1
 800739a:	40da      	lsrs	r2, r3
 800739c:	4b11      	ldr	r3, [pc, #68]	; (80073e4 <HAL_RCC_ClockConfig+0x288>)
 800739e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80073a0:	4b11      	ldr	r3, [pc, #68]	; (80073e8 <HAL_RCC_ClockConfig+0x28c>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	250b      	movs	r5, #11
 80073a6:	197c      	adds	r4, r7, r5
 80073a8:	0018      	movs	r0, r3
 80073aa:	f7fe fff7 	bl	800639c <HAL_InitTick>
 80073ae:	0003      	movs	r3, r0
 80073b0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80073b2:	197b      	adds	r3, r7, r5
 80073b4:	781b      	ldrb	r3, [r3, #0]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d002      	beq.n	80073c0 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80073ba:	197b      	adds	r3, r7, r5
 80073bc:	781b      	ldrb	r3, [r3, #0]
 80073be:	e000      	b.n	80073c2 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80073c0:	2300      	movs	r3, #0
}
 80073c2:	0018      	movs	r0, r3
 80073c4:	46bd      	mov	sp, r7
 80073c6:	b004      	add	sp, #16
 80073c8:	bdb0      	pop	{r4, r5, r7, pc}
 80073ca:	46c0      	nop			; (mov r8, r8)
 80073cc:	40022000 	.word	0x40022000
 80073d0:	00001388 	.word	0x00001388
 80073d4:	40021000 	.word	0x40021000
 80073d8:	fffff8ff 	.word	0xfffff8ff
 80073dc:	ffffc7ff 	.word	0xffffc7ff
 80073e0:	0800f38c 	.word	0x0800f38c
 80073e4:	2000000c 	.word	0x2000000c
 80073e8:	20000010 	.word	0x20000010

080073ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80073ec:	b5b0      	push	{r4, r5, r7, lr}
 80073ee:	b08e      	sub	sp, #56	; 0x38
 80073f0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80073f2:	4b4c      	ldr	r3, [pc, #304]	; (8007524 <HAL_RCC_GetSysClockFreq+0x138>)
 80073f4:	68db      	ldr	r3, [r3, #12]
 80073f6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80073f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073fa:	230c      	movs	r3, #12
 80073fc:	4013      	ands	r3, r2
 80073fe:	2b0c      	cmp	r3, #12
 8007400:	d014      	beq.n	800742c <HAL_RCC_GetSysClockFreq+0x40>
 8007402:	d900      	bls.n	8007406 <HAL_RCC_GetSysClockFreq+0x1a>
 8007404:	e07b      	b.n	80074fe <HAL_RCC_GetSysClockFreq+0x112>
 8007406:	2b04      	cmp	r3, #4
 8007408:	d002      	beq.n	8007410 <HAL_RCC_GetSysClockFreq+0x24>
 800740a:	2b08      	cmp	r3, #8
 800740c:	d00b      	beq.n	8007426 <HAL_RCC_GetSysClockFreq+0x3a>
 800740e:	e076      	b.n	80074fe <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8007410:	4b44      	ldr	r3, [pc, #272]	; (8007524 <HAL_RCC_GetSysClockFreq+0x138>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	2210      	movs	r2, #16
 8007416:	4013      	ands	r3, r2
 8007418:	d002      	beq.n	8007420 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800741a:	4b43      	ldr	r3, [pc, #268]	; (8007528 <HAL_RCC_GetSysClockFreq+0x13c>)
 800741c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800741e:	e07c      	b.n	800751a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8007420:	4b42      	ldr	r3, [pc, #264]	; (800752c <HAL_RCC_GetSysClockFreq+0x140>)
 8007422:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8007424:	e079      	b.n	800751a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007426:	4b42      	ldr	r3, [pc, #264]	; (8007530 <HAL_RCC_GetSysClockFreq+0x144>)
 8007428:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800742a:	e076      	b.n	800751a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800742c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800742e:	0c9a      	lsrs	r2, r3, #18
 8007430:	230f      	movs	r3, #15
 8007432:	401a      	ands	r2, r3
 8007434:	4b3f      	ldr	r3, [pc, #252]	; (8007534 <HAL_RCC_GetSysClockFreq+0x148>)
 8007436:	5c9b      	ldrb	r3, [r3, r2]
 8007438:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800743a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800743c:	0d9a      	lsrs	r2, r3, #22
 800743e:	2303      	movs	r3, #3
 8007440:	4013      	ands	r3, r2
 8007442:	3301      	adds	r3, #1
 8007444:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007446:	4b37      	ldr	r3, [pc, #220]	; (8007524 <HAL_RCC_GetSysClockFreq+0x138>)
 8007448:	68da      	ldr	r2, [r3, #12]
 800744a:	2380      	movs	r3, #128	; 0x80
 800744c:	025b      	lsls	r3, r3, #9
 800744e:	4013      	ands	r3, r2
 8007450:	d01a      	beq.n	8007488 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8007452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007454:	61bb      	str	r3, [r7, #24]
 8007456:	2300      	movs	r3, #0
 8007458:	61fb      	str	r3, [r7, #28]
 800745a:	4a35      	ldr	r2, [pc, #212]	; (8007530 <HAL_RCC_GetSysClockFreq+0x144>)
 800745c:	2300      	movs	r3, #0
 800745e:	69b8      	ldr	r0, [r7, #24]
 8007460:	69f9      	ldr	r1, [r7, #28]
 8007462:	f7f8 ff0f 	bl	8000284 <__aeabi_lmul>
 8007466:	0002      	movs	r2, r0
 8007468:	000b      	movs	r3, r1
 800746a:	0010      	movs	r0, r2
 800746c:	0019      	movs	r1, r3
 800746e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007470:	613b      	str	r3, [r7, #16]
 8007472:	2300      	movs	r3, #0
 8007474:	617b      	str	r3, [r7, #20]
 8007476:	693a      	ldr	r2, [r7, #16]
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	f7f8 fee3 	bl	8000244 <__aeabi_uldivmod>
 800747e:	0002      	movs	r2, r0
 8007480:	000b      	movs	r3, r1
 8007482:	0013      	movs	r3, r2
 8007484:	637b      	str	r3, [r7, #52]	; 0x34
 8007486:	e037      	b.n	80074f8 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8007488:	4b26      	ldr	r3, [pc, #152]	; (8007524 <HAL_RCC_GetSysClockFreq+0x138>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	2210      	movs	r2, #16
 800748e:	4013      	ands	r3, r2
 8007490:	d01a      	beq.n	80074c8 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8007492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007494:	60bb      	str	r3, [r7, #8]
 8007496:	2300      	movs	r3, #0
 8007498:	60fb      	str	r3, [r7, #12]
 800749a:	4a23      	ldr	r2, [pc, #140]	; (8007528 <HAL_RCC_GetSysClockFreq+0x13c>)
 800749c:	2300      	movs	r3, #0
 800749e:	68b8      	ldr	r0, [r7, #8]
 80074a0:	68f9      	ldr	r1, [r7, #12]
 80074a2:	f7f8 feef 	bl	8000284 <__aeabi_lmul>
 80074a6:	0002      	movs	r2, r0
 80074a8:	000b      	movs	r3, r1
 80074aa:	0010      	movs	r0, r2
 80074ac:	0019      	movs	r1, r3
 80074ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b0:	603b      	str	r3, [r7, #0]
 80074b2:	2300      	movs	r3, #0
 80074b4:	607b      	str	r3, [r7, #4]
 80074b6:	683a      	ldr	r2, [r7, #0]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f7f8 fec3 	bl	8000244 <__aeabi_uldivmod>
 80074be:	0002      	movs	r2, r0
 80074c0:	000b      	movs	r3, r1
 80074c2:	0013      	movs	r3, r2
 80074c4:	637b      	str	r3, [r7, #52]	; 0x34
 80074c6:	e017      	b.n	80074f8 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80074c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ca:	0018      	movs	r0, r3
 80074cc:	2300      	movs	r3, #0
 80074ce:	0019      	movs	r1, r3
 80074d0:	4a16      	ldr	r2, [pc, #88]	; (800752c <HAL_RCC_GetSysClockFreq+0x140>)
 80074d2:	2300      	movs	r3, #0
 80074d4:	f7f8 fed6 	bl	8000284 <__aeabi_lmul>
 80074d8:	0002      	movs	r2, r0
 80074da:	000b      	movs	r3, r1
 80074dc:	0010      	movs	r0, r2
 80074de:	0019      	movs	r1, r3
 80074e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e2:	001c      	movs	r4, r3
 80074e4:	2300      	movs	r3, #0
 80074e6:	001d      	movs	r5, r3
 80074e8:	0022      	movs	r2, r4
 80074ea:	002b      	movs	r3, r5
 80074ec:	f7f8 feaa 	bl	8000244 <__aeabi_uldivmod>
 80074f0:	0002      	movs	r2, r0
 80074f2:	000b      	movs	r3, r1
 80074f4:	0013      	movs	r3, r2
 80074f6:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80074f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074fa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80074fc:	e00d      	b.n	800751a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80074fe:	4b09      	ldr	r3, [pc, #36]	; (8007524 <HAL_RCC_GetSysClockFreq+0x138>)
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	0b5b      	lsrs	r3, r3, #13
 8007504:	2207      	movs	r2, #7
 8007506:	4013      	ands	r3, r2
 8007508:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800750a:	6a3b      	ldr	r3, [r7, #32]
 800750c:	3301      	adds	r3, #1
 800750e:	2280      	movs	r2, #128	; 0x80
 8007510:	0212      	lsls	r2, r2, #8
 8007512:	409a      	lsls	r2, r3
 8007514:	0013      	movs	r3, r2
 8007516:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8007518:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800751a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800751c:	0018      	movs	r0, r3
 800751e:	46bd      	mov	sp, r7
 8007520:	b00e      	add	sp, #56	; 0x38
 8007522:	bdb0      	pop	{r4, r5, r7, pc}
 8007524:	40021000 	.word	0x40021000
 8007528:	003d0900 	.word	0x003d0900
 800752c:	00f42400 	.word	0x00f42400
 8007530:	007a1200 	.word	0x007a1200
 8007534:	0800f39c 	.word	0x0800f39c

08007538 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b082      	sub	sp, #8
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d101      	bne.n	800754a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007546:	2301      	movs	r3, #1
 8007548:	e032      	b.n	80075b0 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2239      	movs	r2, #57	; 0x39
 800754e:	5c9b      	ldrb	r3, [r3, r2]
 8007550:	b2db      	uxtb	r3, r3
 8007552:	2b00      	cmp	r3, #0
 8007554:	d107      	bne.n	8007566 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2238      	movs	r2, #56	; 0x38
 800755a:	2100      	movs	r1, #0
 800755c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	0018      	movs	r0, r3
 8007562:	f7fe fddf 	bl	8006124 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2239      	movs	r2, #57	; 0x39
 800756a:	2102      	movs	r1, #2
 800756c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681a      	ldr	r2, [r3, #0]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	3304      	adds	r3, #4
 8007576:	0019      	movs	r1, r3
 8007578:	0010      	movs	r0, r2
 800757a:	f000 f931 	bl	80077e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	223e      	movs	r2, #62	; 0x3e
 8007582:	2101      	movs	r1, #1
 8007584:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	223a      	movs	r2, #58	; 0x3a
 800758a:	2101      	movs	r1, #1
 800758c:	5499      	strb	r1, [r3, r2]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	223b      	movs	r2, #59	; 0x3b
 8007592:	2101      	movs	r1, #1
 8007594:	5499      	strb	r1, [r3, r2]
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	223c      	movs	r2, #60	; 0x3c
 800759a:	2101      	movs	r1, #1
 800759c:	5499      	strb	r1, [r3, r2]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	223d      	movs	r2, #61	; 0x3d
 80075a2:	2101      	movs	r1, #1
 80075a4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2239      	movs	r2, #57	; 0x39
 80075aa:	2101      	movs	r1, #1
 80075ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80075ae:	2300      	movs	r3, #0
}
 80075b0:	0018      	movs	r0, r3
 80075b2:	46bd      	mov	sp, r7
 80075b4:	b002      	add	sp, #8
 80075b6:	bd80      	pop	{r7, pc}

080075b8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b084      	sub	sp, #16
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2239      	movs	r2, #57	; 0x39
 80075c4:	5c9b      	ldrb	r3, [r3, r2]
 80075c6:	b2db      	uxtb	r3, r3
 80075c8:	2b01      	cmp	r3, #1
 80075ca:	d001      	beq.n	80075d0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80075cc:	2301      	movs	r3, #1
 80075ce:	e033      	b.n	8007638 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2239      	movs	r2, #57	; 0x39
 80075d4:	2102      	movs	r1, #2
 80075d6:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681a      	ldr	r2, [r3, #0]
 80075dc:	2380      	movs	r3, #128	; 0x80
 80075de:	05db      	lsls	r3, r3, #23
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d00e      	beq.n	8007602 <HAL_TIM_Base_Start+0x4a>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a15      	ldr	r2, [pc, #84]	; (8007640 <HAL_TIM_Base_Start+0x88>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d009      	beq.n	8007602 <HAL_TIM_Base_Start+0x4a>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a14      	ldr	r2, [pc, #80]	; (8007644 <HAL_TIM_Base_Start+0x8c>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d004      	beq.n	8007602 <HAL_TIM_Base_Start+0x4a>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a12      	ldr	r2, [pc, #72]	; (8007648 <HAL_TIM_Base_Start+0x90>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d111      	bne.n	8007626 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	689b      	ldr	r3, [r3, #8]
 8007608:	2207      	movs	r2, #7
 800760a:	4013      	ands	r3, r2
 800760c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	2b06      	cmp	r3, #6
 8007612:	d010      	beq.n	8007636 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	681a      	ldr	r2, [r3, #0]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	2101      	movs	r1, #1
 8007620:	430a      	orrs	r2, r1
 8007622:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007624:	e007      	b.n	8007636 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	681a      	ldr	r2, [r3, #0]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	2101      	movs	r1, #1
 8007632:	430a      	orrs	r2, r1
 8007634:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007636:	2300      	movs	r3, #0
}
 8007638:	0018      	movs	r0, r3
 800763a:	46bd      	mov	sp, r7
 800763c:	b004      	add	sp, #16
 800763e:	bd80      	pop	{r7, pc}
 8007640:	40000400 	.word	0x40000400
 8007644:	40010800 	.word	0x40010800
 8007648:	40011400 	.word	0x40011400

0800764c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b084      	sub	sp, #16
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2238      	movs	r2, #56	; 0x38
 800765a:	5c9b      	ldrb	r3, [r3, r2]
 800765c:	2b01      	cmp	r3, #1
 800765e:	d101      	bne.n	8007664 <HAL_TIM_ConfigClockSource+0x18>
 8007660:	2302      	movs	r3, #2
 8007662:	e0b7      	b.n	80077d4 <HAL_TIM_ConfigClockSource+0x188>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2238      	movs	r2, #56	; 0x38
 8007668:	2101      	movs	r1, #1
 800766a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2239      	movs	r2, #57	; 0x39
 8007670:	2102      	movs	r1, #2
 8007672:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	689b      	ldr	r3, [r3, #8]
 800767a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	2277      	movs	r2, #119	; 0x77
 8007680:	4393      	bics	r3, r2
 8007682:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	4a55      	ldr	r2, [pc, #340]	; (80077dc <HAL_TIM_ConfigClockSource+0x190>)
 8007688:	4013      	ands	r3, r2
 800768a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	68fa      	ldr	r2, [r7, #12]
 8007692:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	2280      	movs	r2, #128	; 0x80
 800769a:	0192      	lsls	r2, r2, #6
 800769c:	4293      	cmp	r3, r2
 800769e:	d040      	beq.n	8007722 <HAL_TIM_ConfigClockSource+0xd6>
 80076a0:	2280      	movs	r2, #128	; 0x80
 80076a2:	0192      	lsls	r2, r2, #6
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d900      	bls.n	80076aa <HAL_TIM_ConfigClockSource+0x5e>
 80076a8:	e088      	b.n	80077bc <HAL_TIM_ConfigClockSource+0x170>
 80076aa:	2280      	movs	r2, #128	; 0x80
 80076ac:	0152      	lsls	r2, r2, #5
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d100      	bne.n	80076b4 <HAL_TIM_ConfigClockSource+0x68>
 80076b2:	e085      	b.n	80077c0 <HAL_TIM_ConfigClockSource+0x174>
 80076b4:	2280      	movs	r2, #128	; 0x80
 80076b6:	0152      	lsls	r2, r2, #5
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d900      	bls.n	80076be <HAL_TIM_ConfigClockSource+0x72>
 80076bc:	e07e      	b.n	80077bc <HAL_TIM_ConfigClockSource+0x170>
 80076be:	2b70      	cmp	r3, #112	; 0x70
 80076c0:	d018      	beq.n	80076f4 <HAL_TIM_ConfigClockSource+0xa8>
 80076c2:	d900      	bls.n	80076c6 <HAL_TIM_ConfigClockSource+0x7a>
 80076c4:	e07a      	b.n	80077bc <HAL_TIM_ConfigClockSource+0x170>
 80076c6:	2b60      	cmp	r3, #96	; 0x60
 80076c8:	d04f      	beq.n	800776a <HAL_TIM_ConfigClockSource+0x11e>
 80076ca:	d900      	bls.n	80076ce <HAL_TIM_ConfigClockSource+0x82>
 80076cc:	e076      	b.n	80077bc <HAL_TIM_ConfigClockSource+0x170>
 80076ce:	2b50      	cmp	r3, #80	; 0x50
 80076d0:	d03b      	beq.n	800774a <HAL_TIM_ConfigClockSource+0xfe>
 80076d2:	d900      	bls.n	80076d6 <HAL_TIM_ConfigClockSource+0x8a>
 80076d4:	e072      	b.n	80077bc <HAL_TIM_ConfigClockSource+0x170>
 80076d6:	2b40      	cmp	r3, #64	; 0x40
 80076d8:	d057      	beq.n	800778a <HAL_TIM_ConfigClockSource+0x13e>
 80076da:	d900      	bls.n	80076de <HAL_TIM_ConfigClockSource+0x92>
 80076dc:	e06e      	b.n	80077bc <HAL_TIM_ConfigClockSource+0x170>
 80076de:	2b30      	cmp	r3, #48	; 0x30
 80076e0:	d063      	beq.n	80077aa <HAL_TIM_ConfigClockSource+0x15e>
 80076e2:	d86b      	bhi.n	80077bc <HAL_TIM_ConfigClockSource+0x170>
 80076e4:	2b20      	cmp	r3, #32
 80076e6:	d060      	beq.n	80077aa <HAL_TIM_ConfigClockSource+0x15e>
 80076e8:	d868      	bhi.n	80077bc <HAL_TIM_ConfigClockSource+0x170>
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d05d      	beq.n	80077aa <HAL_TIM_ConfigClockSource+0x15e>
 80076ee:	2b10      	cmp	r3, #16
 80076f0:	d05b      	beq.n	80077aa <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80076f2:	e063      	b.n	80077bc <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6818      	ldr	r0, [r3, #0]
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	6899      	ldr	r1, [r3, #8]
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	685a      	ldr	r2, [r3, #4]
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	68db      	ldr	r3, [r3, #12]
 8007704:	f000 f944 	bl	8007990 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	689b      	ldr	r3, [r3, #8]
 800770e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2277      	movs	r2, #119	; 0x77
 8007714:	4313      	orrs	r3, r2
 8007716:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	68fa      	ldr	r2, [r7, #12]
 800771e:	609a      	str	r2, [r3, #8]
      break;
 8007720:	e04f      	b.n	80077c2 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6818      	ldr	r0, [r3, #0]
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	6899      	ldr	r1, [r3, #8]
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	685a      	ldr	r2, [r3, #4]
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	68db      	ldr	r3, [r3, #12]
 8007732:	f000 f92d 	bl	8007990 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	689a      	ldr	r2, [r3, #8]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	2180      	movs	r1, #128	; 0x80
 8007742:	01c9      	lsls	r1, r1, #7
 8007744:	430a      	orrs	r2, r1
 8007746:	609a      	str	r2, [r3, #8]
      break;
 8007748:	e03b      	b.n	80077c2 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6818      	ldr	r0, [r3, #0]
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	6859      	ldr	r1, [r3, #4]
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	68db      	ldr	r3, [r3, #12]
 8007756:	001a      	movs	r2, r3
 8007758:	f000 f8a0 	bl	800789c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	2150      	movs	r1, #80	; 0x50
 8007762:	0018      	movs	r0, r3
 8007764:	f000 f8fa 	bl	800795c <TIM_ITRx_SetConfig>
      break;
 8007768:	e02b      	b.n	80077c2 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6818      	ldr	r0, [r3, #0]
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	6859      	ldr	r1, [r3, #4]
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	68db      	ldr	r3, [r3, #12]
 8007776:	001a      	movs	r2, r3
 8007778:	f000 f8be 	bl	80078f8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	2160      	movs	r1, #96	; 0x60
 8007782:	0018      	movs	r0, r3
 8007784:	f000 f8ea 	bl	800795c <TIM_ITRx_SetConfig>
      break;
 8007788:	e01b      	b.n	80077c2 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6818      	ldr	r0, [r3, #0]
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	6859      	ldr	r1, [r3, #4]
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	68db      	ldr	r3, [r3, #12]
 8007796:	001a      	movs	r2, r3
 8007798:	f000 f880 	bl	800789c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	2140      	movs	r1, #64	; 0x40
 80077a2:	0018      	movs	r0, r3
 80077a4:	f000 f8da 	bl	800795c <TIM_ITRx_SetConfig>
      break;
 80077a8:	e00b      	b.n	80077c2 <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681a      	ldr	r2, [r3, #0]
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	0019      	movs	r1, r3
 80077b4:	0010      	movs	r0, r2
 80077b6:	f000 f8d1 	bl	800795c <TIM_ITRx_SetConfig>
        break;
 80077ba:	e002      	b.n	80077c2 <HAL_TIM_ConfigClockSource+0x176>
      break;
 80077bc:	46c0      	nop			; (mov r8, r8)
 80077be:	e000      	b.n	80077c2 <HAL_TIM_ConfigClockSource+0x176>
      break;
 80077c0:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2239      	movs	r2, #57	; 0x39
 80077c6:	2101      	movs	r1, #1
 80077c8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2238      	movs	r2, #56	; 0x38
 80077ce:	2100      	movs	r1, #0
 80077d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80077d2:	2300      	movs	r3, #0
}
 80077d4:	0018      	movs	r0, r3
 80077d6:	46bd      	mov	sp, r7
 80077d8:	b004      	add	sp, #16
 80077da:	bd80      	pop	{r7, pc}
 80077dc:	ffff00ff 	.word	0xffff00ff

080077e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b084      	sub	sp, #16
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80077f0:	687a      	ldr	r2, [r7, #4]
 80077f2:	2380      	movs	r3, #128	; 0x80
 80077f4:	05db      	lsls	r3, r3, #23
 80077f6:	429a      	cmp	r2, r3
 80077f8:	d00b      	beq.n	8007812 <TIM_Base_SetConfig+0x32>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	4a23      	ldr	r2, [pc, #140]	; (800788c <TIM_Base_SetConfig+0xac>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d007      	beq.n	8007812 <TIM_Base_SetConfig+0x32>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	4a22      	ldr	r2, [pc, #136]	; (8007890 <TIM_Base_SetConfig+0xb0>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d003      	beq.n	8007812 <TIM_Base_SetConfig+0x32>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	4a21      	ldr	r2, [pc, #132]	; (8007894 <TIM_Base_SetConfig+0xb4>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d108      	bne.n	8007824 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2270      	movs	r2, #112	; 0x70
 8007816:	4393      	bics	r3, r2
 8007818:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	68fa      	ldr	r2, [r7, #12]
 8007820:	4313      	orrs	r3, r2
 8007822:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007824:	687a      	ldr	r2, [r7, #4]
 8007826:	2380      	movs	r3, #128	; 0x80
 8007828:	05db      	lsls	r3, r3, #23
 800782a:	429a      	cmp	r2, r3
 800782c:	d00b      	beq.n	8007846 <TIM_Base_SetConfig+0x66>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	4a16      	ldr	r2, [pc, #88]	; (800788c <TIM_Base_SetConfig+0xac>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d007      	beq.n	8007846 <TIM_Base_SetConfig+0x66>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	4a15      	ldr	r2, [pc, #84]	; (8007890 <TIM_Base_SetConfig+0xb0>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d003      	beq.n	8007846 <TIM_Base_SetConfig+0x66>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	4a14      	ldr	r2, [pc, #80]	; (8007894 <TIM_Base_SetConfig+0xb4>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d108      	bne.n	8007858 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	4a13      	ldr	r2, [pc, #76]	; (8007898 <TIM_Base_SetConfig+0xb8>)
 800784a:	4013      	ands	r3, r2
 800784c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	68db      	ldr	r3, [r3, #12]
 8007852:	68fa      	ldr	r2, [r7, #12]
 8007854:	4313      	orrs	r3, r2
 8007856:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	2280      	movs	r2, #128	; 0x80
 800785c:	4393      	bics	r3, r2
 800785e:	001a      	movs	r2, r3
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	691b      	ldr	r3, [r3, #16]
 8007864:	4313      	orrs	r3, r2
 8007866:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	68fa      	ldr	r2, [r7, #12]
 800786c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	689a      	ldr	r2, [r3, #8]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	681a      	ldr	r2, [r3, #0]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2201      	movs	r2, #1
 8007882:	615a      	str	r2, [r3, #20]
}
 8007884:	46c0      	nop			; (mov r8, r8)
 8007886:	46bd      	mov	sp, r7
 8007888:	b004      	add	sp, #16
 800788a:	bd80      	pop	{r7, pc}
 800788c:	40000400 	.word	0x40000400
 8007890:	40010800 	.word	0x40010800
 8007894:	40011400 	.word	0x40011400
 8007898:	fffffcff 	.word	0xfffffcff

0800789c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b086      	sub	sp, #24
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	60f8      	str	r0, [r7, #12]
 80078a4:	60b9      	str	r1, [r7, #8]
 80078a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	6a1b      	ldr	r3, [r3, #32]
 80078ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	6a1b      	ldr	r3, [r3, #32]
 80078b2:	2201      	movs	r2, #1
 80078b4:	4393      	bics	r3, r2
 80078b6:	001a      	movs	r2, r3
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	699b      	ldr	r3, [r3, #24]
 80078c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	22f0      	movs	r2, #240	; 0xf0
 80078c6:	4393      	bics	r3, r2
 80078c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	011b      	lsls	r3, r3, #4
 80078ce:	693a      	ldr	r2, [r7, #16]
 80078d0:	4313      	orrs	r3, r2
 80078d2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	220a      	movs	r2, #10
 80078d8:	4393      	bics	r3, r2
 80078da:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80078dc:	697a      	ldr	r2, [r7, #20]
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	4313      	orrs	r3, r2
 80078e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	693a      	ldr	r2, [r7, #16]
 80078e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	697a      	ldr	r2, [r7, #20]
 80078ee:	621a      	str	r2, [r3, #32]
}
 80078f0:	46c0      	nop			; (mov r8, r8)
 80078f2:	46bd      	mov	sp, r7
 80078f4:	b006      	add	sp, #24
 80078f6:	bd80      	pop	{r7, pc}

080078f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b086      	sub	sp, #24
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	60f8      	str	r0, [r7, #12]
 8007900:	60b9      	str	r1, [r7, #8]
 8007902:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	6a1b      	ldr	r3, [r3, #32]
 8007908:	2210      	movs	r2, #16
 800790a:	4393      	bics	r3, r2
 800790c:	001a      	movs	r2, r3
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	699b      	ldr	r3, [r3, #24]
 8007916:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	6a1b      	ldr	r3, [r3, #32]
 800791c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	4a0d      	ldr	r2, [pc, #52]	; (8007958 <TIM_TI2_ConfigInputStage+0x60>)
 8007922:	4013      	ands	r3, r2
 8007924:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	031b      	lsls	r3, r3, #12
 800792a:	697a      	ldr	r2, [r7, #20]
 800792c:	4313      	orrs	r3, r2
 800792e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	22a0      	movs	r2, #160	; 0xa0
 8007934:	4393      	bics	r3, r2
 8007936:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	011b      	lsls	r3, r3, #4
 800793c:	693a      	ldr	r2, [r7, #16]
 800793e:	4313      	orrs	r3, r2
 8007940:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	697a      	ldr	r2, [r7, #20]
 8007946:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	693a      	ldr	r2, [r7, #16]
 800794c:	621a      	str	r2, [r3, #32]
}
 800794e:	46c0      	nop			; (mov r8, r8)
 8007950:	46bd      	mov	sp, r7
 8007952:	b006      	add	sp, #24
 8007954:	bd80      	pop	{r7, pc}
 8007956:	46c0      	nop			; (mov r8, r8)
 8007958:	ffff0fff 	.word	0xffff0fff

0800795c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b084      	sub	sp, #16
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
 8007964:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	689b      	ldr	r3, [r3, #8]
 800796a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	2270      	movs	r2, #112	; 0x70
 8007970:	4393      	bics	r3, r2
 8007972:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007974:	683a      	ldr	r2, [r7, #0]
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	4313      	orrs	r3, r2
 800797a:	2207      	movs	r2, #7
 800797c:	4313      	orrs	r3, r2
 800797e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	68fa      	ldr	r2, [r7, #12]
 8007984:	609a      	str	r2, [r3, #8]
}
 8007986:	46c0      	nop			; (mov r8, r8)
 8007988:	46bd      	mov	sp, r7
 800798a:	b004      	add	sp, #16
 800798c:	bd80      	pop	{r7, pc}
	...

08007990 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b086      	sub	sp, #24
 8007994:	af00      	add	r7, sp, #0
 8007996:	60f8      	str	r0, [r7, #12]
 8007998:	60b9      	str	r1, [r7, #8]
 800799a:	607a      	str	r2, [r7, #4]
 800799c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	689b      	ldr	r3, [r3, #8]
 80079a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	4a09      	ldr	r2, [pc, #36]	; (80079cc <TIM_ETR_SetConfig+0x3c>)
 80079a8:	4013      	ands	r3, r2
 80079aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	021a      	lsls	r2, r3, #8
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	431a      	orrs	r2, r3
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	4313      	orrs	r3, r2
 80079b8:	697a      	ldr	r2, [r7, #20]
 80079ba:	4313      	orrs	r3, r2
 80079bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	697a      	ldr	r2, [r7, #20]
 80079c2:	609a      	str	r2, [r3, #8]
}
 80079c4:	46c0      	nop			; (mov r8, r8)
 80079c6:	46bd      	mov	sp, r7
 80079c8:	b006      	add	sp, #24
 80079ca:	bd80      	pop	{r7, pc}
 80079cc:	ffff00ff 	.word	0xffff00ff

080079d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b084      	sub	sp, #16
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
 80079d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2238      	movs	r2, #56	; 0x38
 80079de:	5c9b      	ldrb	r3, [r3, r2]
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	d101      	bne.n	80079e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80079e4:	2302      	movs	r3, #2
 80079e6:	e047      	b.n	8007a78 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2238      	movs	r2, #56	; 0x38
 80079ec:	2101      	movs	r1, #1
 80079ee:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2239      	movs	r2, #57	; 0x39
 80079f4:	2102      	movs	r1, #2
 80079f6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	689b      	ldr	r3, [r3, #8]
 8007a06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	2270      	movs	r2, #112	; 0x70
 8007a0c:	4393      	bics	r3, r2
 8007a0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	68fa      	ldr	r2, [r7, #12]
 8007a16:	4313      	orrs	r3, r2
 8007a18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	68fa      	ldr	r2, [r7, #12]
 8007a20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681a      	ldr	r2, [r3, #0]
 8007a26:	2380      	movs	r3, #128	; 0x80
 8007a28:	05db      	lsls	r3, r3, #23
 8007a2a:	429a      	cmp	r2, r3
 8007a2c:	d00e      	beq.n	8007a4c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4a13      	ldr	r2, [pc, #76]	; (8007a80 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d009      	beq.n	8007a4c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a11      	ldr	r2, [pc, #68]	; (8007a84 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d004      	beq.n	8007a4c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4a10      	ldr	r2, [pc, #64]	; (8007a88 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d10c      	bne.n	8007a66 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	2280      	movs	r2, #128	; 0x80
 8007a50:	4393      	bics	r3, r2
 8007a52:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	685b      	ldr	r3, [r3, #4]
 8007a58:	68ba      	ldr	r2, [r7, #8]
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	68ba      	ldr	r2, [r7, #8]
 8007a64:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2239      	movs	r2, #57	; 0x39
 8007a6a:	2101      	movs	r1, #1
 8007a6c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2238      	movs	r2, #56	; 0x38
 8007a72:	2100      	movs	r1, #0
 8007a74:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007a76:	2300      	movs	r3, #0
}
 8007a78:	0018      	movs	r0, r3
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	b004      	add	sp, #16
 8007a7e:	bd80      	pop	{r7, pc}
 8007a80:	40000400 	.word	0x40000400
 8007a84:	40010800 	.word	0x40010800
 8007a88:	40011400 	.word	0x40011400

08007a8c <calloc>:
 8007a8c:	b510      	push	{r4, lr}
 8007a8e:	4b03      	ldr	r3, [pc, #12]	; (8007a9c <calloc+0x10>)
 8007a90:	000a      	movs	r2, r1
 8007a92:	0001      	movs	r1, r0
 8007a94:	6818      	ldr	r0, [r3, #0]
 8007a96:	f000 fa30 	bl	8007efa <_calloc_r>
 8007a9a:	bd10      	pop	{r4, pc}
 8007a9c:	20000018 	.word	0x20000018

08007aa0 <__errno>:
 8007aa0:	4b01      	ldr	r3, [pc, #4]	; (8007aa8 <__errno+0x8>)
 8007aa2:	6818      	ldr	r0, [r3, #0]
 8007aa4:	4770      	bx	lr
 8007aa6:	46c0      	nop			; (mov r8, r8)
 8007aa8:	20000018 	.word	0x20000018

08007aac <__sflush_r>:
 8007aac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007aae:	898b      	ldrh	r3, [r1, #12]
 8007ab0:	0005      	movs	r5, r0
 8007ab2:	000c      	movs	r4, r1
 8007ab4:	071a      	lsls	r2, r3, #28
 8007ab6:	d45f      	bmi.n	8007b78 <__sflush_r+0xcc>
 8007ab8:	684a      	ldr	r2, [r1, #4]
 8007aba:	2a00      	cmp	r2, #0
 8007abc:	dc04      	bgt.n	8007ac8 <__sflush_r+0x1c>
 8007abe:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8007ac0:	2a00      	cmp	r2, #0
 8007ac2:	dc01      	bgt.n	8007ac8 <__sflush_r+0x1c>
 8007ac4:	2000      	movs	r0, #0
 8007ac6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007ac8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8007aca:	2f00      	cmp	r7, #0
 8007acc:	d0fa      	beq.n	8007ac4 <__sflush_r+0x18>
 8007ace:	2200      	movs	r2, #0
 8007ad0:	2180      	movs	r1, #128	; 0x80
 8007ad2:	682e      	ldr	r6, [r5, #0]
 8007ad4:	602a      	str	r2, [r5, #0]
 8007ad6:	001a      	movs	r2, r3
 8007ad8:	0149      	lsls	r1, r1, #5
 8007ada:	400a      	ands	r2, r1
 8007adc:	420b      	tst	r3, r1
 8007ade:	d034      	beq.n	8007b4a <__sflush_r+0x9e>
 8007ae0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007ae2:	89a3      	ldrh	r3, [r4, #12]
 8007ae4:	075b      	lsls	r3, r3, #29
 8007ae6:	d506      	bpl.n	8007af6 <__sflush_r+0x4a>
 8007ae8:	6863      	ldr	r3, [r4, #4]
 8007aea:	1ac0      	subs	r0, r0, r3
 8007aec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d001      	beq.n	8007af6 <__sflush_r+0x4a>
 8007af2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007af4:	1ac0      	subs	r0, r0, r3
 8007af6:	0002      	movs	r2, r0
 8007af8:	6a21      	ldr	r1, [r4, #32]
 8007afa:	2300      	movs	r3, #0
 8007afc:	0028      	movs	r0, r5
 8007afe:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8007b00:	47b8      	blx	r7
 8007b02:	89a1      	ldrh	r1, [r4, #12]
 8007b04:	1c43      	adds	r3, r0, #1
 8007b06:	d106      	bne.n	8007b16 <__sflush_r+0x6a>
 8007b08:	682b      	ldr	r3, [r5, #0]
 8007b0a:	2b1d      	cmp	r3, #29
 8007b0c:	d831      	bhi.n	8007b72 <__sflush_r+0xc6>
 8007b0e:	4a2c      	ldr	r2, [pc, #176]	; (8007bc0 <__sflush_r+0x114>)
 8007b10:	40da      	lsrs	r2, r3
 8007b12:	07d3      	lsls	r3, r2, #31
 8007b14:	d52d      	bpl.n	8007b72 <__sflush_r+0xc6>
 8007b16:	2300      	movs	r3, #0
 8007b18:	6063      	str	r3, [r4, #4]
 8007b1a:	6923      	ldr	r3, [r4, #16]
 8007b1c:	6023      	str	r3, [r4, #0]
 8007b1e:	04cb      	lsls	r3, r1, #19
 8007b20:	d505      	bpl.n	8007b2e <__sflush_r+0x82>
 8007b22:	1c43      	adds	r3, r0, #1
 8007b24:	d102      	bne.n	8007b2c <__sflush_r+0x80>
 8007b26:	682b      	ldr	r3, [r5, #0]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d100      	bne.n	8007b2e <__sflush_r+0x82>
 8007b2c:	6560      	str	r0, [r4, #84]	; 0x54
 8007b2e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b30:	602e      	str	r6, [r5, #0]
 8007b32:	2900      	cmp	r1, #0
 8007b34:	d0c6      	beq.n	8007ac4 <__sflush_r+0x18>
 8007b36:	0023      	movs	r3, r4
 8007b38:	3344      	adds	r3, #68	; 0x44
 8007b3a:	4299      	cmp	r1, r3
 8007b3c:	d002      	beq.n	8007b44 <__sflush_r+0x98>
 8007b3e:	0028      	movs	r0, r5
 8007b40:	f000 f9ea 	bl	8007f18 <_free_r>
 8007b44:	2000      	movs	r0, #0
 8007b46:	6360      	str	r0, [r4, #52]	; 0x34
 8007b48:	e7bd      	b.n	8007ac6 <__sflush_r+0x1a>
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	0028      	movs	r0, r5
 8007b4e:	6a21      	ldr	r1, [r4, #32]
 8007b50:	47b8      	blx	r7
 8007b52:	1c43      	adds	r3, r0, #1
 8007b54:	d1c5      	bne.n	8007ae2 <__sflush_r+0x36>
 8007b56:	682b      	ldr	r3, [r5, #0]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d0c2      	beq.n	8007ae2 <__sflush_r+0x36>
 8007b5c:	2b1d      	cmp	r3, #29
 8007b5e:	d001      	beq.n	8007b64 <__sflush_r+0xb8>
 8007b60:	2b16      	cmp	r3, #22
 8007b62:	d101      	bne.n	8007b68 <__sflush_r+0xbc>
 8007b64:	602e      	str	r6, [r5, #0]
 8007b66:	e7ad      	b.n	8007ac4 <__sflush_r+0x18>
 8007b68:	2340      	movs	r3, #64	; 0x40
 8007b6a:	89a2      	ldrh	r2, [r4, #12]
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	81a3      	strh	r3, [r4, #12]
 8007b70:	e7a9      	b.n	8007ac6 <__sflush_r+0x1a>
 8007b72:	2340      	movs	r3, #64	; 0x40
 8007b74:	430b      	orrs	r3, r1
 8007b76:	e7fa      	b.n	8007b6e <__sflush_r+0xc2>
 8007b78:	690f      	ldr	r7, [r1, #16]
 8007b7a:	2f00      	cmp	r7, #0
 8007b7c:	d0a2      	beq.n	8007ac4 <__sflush_r+0x18>
 8007b7e:	680a      	ldr	r2, [r1, #0]
 8007b80:	600f      	str	r7, [r1, #0]
 8007b82:	1bd2      	subs	r2, r2, r7
 8007b84:	9201      	str	r2, [sp, #4]
 8007b86:	2200      	movs	r2, #0
 8007b88:	079b      	lsls	r3, r3, #30
 8007b8a:	d100      	bne.n	8007b8e <__sflush_r+0xe2>
 8007b8c:	694a      	ldr	r2, [r1, #20]
 8007b8e:	60a2      	str	r2, [r4, #8]
 8007b90:	9b01      	ldr	r3, [sp, #4]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	dc00      	bgt.n	8007b98 <__sflush_r+0xec>
 8007b96:	e795      	b.n	8007ac4 <__sflush_r+0x18>
 8007b98:	003a      	movs	r2, r7
 8007b9a:	0028      	movs	r0, r5
 8007b9c:	9b01      	ldr	r3, [sp, #4]
 8007b9e:	6a21      	ldr	r1, [r4, #32]
 8007ba0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007ba2:	47b0      	blx	r6
 8007ba4:	2800      	cmp	r0, #0
 8007ba6:	dc06      	bgt.n	8007bb6 <__sflush_r+0x10a>
 8007ba8:	2340      	movs	r3, #64	; 0x40
 8007baa:	2001      	movs	r0, #1
 8007bac:	89a2      	ldrh	r2, [r4, #12]
 8007bae:	4240      	negs	r0, r0
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	81a3      	strh	r3, [r4, #12]
 8007bb4:	e787      	b.n	8007ac6 <__sflush_r+0x1a>
 8007bb6:	9b01      	ldr	r3, [sp, #4]
 8007bb8:	183f      	adds	r7, r7, r0
 8007bba:	1a1b      	subs	r3, r3, r0
 8007bbc:	9301      	str	r3, [sp, #4]
 8007bbe:	e7e7      	b.n	8007b90 <__sflush_r+0xe4>
 8007bc0:	20400001 	.word	0x20400001

08007bc4 <_fflush_r>:
 8007bc4:	690b      	ldr	r3, [r1, #16]
 8007bc6:	b570      	push	{r4, r5, r6, lr}
 8007bc8:	0005      	movs	r5, r0
 8007bca:	000c      	movs	r4, r1
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d102      	bne.n	8007bd6 <_fflush_r+0x12>
 8007bd0:	2500      	movs	r5, #0
 8007bd2:	0028      	movs	r0, r5
 8007bd4:	bd70      	pop	{r4, r5, r6, pc}
 8007bd6:	2800      	cmp	r0, #0
 8007bd8:	d004      	beq.n	8007be4 <_fflush_r+0x20>
 8007bda:	6983      	ldr	r3, [r0, #24]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d101      	bne.n	8007be4 <_fflush_r+0x20>
 8007be0:	f000 f8a8 	bl	8007d34 <__sinit>
 8007be4:	4b14      	ldr	r3, [pc, #80]	; (8007c38 <_fflush_r+0x74>)
 8007be6:	429c      	cmp	r4, r3
 8007be8:	d11b      	bne.n	8007c22 <_fflush_r+0x5e>
 8007bea:	686c      	ldr	r4, [r5, #4]
 8007bec:	220c      	movs	r2, #12
 8007bee:	5ea3      	ldrsh	r3, [r4, r2]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d0ed      	beq.n	8007bd0 <_fflush_r+0xc>
 8007bf4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007bf6:	07d2      	lsls	r2, r2, #31
 8007bf8:	d404      	bmi.n	8007c04 <_fflush_r+0x40>
 8007bfa:	059b      	lsls	r3, r3, #22
 8007bfc:	d402      	bmi.n	8007c04 <_fflush_r+0x40>
 8007bfe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c00:	f000 f95d 	bl	8007ebe <__retarget_lock_acquire_recursive>
 8007c04:	0028      	movs	r0, r5
 8007c06:	0021      	movs	r1, r4
 8007c08:	f7ff ff50 	bl	8007aac <__sflush_r>
 8007c0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c0e:	0005      	movs	r5, r0
 8007c10:	07db      	lsls	r3, r3, #31
 8007c12:	d4de      	bmi.n	8007bd2 <_fflush_r+0xe>
 8007c14:	89a3      	ldrh	r3, [r4, #12]
 8007c16:	059b      	lsls	r3, r3, #22
 8007c18:	d4db      	bmi.n	8007bd2 <_fflush_r+0xe>
 8007c1a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c1c:	f000 f950 	bl	8007ec0 <__retarget_lock_release_recursive>
 8007c20:	e7d7      	b.n	8007bd2 <_fflush_r+0xe>
 8007c22:	4b06      	ldr	r3, [pc, #24]	; (8007c3c <_fflush_r+0x78>)
 8007c24:	429c      	cmp	r4, r3
 8007c26:	d101      	bne.n	8007c2c <_fflush_r+0x68>
 8007c28:	68ac      	ldr	r4, [r5, #8]
 8007c2a:	e7df      	b.n	8007bec <_fflush_r+0x28>
 8007c2c:	4b04      	ldr	r3, [pc, #16]	; (8007c40 <_fflush_r+0x7c>)
 8007c2e:	429c      	cmp	r4, r3
 8007c30:	d1dc      	bne.n	8007bec <_fflush_r+0x28>
 8007c32:	68ec      	ldr	r4, [r5, #12]
 8007c34:	e7da      	b.n	8007bec <_fflush_r+0x28>
 8007c36:	46c0      	nop			; (mov r8, r8)
 8007c38:	0800f3c8 	.word	0x0800f3c8
 8007c3c:	0800f3e8 	.word	0x0800f3e8
 8007c40:	0800f3a8 	.word	0x0800f3a8

08007c44 <fflush>:
 8007c44:	0001      	movs	r1, r0
 8007c46:	b510      	push	{r4, lr}
 8007c48:	2800      	cmp	r0, #0
 8007c4a:	d105      	bne.n	8007c58 <fflush+0x14>
 8007c4c:	4b05      	ldr	r3, [pc, #20]	; (8007c64 <fflush+0x20>)
 8007c4e:	4906      	ldr	r1, [pc, #24]	; (8007c68 <fflush+0x24>)
 8007c50:	6818      	ldr	r0, [r3, #0]
 8007c52:	f000 f8ef 	bl	8007e34 <_fwalk_reent>
 8007c56:	bd10      	pop	{r4, pc}
 8007c58:	4b04      	ldr	r3, [pc, #16]	; (8007c6c <fflush+0x28>)
 8007c5a:	6818      	ldr	r0, [r3, #0]
 8007c5c:	f7ff ffb2 	bl	8007bc4 <_fflush_r>
 8007c60:	e7f9      	b.n	8007c56 <fflush+0x12>
 8007c62:	46c0      	nop			; (mov r8, r8)
 8007c64:	0800f408 	.word	0x0800f408
 8007c68:	08007bc5 	.word	0x08007bc5
 8007c6c:	20000018 	.word	0x20000018

08007c70 <std>:
 8007c70:	2300      	movs	r3, #0
 8007c72:	b510      	push	{r4, lr}
 8007c74:	0004      	movs	r4, r0
 8007c76:	6003      	str	r3, [r0, #0]
 8007c78:	6043      	str	r3, [r0, #4]
 8007c7a:	6083      	str	r3, [r0, #8]
 8007c7c:	8181      	strh	r1, [r0, #12]
 8007c7e:	6643      	str	r3, [r0, #100]	; 0x64
 8007c80:	0019      	movs	r1, r3
 8007c82:	81c2      	strh	r2, [r0, #14]
 8007c84:	6103      	str	r3, [r0, #16]
 8007c86:	6143      	str	r3, [r0, #20]
 8007c88:	6183      	str	r3, [r0, #24]
 8007c8a:	2208      	movs	r2, #8
 8007c8c:	305c      	adds	r0, #92	; 0x5c
 8007c8e:	f000 f92c 	bl	8007eea <memset>
 8007c92:	4b05      	ldr	r3, [pc, #20]	; (8007ca8 <std+0x38>)
 8007c94:	6263      	str	r3, [r4, #36]	; 0x24
 8007c96:	4b05      	ldr	r3, [pc, #20]	; (8007cac <std+0x3c>)
 8007c98:	6224      	str	r4, [r4, #32]
 8007c9a:	62a3      	str	r3, [r4, #40]	; 0x28
 8007c9c:	4b04      	ldr	r3, [pc, #16]	; (8007cb0 <std+0x40>)
 8007c9e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007ca0:	4b04      	ldr	r3, [pc, #16]	; (8007cb4 <std+0x44>)
 8007ca2:	6323      	str	r3, [r4, #48]	; 0x30
 8007ca4:	bd10      	pop	{r4, pc}
 8007ca6:	46c0      	nop			; (mov r8, r8)
 8007ca8:	080081c5 	.word	0x080081c5
 8007cac:	080081ed 	.word	0x080081ed
 8007cb0:	08008225 	.word	0x08008225
 8007cb4:	08008251 	.word	0x08008251

08007cb8 <_cleanup_r>:
 8007cb8:	b510      	push	{r4, lr}
 8007cba:	4902      	ldr	r1, [pc, #8]	; (8007cc4 <_cleanup_r+0xc>)
 8007cbc:	f000 f8ba 	bl	8007e34 <_fwalk_reent>
 8007cc0:	bd10      	pop	{r4, pc}
 8007cc2:	46c0      	nop			; (mov r8, r8)
 8007cc4:	08007bc5 	.word	0x08007bc5

08007cc8 <__sfmoreglue>:
 8007cc8:	b570      	push	{r4, r5, r6, lr}
 8007cca:	2568      	movs	r5, #104	; 0x68
 8007ccc:	1e4a      	subs	r2, r1, #1
 8007cce:	4355      	muls	r5, r2
 8007cd0:	000e      	movs	r6, r1
 8007cd2:	0029      	movs	r1, r5
 8007cd4:	3174      	adds	r1, #116	; 0x74
 8007cd6:	f000 f969 	bl	8007fac <_malloc_r>
 8007cda:	1e04      	subs	r4, r0, #0
 8007cdc:	d008      	beq.n	8007cf0 <__sfmoreglue+0x28>
 8007cde:	2100      	movs	r1, #0
 8007ce0:	002a      	movs	r2, r5
 8007ce2:	6001      	str	r1, [r0, #0]
 8007ce4:	6046      	str	r6, [r0, #4]
 8007ce6:	300c      	adds	r0, #12
 8007ce8:	60a0      	str	r0, [r4, #8]
 8007cea:	3268      	adds	r2, #104	; 0x68
 8007cec:	f000 f8fd 	bl	8007eea <memset>
 8007cf0:	0020      	movs	r0, r4
 8007cf2:	bd70      	pop	{r4, r5, r6, pc}

08007cf4 <__sfp_lock_acquire>:
 8007cf4:	b510      	push	{r4, lr}
 8007cf6:	4802      	ldr	r0, [pc, #8]	; (8007d00 <__sfp_lock_acquire+0xc>)
 8007cf8:	f000 f8e1 	bl	8007ebe <__retarget_lock_acquire_recursive>
 8007cfc:	bd10      	pop	{r4, pc}
 8007cfe:	46c0      	nop			; (mov r8, r8)
 8007d00:	200003ec 	.word	0x200003ec

08007d04 <__sfp_lock_release>:
 8007d04:	b510      	push	{r4, lr}
 8007d06:	4802      	ldr	r0, [pc, #8]	; (8007d10 <__sfp_lock_release+0xc>)
 8007d08:	f000 f8da 	bl	8007ec0 <__retarget_lock_release_recursive>
 8007d0c:	bd10      	pop	{r4, pc}
 8007d0e:	46c0      	nop			; (mov r8, r8)
 8007d10:	200003ec 	.word	0x200003ec

08007d14 <__sinit_lock_acquire>:
 8007d14:	b510      	push	{r4, lr}
 8007d16:	4802      	ldr	r0, [pc, #8]	; (8007d20 <__sinit_lock_acquire+0xc>)
 8007d18:	f000 f8d1 	bl	8007ebe <__retarget_lock_acquire_recursive>
 8007d1c:	bd10      	pop	{r4, pc}
 8007d1e:	46c0      	nop			; (mov r8, r8)
 8007d20:	200003e7 	.word	0x200003e7

08007d24 <__sinit_lock_release>:
 8007d24:	b510      	push	{r4, lr}
 8007d26:	4802      	ldr	r0, [pc, #8]	; (8007d30 <__sinit_lock_release+0xc>)
 8007d28:	f000 f8ca 	bl	8007ec0 <__retarget_lock_release_recursive>
 8007d2c:	bd10      	pop	{r4, pc}
 8007d2e:	46c0      	nop			; (mov r8, r8)
 8007d30:	200003e7 	.word	0x200003e7

08007d34 <__sinit>:
 8007d34:	b513      	push	{r0, r1, r4, lr}
 8007d36:	0004      	movs	r4, r0
 8007d38:	f7ff ffec 	bl	8007d14 <__sinit_lock_acquire>
 8007d3c:	69a3      	ldr	r3, [r4, #24]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d002      	beq.n	8007d48 <__sinit+0x14>
 8007d42:	f7ff ffef 	bl	8007d24 <__sinit_lock_release>
 8007d46:	bd13      	pop	{r0, r1, r4, pc}
 8007d48:	64a3      	str	r3, [r4, #72]	; 0x48
 8007d4a:	64e3      	str	r3, [r4, #76]	; 0x4c
 8007d4c:	6523      	str	r3, [r4, #80]	; 0x50
 8007d4e:	4b13      	ldr	r3, [pc, #76]	; (8007d9c <__sinit+0x68>)
 8007d50:	4a13      	ldr	r2, [pc, #76]	; (8007da0 <__sinit+0x6c>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	62a2      	str	r2, [r4, #40]	; 0x28
 8007d56:	9301      	str	r3, [sp, #4]
 8007d58:	42a3      	cmp	r3, r4
 8007d5a:	d101      	bne.n	8007d60 <__sinit+0x2c>
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	61a3      	str	r3, [r4, #24]
 8007d60:	0020      	movs	r0, r4
 8007d62:	f000 f81f 	bl	8007da4 <__sfp>
 8007d66:	6060      	str	r0, [r4, #4]
 8007d68:	0020      	movs	r0, r4
 8007d6a:	f000 f81b 	bl	8007da4 <__sfp>
 8007d6e:	60a0      	str	r0, [r4, #8]
 8007d70:	0020      	movs	r0, r4
 8007d72:	f000 f817 	bl	8007da4 <__sfp>
 8007d76:	2200      	movs	r2, #0
 8007d78:	2104      	movs	r1, #4
 8007d7a:	60e0      	str	r0, [r4, #12]
 8007d7c:	6860      	ldr	r0, [r4, #4]
 8007d7e:	f7ff ff77 	bl	8007c70 <std>
 8007d82:	2201      	movs	r2, #1
 8007d84:	2109      	movs	r1, #9
 8007d86:	68a0      	ldr	r0, [r4, #8]
 8007d88:	f7ff ff72 	bl	8007c70 <std>
 8007d8c:	2202      	movs	r2, #2
 8007d8e:	2112      	movs	r1, #18
 8007d90:	68e0      	ldr	r0, [r4, #12]
 8007d92:	f7ff ff6d 	bl	8007c70 <std>
 8007d96:	2301      	movs	r3, #1
 8007d98:	61a3      	str	r3, [r4, #24]
 8007d9a:	e7d2      	b.n	8007d42 <__sinit+0xe>
 8007d9c:	0800f408 	.word	0x0800f408
 8007da0:	08007cb9 	.word	0x08007cb9

08007da4 <__sfp>:
 8007da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007da6:	0007      	movs	r7, r0
 8007da8:	f7ff ffa4 	bl	8007cf4 <__sfp_lock_acquire>
 8007dac:	4b1f      	ldr	r3, [pc, #124]	; (8007e2c <__sfp+0x88>)
 8007dae:	681e      	ldr	r6, [r3, #0]
 8007db0:	69b3      	ldr	r3, [r6, #24]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d102      	bne.n	8007dbc <__sfp+0x18>
 8007db6:	0030      	movs	r0, r6
 8007db8:	f7ff ffbc 	bl	8007d34 <__sinit>
 8007dbc:	3648      	adds	r6, #72	; 0x48
 8007dbe:	68b4      	ldr	r4, [r6, #8]
 8007dc0:	6873      	ldr	r3, [r6, #4]
 8007dc2:	3b01      	subs	r3, #1
 8007dc4:	d504      	bpl.n	8007dd0 <__sfp+0x2c>
 8007dc6:	6833      	ldr	r3, [r6, #0]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d022      	beq.n	8007e12 <__sfp+0x6e>
 8007dcc:	6836      	ldr	r6, [r6, #0]
 8007dce:	e7f6      	b.n	8007dbe <__sfp+0x1a>
 8007dd0:	220c      	movs	r2, #12
 8007dd2:	5ea5      	ldrsh	r5, [r4, r2]
 8007dd4:	2d00      	cmp	r5, #0
 8007dd6:	d11a      	bne.n	8007e0e <__sfp+0x6a>
 8007dd8:	0020      	movs	r0, r4
 8007dda:	4b15      	ldr	r3, [pc, #84]	; (8007e30 <__sfp+0x8c>)
 8007ddc:	3058      	adds	r0, #88	; 0x58
 8007dde:	60e3      	str	r3, [r4, #12]
 8007de0:	6665      	str	r5, [r4, #100]	; 0x64
 8007de2:	f000 f86b 	bl	8007ebc <__retarget_lock_init_recursive>
 8007de6:	f7ff ff8d 	bl	8007d04 <__sfp_lock_release>
 8007dea:	0020      	movs	r0, r4
 8007dec:	2208      	movs	r2, #8
 8007dee:	0029      	movs	r1, r5
 8007df0:	6025      	str	r5, [r4, #0]
 8007df2:	60a5      	str	r5, [r4, #8]
 8007df4:	6065      	str	r5, [r4, #4]
 8007df6:	6125      	str	r5, [r4, #16]
 8007df8:	6165      	str	r5, [r4, #20]
 8007dfa:	61a5      	str	r5, [r4, #24]
 8007dfc:	305c      	adds	r0, #92	; 0x5c
 8007dfe:	f000 f874 	bl	8007eea <memset>
 8007e02:	6365      	str	r5, [r4, #52]	; 0x34
 8007e04:	63a5      	str	r5, [r4, #56]	; 0x38
 8007e06:	64a5      	str	r5, [r4, #72]	; 0x48
 8007e08:	64e5      	str	r5, [r4, #76]	; 0x4c
 8007e0a:	0020      	movs	r0, r4
 8007e0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e0e:	3468      	adds	r4, #104	; 0x68
 8007e10:	e7d7      	b.n	8007dc2 <__sfp+0x1e>
 8007e12:	2104      	movs	r1, #4
 8007e14:	0038      	movs	r0, r7
 8007e16:	f7ff ff57 	bl	8007cc8 <__sfmoreglue>
 8007e1a:	1e04      	subs	r4, r0, #0
 8007e1c:	6030      	str	r0, [r6, #0]
 8007e1e:	d1d5      	bne.n	8007dcc <__sfp+0x28>
 8007e20:	f7ff ff70 	bl	8007d04 <__sfp_lock_release>
 8007e24:	230c      	movs	r3, #12
 8007e26:	603b      	str	r3, [r7, #0]
 8007e28:	e7ef      	b.n	8007e0a <__sfp+0x66>
 8007e2a:	46c0      	nop			; (mov r8, r8)
 8007e2c:	0800f408 	.word	0x0800f408
 8007e30:	ffff0001 	.word	0xffff0001

08007e34 <_fwalk_reent>:
 8007e34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e36:	0004      	movs	r4, r0
 8007e38:	0006      	movs	r6, r0
 8007e3a:	2700      	movs	r7, #0
 8007e3c:	9101      	str	r1, [sp, #4]
 8007e3e:	3448      	adds	r4, #72	; 0x48
 8007e40:	6863      	ldr	r3, [r4, #4]
 8007e42:	68a5      	ldr	r5, [r4, #8]
 8007e44:	9300      	str	r3, [sp, #0]
 8007e46:	9b00      	ldr	r3, [sp, #0]
 8007e48:	3b01      	subs	r3, #1
 8007e4a:	9300      	str	r3, [sp, #0]
 8007e4c:	d504      	bpl.n	8007e58 <_fwalk_reent+0x24>
 8007e4e:	6824      	ldr	r4, [r4, #0]
 8007e50:	2c00      	cmp	r4, #0
 8007e52:	d1f5      	bne.n	8007e40 <_fwalk_reent+0xc>
 8007e54:	0038      	movs	r0, r7
 8007e56:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007e58:	89ab      	ldrh	r3, [r5, #12]
 8007e5a:	2b01      	cmp	r3, #1
 8007e5c:	d908      	bls.n	8007e70 <_fwalk_reent+0x3c>
 8007e5e:	220e      	movs	r2, #14
 8007e60:	5eab      	ldrsh	r3, [r5, r2]
 8007e62:	3301      	adds	r3, #1
 8007e64:	d004      	beq.n	8007e70 <_fwalk_reent+0x3c>
 8007e66:	0029      	movs	r1, r5
 8007e68:	0030      	movs	r0, r6
 8007e6a:	9b01      	ldr	r3, [sp, #4]
 8007e6c:	4798      	blx	r3
 8007e6e:	4307      	orrs	r7, r0
 8007e70:	3568      	adds	r5, #104	; 0x68
 8007e72:	e7e8      	b.n	8007e46 <_fwalk_reent+0x12>

08007e74 <__libc_init_array>:
 8007e74:	b570      	push	{r4, r5, r6, lr}
 8007e76:	2600      	movs	r6, #0
 8007e78:	4d0c      	ldr	r5, [pc, #48]	; (8007eac <__libc_init_array+0x38>)
 8007e7a:	4c0d      	ldr	r4, [pc, #52]	; (8007eb0 <__libc_init_array+0x3c>)
 8007e7c:	1b64      	subs	r4, r4, r5
 8007e7e:	10a4      	asrs	r4, r4, #2
 8007e80:	42a6      	cmp	r6, r4
 8007e82:	d109      	bne.n	8007e98 <__libc_init_array+0x24>
 8007e84:	2600      	movs	r6, #0
 8007e86:	f001 f85b 	bl	8008f40 <_init>
 8007e8a:	4d0a      	ldr	r5, [pc, #40]	; (8007eb4 <__libc_init_array+0x40>)
 8007e8c:	4c0a      	ldr	r4, [pc, #40]	; (8007eb8 <__libc_init_array+0x44>)
 8007e8e:	1b64      	subs	r4, r4, r5
 8007e90:	10a4      	asrs	r4, r4, #2
 8007e92:	42a6      	cmp	r6, r4
 8007e94:	d105      	bne.n	8007ea2 <__libc_init_array+0x2e>
 8007e96:	bd70      	pop	{r4, r5, r6, pc}
 8007e98:	00b3      	lsls	r3, r6, #2
 8007e9a:	58eb      	ldr	r3, [r5, r3]
 8007e9c:	4798      	blx	r3
 8007e9e:	3601      	adds	r6, #1
 8007ea0:	e7ee      	b.n	8007e80 <__libc_init_array+0xc>
 8007ea2:	00b3      	lsls	r3, r6, #2
 8007ea4:	58eb      	ldr	r3, [r5, r3]
 8007ea6:	4798      	blx	r3
 8007ea8:	3601      	adds	r6, #1
 8007eaa:	e7f2      	b.n	8007e92 <__libc_init_array+0x1e>
 8007eac:	0800f448 	.word	0x0800f448
 8007eb0:	0800f448 	.word	0x0800f448
 8007eb4:	0800f448 	.word	0x0800f448
 8007eb8:	0800f44c 	.word	0x0800f44c

08007ebc <__retarget_lock_init_recursive>:
 8007ebc:	4770      	bx	lr

08007ebe <__retarget_lock_acquire_recursive>:
 8007ebe:	4770      	bx	lr

08007ec0 <__retarget_lock_release_recursive>:
 8007ec0:	4770      	bx	lr
	...

08007ec4 <free>:
 8007ec4:	b510      	push	{r4, lr}
 8007ec6:	4b03      	ldr	r3, [pc, #12]	; (8007ed4 <free+0x10>)
 8007ec8:	0001      	movs	r1, r0
 8007eca:	6818      	ldr	r0, [r3, #0]
 8007ecc:	f000 f824 	bl	8007f18 <_free_r>
 8007ed0:	bd10      	pop	{r4, pc}
 8007ed2:	46c0      	nop			; (mov r8, r8)
 8007ed4:	20000018 	.word	0x20000018

08007ed8 <memcpy>:
 8007ed8:	2300      	movs	r3, #0
 8007eda:	b510      	push	{r4, lr}
 8007edc:	429a      	cmp	r2, r3
 8007ede:	d100      	bne.n	8007ee2 <memcpy+0xa>
 8007ee0:	bd10      	pop	{r4, pc}
 8007ee2:	5ccc      	ldrb	r4, [r1, r3]
 8007ee4:	54c4      	strb	r4, [r0, r3]
 8007ee6:	3301      	adds	r3, #1
 8007ee8:	e7f8      	b.n	8007edc <memcpy+0x4>

08007eea <memset>:
 8007eea:	0003      	movs	r3, r0
 8007eec:	1882      	adds	r2, r0, r2
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d100      	bne.n	8007ef4 <memset+0xa>
 8007ef2:	4770      	bx	lr
 8007ef4:	7019      	strb	r1, [r3, #0]
 8007ef6:	3301      	adds	r3, #1
 8007ef8:	e7f9      	b.n	8007eee <memset+0x4>

08007efa <_calloc_r>:
 8007efa:	434a      	muls	r2, r1
 8007efc:	b570      	push	{r4, r5, r6, lr}
 8007efe:	0011      	movs	r1, r2
 8007f00:	0015      	movs	r5, r2
 8007f02:	f000 f853 	bl	8007fac <_malloc_r>
 8007f06:	1e04      	subs	r4, r0, #0
 8007f08:	d003      	beq.n	8007f12 <_calloc_r+0x18>
 8007f0a:	002a      	movs	r2, r5
 8007f0c:	2100      	movs	r1, #0
 8007f0e:	f7ff ffec 	bl	8007eea <memset>
 8007f12:	0020      	movs	r0, r4
 8007f14:	bd70      	pop	{r4, r5, r6, pc}
	...

08007f18 <_free_r>:
 8007f18:	b570      	push	{r4, r5, r6, lr}
 8007f1a:	0005      	movs	r5, r0
 8007f1c:	2900      	cmp	r1, #0
 8007f1e:	d010      	beq.n	8007f42 <_free_r+0x2a>
 8007f20:	1f0c      	subs	r4, r1, #4
 8007f22:	6823      	ldr	r3, [r4, #0]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	da00      	bge.n	8007f2a <_free_r+0x12>
 8007f28:	18e4      	adds	r4, r4, r3
 8007f2a:	0028      	movs	r0, r5
 8007f2c:	f000 fb2e 	bl	800858c <__malloc_lock>
 8007f30:	4a1d      	ldr	r2, [pc, #116]	; (8007fa8 <_free_r+0x90>)
 8007f32:	6813      	ldr	r3, [r2, #0]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d105      	bne.n	8007f44 <_free_r+0x2c>
 8007f38:	6063      	str	r3, [r4, #4]
 8007f3a:	6014      	str	r4, [r2, #0]
 8007f3c:	0028      	movs	r0, r5
 8007f3e:	f000 fb2d 	bl	800859c <__malloc_unlock>
 8007f42:	bd70      	pop	{r4, r5, r6, pc}
 8007f44:	42a3      	cmp	r3, r4
 8007f46:	d908      	bls.n	8007f5a <_free_r+0x42>
 8007f48:	6821      	ldr	r1, [r4, #0]
 8007f4a:	1860      	adds	r0, r4, r1
 8007f4c:	4283      	cmp	r3, r0
 8007f4e:	d1f3      	bne.n	8007f38 <_free_r+0x20>
 8007f50:	6818      	ldr	r0, [r3, #0]
 8007f52:	685b      	ldr	r3, [r3, #4]
 8007f54:	1841      	adds	r1, r0, r1
 8007f56:	6021      	str	r1, [r4, #0]
 8007f58:	e7ee      	b.n	8007f38 <_free_r+0x20>
 8007f5a:	001a      	movs	r2, r3
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d001      	beq.n	8007f66 <_free_r+0x4e>
 8007f62:	42a3      	cmp	r3, r4
 8007f64:	d9f9      	bls.n	8007f5a <_free_r+0x42>
 8007f66:	6811      	ldr	r1, [r2, #0]
 8007f68:	1850      	adds	r0, r2, r1
 8007f6a:	42a0      	cmp	r0, r4
 8007f6c:	d10b      	bne.n	8007f86 <_free_r+0x6e>
 8007f6e:	6820      	ldr	r0, [r4, #0]
 8007f70:	1809      	adds	r1, r1, r0
 8007f72:	1850      	adds	r0, r2, r1
 8007f74:	6011      	str	r1, [r2, #0]
 8007f76:	4283      	cmp	r3, r0
 8007f78:	d1e0      	bne.n	8007f3c <_free_r+0x24>
 8007f7a:	6818      	ldr	r0, [r3, #0]
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	1841      	adds	r1, r0, r1
 8007f80:	6011      	str	r1, [r2, #0]
 8007f82:	6053      	str	r3, [r2, #4]
 8007f84:	e7da      	b.n	8007f3c <_free_r+0x24>
 8007f86:	42a0      	cmp	r0, r4
 8007f88:	d902      	bls.n	8007f90 <_free_r+0x78>
 8007f8a:	230c      	movs	r3, #12
 8007f8c:	602b      	str	r3, [r5, #0]
 8007f8e:	e7d5      	b.n	8007f3c <_free_r+0x24>
 8007f90:	6821      	ldr	r1, [r4, #0]
 8007f92:	1860      	adds	r0, r4, r1
 8007f94:	4283      	cmp	r3, r0
 8007f96:	d103      	bne.n	8007fa0 <_free_r+0x88>
 8007f98:	6818      	ldr	r0, [r3, #0]
 8007f9a:	685b      	ldr	r3, [r3, #4]
 8007f9c:	1841      	adds	r1, r0, r1
 8007f9e:	6021      	str	r1, [r4, #0]
 8007fa0:	6063      	str	r3, [r4, #4]
 8007fa2:	6054      	str	r4, [r2, #4]
 8007fa4:	e7ca      	b.n	8007f3c <_free_r+0x24>
 8007fa6:	46c0      	nop			; (mov r8, r8)
 8007fa8:	20000140 	.word	0x20000140

08007fac <_malloc_r>:
 8007fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fae:	2303      	movs	r3, #3
 8007fb0:	1ccd      	adds	r5, r1, #3
 8007fb2:	439d      	bics	r5, r3
 8007fb4:	3508      	adds	r5, #8
 8007fb6:	0006      	movs	r6, r0
 8007fb8:	2d0c      	cmp	r5, #12
 8007fba:	d21f      	bcs.n	8007ffc <_malloc_r+0x50>
 8007fbc:	250c      	movs	r5, #12
 8007fbe:	42a9      	cmp	r1, r5
 8007fc0:	d81e      	bhi.n	8008000 <_malloc_r+0x54>
 8007fc2:	0030      	movs	r0, r6
 8007fc4:	f000 fae2 	bl	800858c <__malloc_lock>
 8007fc8:	4925      	ldr	r1, [pc, #148]	; (8008060 <_malloc_r+0xb4>)
 8007fca:	680a      	ldr	r2, [r1, #0]
 8007fcc:	0014      	movs	r4, r2
 8007fce:	2c00      	cmp	r4, #0
 8007fd0:	d11a      	bne.n	8008008 <_malloc_r+0x5c>
 8007fd2:	4f24      	ldr	r7, [pc, #144]	; (8008064 <_malloc_r+0xb8>)
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d104      	bne.n	8007fe4 <_malloc_r+0x38>
 8007fda:	0021      	movs	r1, r4
 8007fdc:	0030      	movs	r0, r6
 8007fde:	f000 f8bf 	bl	8008160 <_sbrk_r>
 8007fe2:	6038      	str	r0, [r7, #0]
 8007fe4:	0029      	movs	r1, r5
 8007fe6:	0030      	movs	r0, r6
 8007fe8:	f000 f8ba 	bl	8008160 <_sbrk_r>
 8007fec:	1c43      	adds	r3, r0, #1
 8007fee:	d12b      	bne.n	8008048 <_malloc_r+0x9c>
 8007ff0:	230c      	movs	r3, #12
 8007ff2:	0030      	movs	r0, r6
 8007ff4:	6033      	str	r3, [r6, #0]
 8007ff6:	f000 fad1 	bl	800859c <__malloc_unlock>
 8007ffa:	e003      	b.n	8008004 <_malloc_r+0x58>
 8007ffc:	2d00      	cmp	r5, #0
 8007ffe:	dade      	bge.n	8007fbe <_malloc_r+0x12>
 8008000:	230c      	movs	r3, #12
 8008002:	6033      	str	r3, [r6, #0]
 8008004:	2000      	movs	r0, #0
 8008006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008008:	6823      	ldr	r3, [r4, #0]
 800800a:	1b5b      	subs	r3, r3, r5
 800800c:	d419      	bmi.n	8008042 <_malloc_r+0x96>
 800800e:	2b0b      	cmp	r3, #11
 8008010:	d903      	bls.n	800801a <_malloc_r+0x6e>
 8008012:	6023      	str	r3, [r4, #0]
 8008014:	18e4      	adds	r4, r4, r3
 8008016:	6025      	str	r5, [r4, #0]
 8008018:	e003      	b.n	8008022 <_malloc_r+0x76>
 800801a:	6863      	ldr	r3, [r4, #4]
 800801c:	42a2      	cmp	r2, r4
 800801e:	d10e      	bne.n	800803e <_malloc_r+0x92>
 8008020:	600b      	str	r3, [r1, #0]
 8008022:	0030      	movs	r0, r6
 8008024:	f000 faba 	bl	800859c <__malloc_unlock>
 8008028:	0020      	movs	r0, r4
 800802a:	2207      	movs	r2, #7
 800802c:	300b      	adds	r0, #11
 800802e:	1d23      	adds	r3, r4, #4
 8008030:	4390      	bics	r0, r2
 8008032:	1ac2      	subs	r2, r0, r3
 8008034:	4298      	cmp	r0, r3
 8008036:	d0e6      	beq.n	8008006 <_malloc_r+0x5a>
 8008038:	1a1b      	subs	r3, r3, r0
 800803a:	50a3      	str	r3, [r4, r2]
 800803c:	e7e3      	b.n	8008006 <_malloc_r+0x5a>
 800803e:	6053      	str	r3, [r2, #4]
 8008040:	e7ef      	b.n	8008022 <_malloc_r+0x76>
 8008042:	0022      	movs	r2, r4
 8008044:	6864      	ldr	r4, [r4, #4]
 8008046:	e7c2      	b.n	8007fce <_malloc_r+0x22>
 8008048:	2303      	movs	r3, #3
 800804a:	1cc4      	adds	r4, r0, #3
 800804c:	439c      	bics	r4, r3
 800804e:	42a0      	cmp	r0, r4
 8008050:	d0e1      	beq.n	8008016 <_malloc_r+0x6a>
 8008052:	1a21      	subs	r1, r4, r0
 8008054:	0030      	movs	r0, r6
 8008056:	f000 f883 	bl	8008160 <_sbrk_r>
 800805a:	1c43      	adds	r3, r0, #1
 800805c:	d1db      	bne.n	8008016 <_malloc_r+0x6a>
 800805e:	e7c7      	b.n	8007ff0 <_malloc_r+0x44>
 8008060:	20000140 	.word	0x20000140
 8008064:	20000144 	.word	0x20000144

08008068 <_puts_r>:
 8008068:	b570      	push	{r4, r5, r6, lr}
 800806a:	0005      	movs	r5, r0
 800806c:	000e      	movs	r6, r1
 800806e:	2800      	cmp	r0, #0
 8008070:	d004      	beq.n	800807c <_puts_r+0x14>
 8008072:	6983      	ldr	r3, [r0, #24]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d101      	bne.n	800807c <_puts_r+0x14>
 8008078:	f7ff fe5c 	bl	8007d34 <__sinit>
 800807c:	69ab      	ldr	r3, [r5, #24]
 800807e:	68ac      	ldr	r4, [r5, #8]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d102      	bne.n	800808a <_puts_r+0x22>
 8008084:	0028      	movs	r0, r5
 8008086:	f7ff fe55 	bl	8007d34 <__sinit>
 800808a:	4b2d      	ldr	r3, [pc, #180]	; (8008140 <_puts_r+0xd8>)
 800808c:	429c      	cmp	r4, r3
 800808e:	d122      	bne.n	80080d6 <_puts_r+0x6e>
 8008090:	686c      	ldr	r4, [r5, #4]
 8008092:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008094:	07db      	lsls	r3, r3, #31
 8008096:	d405      	bmi.n	80080a4 <_puts_r+0x3c>
 8008098:	89a3      	ldrh	r3, [r4, #12]
 800809a:	059b      	lsls	r3, r3, #22
 800809c:	d402      	bmi.n	80080a4 <_puts_r+0x3c>
 800809e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80080a0:	f7ff ff0d 	bl	8007ebe <__retarget_lock_acquire_recursive>
 80080a4:	89a3      	ldrh	r3, [r4, #12]
 80080a6:	071b      	lsls	r3, r3, #28
 80080a8:	d502      	bpl.n	80080b0 <_puts_r+0x48>
 80080aa:	6923      	ldr	r3, [r4, #16]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d129      	bne.n	8008104 <_puts_r+0x9c>
 80080b0:	0021      	movs	r1, r4
 80080b2:	0028      	movs	r0, r5
 80080b4:	f000 f960 	bl	8008378 <__swsetup_r>
 80080b8:	2800      	cmp	r0, #0
 80080ba:	d023      	beq.n	8008104 <_puts_r+0x9c>
 80080bc:	2501      	movs	r5, #1
 80080be:	426d      	negs	r5, r5
 80080c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80080c2:	07db      	lsls	r3, r3, #31
 80080c4:	d405      	bmi.n	80080d2 <_puts_r+0x6a>
 80080c6:	89a3      	ldrh	r3, [r4, #12]
 80080c8:	059b      	lsls	r3, r3, #22
 80080ca:	d402      	bmi.n	80080d2 <_puts_r+0x6a>
 80080cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80080ce:	f7ff fef7 	bl	8007ec0 <__retarget_lock_release_recursive>
 80080d2:	0028      	movs	r0, r5
 80080d4:	bd70      	pop	{r4, r5, r6, pc}
 80080d6:	4b1b      	ldr	r3, [pc, #108]	; (8008144 <_puts_r+0xdc>)
 80080d8:	429c      	cmp	r4, r3
 80080da:	d101      	bne.n	80080e0 <_puts_r+0x78>
 80080dc:	68ac      	ldr	r4, [r5, #8]
 80080de:	e7d8      	b.n	8008092 <_puts_r+0x2a>
 80080e0:	4b19      	ldr	r3, [pc, #100]	; (8008148 <_puts_r+0xe0>)
 80080e2:	429c      	cmp	r4, r3
 80080e4:	d1d5      	bne.n	8008092 <_puts_r+0x2a>
 80080e6:	68ec      	ldr	r4, [r5, #12]
 80080e8:	e7d3      	b.n	8008092 <_puts_r+0x2a>
 80080ea:	3601      	adds	r6, #1
 80080ec:	60a3      	str	r3, [r4, #8]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	da04      	bge.n	80080fc <_puts_r+0x94>
 80080f2:	69a2      	ldr	r2, [r4, #24]
 80080f4:	429a      	cmp	r2, r3
 80080f6:	dc16      	bgt.n	8008126 <_puts_r+0xbe>
 80080f8:	290a      	cmp	r1, #10
 80080fa:	d014      	beq.n	8008126 <_puts_r+0xbe>
 80080fc:	6823      	ldr	r3, [r4, #0]
 80080fe:	1c5a      	adds	r2, r3, #1
 8008100:	6022      	str	r2, [r4, #0]
 8008102:	7019      	strb	r1, [r3, #0]
 8008104:	68a3      	ldr	r3, [r4, #8]
 8008106:	7831      	ldrb	r1, [r6, #0]
 8008108:	3b01      	subs	r3, #1
 800810a:	2900      	cmp	r1, #0
 800810c:	d1ed      	bne.n	80080ea <_puts_r+0x82>
 800810e:	60a3      	str	r3, [r4, #8]
 8008110:	2b00      	cmp	r3, #0
 8008112:	da0f      	bge.n	8008134 <_puts_r+0xcc>
 8008114:	0028      	movs	r0, r5
 8008116:	0022      	movs	r2, r4
 8008118:	310a      	adds	r1, #10
 800811a:	f000 f8c3 	bl	80082a4 <__swbuf_r>
 800811e:	250a      	movs	r5, #10
 8008120:	1c43      	adds	r3, r0, #1
 8008122:	d1cd      	bne.n	80080c0 <_puts_r+0x58>
 8008124:	e7ca      	b.n	80080bc <_puts_r+0x54>
 8008126:	0022      	movs	r2, r4
 8008128:	0028      	movs	r0, r5
 800812a:	f000 f8bb 	bl	80082a4 <__swbuf_r>
 800812e:	1c43      	adds	r3, r0, #1
 8008130:	d1e8      	bne.n	8008104 <_puts_r+0x9c>
 8008132:	e7c3      	b.n	80080bc <_puts_r+0x54>
 8008134:	250a      	movs	r5, #10
 8008136:	6823      	ldr	r3, [r4, #0]
 8008138:	1c5a      	adds	r2, r3, #1
 800813a:	6022      	str	r2, [r4, #0]
 800813c:	701d      	strb	r5, [r3, #0]
 800813e:	e7bf      	b.n	80080c0 <_puts_r+0x58>
 8008140:	0800f3c8 	.word	0x0800f3c8
 8008144:	0800f3e8 	.word	0x0800f3e8
 8008148:	0800f3a8 	.word	0x0800f3a8

0800814c <puts>:
 800814c:	b510      	push	{r4, lr}
 800814e:	4b03      	ldr	r3, [pc, #12]	; (800815c <puts+0x10>)
 8008150:	0001      	movs	r1, r0
 8008152:	6818      	ldr	r0, [r3, #0]
 8008154:	f7ff ff88 	bl	8008068 <_puts_r>
 8008158:	bd10      	pop	{r4, pc}
 800815a:	46c0      	nop			; (mov r8, r8)
 800815c:	20000018 	.word	0x20000018

08008160 <_sbrk_r>:
 8008160:	2300      	movs	r3, #0
 8008162:	b570      	push	{r4, r5, r6, lr}
 8008164:	4d06      	ldr	r5, [pc, #24]	; (8008180 <_sbrk_r+0x20>)
 8008166:	0004      	movs	r4, r0
 8008168:	0008      	movs	r0, r1
 800816a:	602b      	str	r3, [r5, #0]
 800816c:	f7fe f890 	bl	8006290 <_sbrk>
 8008170:	1c43      	adds	r3, r0, #1
 8008172:	d103      	bne.n	800817c <_sbrk_r+0x1c>
 8008174:	682b      	ldr	r3, [r5, #0]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d000      	beq.n	800817c <_sbrk_r+0x1c>
 800817a:	6023      	str	r3, [r4, #0]
 800817c:	bd70      	pop	{r4, r5, r6, pc}
 800817e:	46c0      	nop			; (mov r8, r8)
 8008180:	200003f0 	.word	0x200003f0

08008184 <siprintf>:
 8008184:	b40e      	push	{r1, r2, r3}
 8008186:	b500      	push	{lr}
 8008188:	490b      	ldr	r1, [pc, #44]	; (80081b8 <siprintf+0x34>)
 800818a:	b09c      	sub	sp, #112	; 0x70
 800818c:	ab1d      	add	r3, sp, #116	; 0x74
 800818e:	9002      	str	r0, [sp, #8]
 8008190:	9006      	str	r0, [sp, #24]
 8008192:	9107      	str	r1, [sp, #28]
 8008194:	9104      	str	r1, [sp, #16]
 8008196:	4809      	ldr	r0, [pc, #36]	; (80081bc <siprintf+0x38>)
 8008198:	4909      	ldr	r1, [pc, #36]	; (80081c0 <siprintf+0x3c>)
 800819a:	cb04      	ldmia	r3!, {r2}
 800819c:	9105      	str	r1, [sp, #20]
 800819e:	6800      	ldr	r0, [r0, #0]
 80081a0:	a902      	add	r1, sp, #8
 80081a2:	9301      	str	r3, [sp, #4]
 80081a4:	f000 fa64 	bl	8008670 <_svfiprintf_r>
 80081a8:	2300      	movs	r3, #0
 80081aa:	9a02      	ldr	r2, [sp, #8]
 80081ac:	7013      	strb	r3, [r2, #0]
 80081ae:	b01c      	add	sp, #112	; 0x70
 80081b0:	bc08      	pop	{r3}
 80081b2:	b003      	add	sp, #12
 80081b4:	4718      	bx	r3
 80081b6:	46c0      	nop			; (mov r8, r8)
 80081b8:	7fffffff 	.word	0x7fffffff
 80081bc:	20000018 	.word	0x20000018
 80081c0:	ffff0208 	.word	0xffff0208

080081c4 <__sread>:
 80081c4:	b570      	push	{r4, r5, r6, lr}
 80081c6:	000c      	movs	r4, r1
 80081c8:	250e      	movs	r5, #14
 80081ca:	5f49      	ldrsh	r1, [r1, r5]
 80081cc:	f000 fe34 	bl	8008e38 <_read_r>
 80081d0:	2800      	cmp	r0, #0
 80081d2:	db03      	blt.n	80081dc <__sread+0x18>
 80081d4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80081d6:	181b      	adds	r3, r3, r0
 80081d8:	6563      	str	r3, [r4, #84]	; 0x54
 80081da:	bd70      	pop	{r4, r5, r6, pc}
 80081dc:	89a3      	ldrh	r3, [r4, #12]
 80081de:	4a02      	ldr	r2, [pc, #8]	; (80081e8 <__sread+0x24>)
 80081e0:	4013      	ands	r3, r2
 80081e2:	81a3      	strh	r3, [r4, #12]
 80081e4:	e7f9      	b.n	80081da <__sread+0x16>
 80081e6:	46c0      	nop			; (mov r8, r8)
 80081e8:	ffffefff 	.word	0xffffefff

080081ec <__swrite>:
 80081ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ee:	001f      	movs	r7, r3
 80081f0:	898b      	ldrh	r3, [r1, #12]
 80081f2:	0005      	movs	r5, r0
 80081f4:	000c      	movs	r4, r1
 80081f6:	0016      	movs	r6, r2
 80081f8:	05db      	lsls	r3, r3, #23
 80081fa:	d505      	bpl.n	8008208 <__swrite+0x1c>
 80081fc:	230e      	movs	r3, #14
 80081fe:	5ec9      	ldrsh	r1, [r1, r3]
 8008200:	2200      	movs	r2, #0
 8008202:	2302      	movs	r3, #2
 8008204:	f000 f942 	bl	800848c <_lseek_r>
 8008208:	89a3      	ldrh	r3, [r4, #12]
 800820a:	4a05      	ldr	r2, [pc, #20]	; (8008220 <__swrite+0x34>)
 800820c:	0028      	movs	r0, r5
 800820e:	4013      	ands	r3, r2
 8008210:	81a3      	strh	r3, [r4, #12]
 8008212:	0032      	movs	r2, r6
 8008214:	230e      	movs	r3, #14
 8008216:	5ee1      	ldrsh	r1, [r4, r3]
 8008218:	003b      	movs	r3, r7
 800821a:	f000 f899 	bl	8008350 <_write_r>
 800821e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008220:	ffffefff 	.word	0xffffefff

08008224 <__sseek>:
 8008224:	b570      	push	{r4, r5, r6, lr}
 8008226:	000c      	movs	r4, r1
 8008228:	250e      	movs	r5, #14
 800822a:	5f49      	ldrsh	r1, [r1, r5]
 800822c:	f000 f92e 	bl	800848c <_lseek_r>
 8008230:	89a3      	ldrh	r3, [r4, #12]
 8008232:	1c42      	adds	r2, r0, #1
 8008234:	d103      	bne.n	800823e <__sseek+0x1a>
 8008236:	4a05      	ldr	r2, [pc, #20]	; (800824c <__sseek+0x28>)
 8008238:	4013      	ands	r3, r2
 800823a:	81a3      	strh	r3, [r4, #12]
 800823c:	bd70      	pop	{r4, r5, r6, pc}
 800823e:	2280      	movs	r2, #128	; 0x80
 8008240:	0152      	lsls	r2, r2, #5
 8008242:	4313      	orrs	r3, r2
 8008244:	81a3      	strh	r3, [r4, #12]
 8008246:	6560      	str	r0, [r4, #84]	; 0x54
 8008248:	e7f8      	b.n	800823c <__sseek+0x18>
 800824a:	46c0      	nop			; (mov r8, r8)
 800824c:	ffffefff 	.word	0xffffefff

08008250 <__sclose>:
 8008250:	b510      	push	{r4, lr}
 8008252:	230e      	movs	r3, #14
 8008254:	5ec9      	ldrsh	r1, [r1, r3]
 8008256:	f000 f907 	bl	8008468 <_close_r>
 800825a:	bd10      	pop	{r4, pc}

0800825c <strcat>:
 800825c:	0002      	movs	r2, r0
 800825e:	b510      	push	{r4, lr}
 8008260:	7813      	ldrb	r3, [r2, #0]
 8008262:	0014      	movs	r4, r2
 8008264:	3201      	adds	r2, #1
 8008266:	2b00      	cmp	r3, #0
 8008268:	d1fa      	bne.n	8008260 <strcat+0x4>
 800826a:	5cca      	ldrb	r2, [r1, r3]
 800826c:	54e2      	strb	r2, [r4, r3]
 800826e:	3301      	adds	r3, #1
 8008270:	2a00      	cmp	r2, #0
 8008272:	d1fa      	bne.n	800826a <strcat+0xe>
 8008274:	bd10      	pop	{r4, pc}
	...

08008278 <viprintf>:
 8008278:	4b09      	ldr	r3, [pc, #36]	; (80082a0 <viprintf+0x28>)
 800827a:	b570      	push	{r4, r5, r6, lr}
 800827c:	681c      	ldr	r4, [r3, #0]
 800827e:	0005      	movs	r5, r0
 8008280:	000e      	movs	r6, r1
 8008282:	2c00      	cmp	r4, #0
 8008284:	d005      	beq.n	8008292 <viprintf+0x1a>
 8008286:	69a3      	ldr	r3, [r4, #24]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d102      	bne.n	8008292 <viprintf+0x1a>
 800828c:	0020      	movs	r0, r4
 800828e:	f7ff fd51 	bl	8007d34 <__sinit>
 8008292:	0033      	movs	r3, r6
 8008294:	002a      	movs	r2, r5
 8008296:	0020      	movs	r0, r4
 8008298:	68a1      	ldr	r1, [r4, #8]
 800829a:	f000 fb11 	bl	80088c0 <_vfiprintf_r>
 800829e:	bd70      	pop	{r4, r5, r6, pc}
 80082a0:	20000018 	.word	0x20000018

080082a4 <__swbuf_r>:
 80082a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082a6:	0005      	movs	r5, r0
 80082a8:	000e      	movs	r6, r1
 80082aa:	0014      	movs	r4, r2
 80082ac:	2800      	cmp	r0, #0
 80082ae:	d004      	beq.n	80082ba <__swbuf_r+0x16>
 80082b0:	6983      	ldr	r3, [r0, #24]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d101      	bne.n	80082ba <__swbuf_r+0x16>
 80082b6:	f7ff fd3d 	bl	8007d34 <__sinit>
 80082ba:	4b22      	ldr	r3, [pc, #136]	; (8008344 <__swbuf_r+0xa0>)
 80082bc:	429c      	cmp	r4, r3
 80082be:	d12e      	bne.n	800831e <__swbuf_r+0x7a>
 80082c0:	686c      	ldr	r4, [r5, #4]
 80082c2:	69a3      	ldr	r3, [r4, #24]
 80082c4:	60a3      	str	r3, [r4, #8]
 80082c6:	89a3      	ldrh	r3, [r4, #12]
 80082c8:	071b      	lsls	r3, r3, #28
 80082ca:	d532      	bpl.n	8008332 <__swbuf_r+0x8e>
 80082cc:	6923      	ldr	r3, [r4, #16]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d02f      	beq.n	8008332 <__swbuf_r+0x8e>
 80082d2:	6823      	ldr	r3, [r4, #0]
 80082d4:	6922      	ldr	r2, [r4, #16]
 80082d6:	b2f7      	uxtb	r7, r6
 80082d8:	1a98      	subs	r0, r3, r2
 80082da:	6963      	ldr	r3, [r4, #20]
 80082dc:	b2f6      	uxtb	r6, r6
 80082de:	4283      	cmp	r3, r0
 80082e0:	dc05      	bgt.n	80082ee <__swbuf_r+0x4a>
 80082e2:	0021      	movs	r1, r4
 80082e4:	0028      	movs	r0, r5
 80082e6:	f7ff fc6d 	bl	8007bc4 <_fflush_r>
 80082ea:	2800      	cmp	r0, #0
 80082ec:	d127      	bne.n	800833e <__swbuf_r+0x9a>
 80082ee:	68a3      	ldr	r3, [r4, #8]
 80082f0:	3001      	adds	r0, #1
 80082f2:	3b01      	subs	r3, #1
 80082f4:	60a3      	str	r3, [r4, #8]
 80082f6:	6823      	ldr	r3, [r4, #0]
 80082f8:	1c5a      	adds	r2, r3, #1
 80082fa:	6022      	str	r2, [r4, #0]
 80082fc:	701f      	strb	r7, [r3, #0]
 80082fe:	6963      	ldr	r3, [r4, #20]
 8008300:	4283      	cmp	r3, r0
 8008302:	d004      	beq.n	800830e <__swbuf_r+0x6a>
 8008304:	89a3      	ldrh	r3, [r4, #12]
 8008306:	07db      	lsls	r3, r3, #31
 8008308:	d507      	bpl.n	800831a <__swbuf_r+0x76>
 800830a:	2e0a      	cmp	r6, #10
 800830c:	d105      	bne.n	800831a <__swbuf_r+0x76>
 800830e:	0021      	movs	r1, r4
 8008310:	0028      	movs	r0, r5
 8008312:	f7ff fc57 	bl	8007bc4 <_fflush_r>
 8008316:	2800      	cmp	r0, #0
 8008318:	d111      	bne.n	800833e <__swbuf_r+0x9a>
 800831a:	0030      	movs	r0, r6
 800831c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800831e:	4b0a      	ldr	r3, [pc, #40]	; (8008348 <__swbuf_r+0xa4>)
 8008320:	429c      	cmp	r4, r3
 8008322:	d101      	bne.n	8008328 <__swbuf_r+0x84>
 8008324:	68ac      	ldr	r4, [r5, #8]
 8008326:	e7cc      	b.n	80082c2 <__swbuf_r+0x1e>
 8008328:	4b08      	ldr	r3, [pc, #32]	; (800834c <__swbuf_r+0xa8>)
 800832a:	429c      	cmp	r4, r3
 800832c:	d1c9      	bne.n	80082c2 <__swbuf_r+0x1e>
 800832e:	68ec      	ldr	r4, [r5, #12]
 8008330:	e7c7      	b.n	80082c2 <__swbuf_r+0x1e>
 8008332:	0021      	movs	r1, r4
 8008334:	0028      	movs	r0, r5
 8008336:	f000 f81f 	bl	8008378 <__swsetup_r>
 800833a:	2800      	cmp	r0, #0
 800833c:	d0c9      	beq.n	80082d2 <__swbuf_r+0x2e>
 800833e:	2601      	movs	r6, #1
 8008340:	4276      	negs	r6, r6
 8008342:	e7ea      	b.n	800831a <__swbuf_r+0x76>
 8008344:	0800f3c8 	.word	0x0800f3c8
 8008348:	0800f3e8 	.word	0x0800f3e8
 800834c:	0800f3a8 	.word	0x0800f3a8

08008350 <_write_r>:
 8008350:	b570      	push	{r4, r5, r6, lr}
 8008352:	0004      	movs	r4, r0
 8008354:	0008      	movs	r0, r1
 8008356:	0011      	movs	r1, r2
 8008358:	001a      	movs	r2, r3
 800835a:	2300      	movs	r3, #0
 800835c:	4d05      	ldr	r5, [pc, #20]	; (8008374 <_write_r+0x24>)
 800835e:	602b      	str	r3, [r5, #0]
 8008360:	f7fd ff4d 	bl	80061fe <_write>
 8008364:	1c43      	adds	r3, r0, #1
 8008366:	d103      	bne.n	8008370 <_write_r+0x20>
 8008368:	682b      	ldr	r3, [r5, #0]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d000      	beq.n	8008370 <_write_r+0x20>
 800836e:	6023      	str	r3, [r4, #0]
 8008370:	bd70      	pop	{r4, r5, r6, pc}
 8008372:	46c0      	nop			; (mov r8, r8)
 8008374:	200003f0 	.word	0x200003f0

08008378 <__swsetup_r>:
 8008378:	4b37      	ldr	r3, [pc, #220]	; (8008458 <__swsetup_r+0xe0>)
 800837a:	b570      	push	{r4, r5, r6, lr}
 800837c:	681d      	ldr	r5, [r3, #0]
 800837e:	0006      	movs	r6, r0
 8008380:	000c      	movs	r4, r1
 8008382:	2d00      	cmp	r5, #0
 8008384:	d005      	beq.n	8008392 <__swsetup_r+0x1a>
 8008386:	69ab      	ldr	r3, [r5, #24]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d102      	bne.n	8008392 <__swsetup_r+0x1a>
 800838c:	0028      	movs	r0, r5
 800838e:	f7ff fcd1 	bl	8007d34 <__sinit>
 8008392:	4b32      	ldr	r3, [pc, #200]	; (800845c <__swsetup_r+0xe4>)
 8008394:	429c      	cmp	r4, r3
 8008396:	d10f      	bne.n	80083b8 <__swsetup_r+0x40>
 8008398:	686c      	ldr	r4, [r5, #4]
 800839a:	230c      	movs	r3, #12
 800839c:	5ee2      	ldrsh	r2, [r4, r3]
 800839e:	b293      	uxth	r3, r2
 80083a0:	0711      	lsls	r1, r2, #28
 80083a2:	d42d      	bmi.n	8008400 <__swsetup_r+0x88>
 80083a4:	06d9      	lsls	r1, r3, #27
 80083a6:	d411      	bmi.n	80083cc <__swsetup_r+0x54>
 80083a8:	2309      	movs	r3, #9
 80083aa:	2001      	movs	r0, #1
 80083ac:	6033      	str	r3, [r6, #0]
 80083ae:	3337      	adds	r3, #55	; 0x37
 80083b0:	4313      	orrs	r3, r2
 80083b2:	81a3      	strh	r3, [r4, #12]
 80083b4:	4240      	negs	r0, r0
 80083b6:	bd70      	pop	{r4, r5, r6, pc}
 80083b8:	4b29      	ldr	r3, [pc, #164]	; (8008460 <__swsetup_r+0xe8>)
 80083ba:	429c      	cmp	r4, r3
 80083bc:	d101      	bne.n	80083c2 <__swsetup_r+0x4a>
 80083be:	68ac      	ldr	r4, [r5, #8]
 80083c0:	e7eb      	b.n	800839a <__swsetup_r+0x22>
 80083c2:	4b28      	ldr	r3, [pc, #160]	; (8008464 <__swsetup_r+0xec>)
 80083c4:	429c      	cmp	r4, r3
 80083c6:	d1e8      	bne.n	800839a <__swsetup_r+0x22>
 80083c8:	68ec      	ldr	r4, [r5, #12]
 80083ca:	e7e6      	b.n	800839a <__swsetup_r+0x22>
 80083cc:	075b      	lsls	r3, r3, #29
 80083ce:	d513      	bpl.n	80083f8 <__swsetup_r+0x80>
 80083d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80083d2:	2900      	cmp	r1, #0
 80083d4:	d008      	beq.n	80083e8 <__swsetup_r+0x70>
 80083d6:	0023      	movs	r3, r4
 80083d8:	3344      	adds	r3, #68	; 0x44
 80083da:	4299      	cmp	r1, r3
 80083dc:	d002      	beq.n	80083e4 <__swsetup_r+0x6c>
 80083de:	0030      	movs	r0, r6
 80083e0:	f7ff fd9a 	bl	8007f18 <_free_r>
 80083e4:	2300      	movs	r3, #0
 80083e6:	6363      	str	r3, [r4, #52]	; 0x34
 80083e8:	2224      	movs	r2, #36	; 0x24
 80083ea:	89a3      	ldrh	r3, [r4, #12]
 80083ec:	4393      	bics	r3, r2
 80083ee:	81a3      	strh	r3, [r4, #12]
 80083f0:	2300      	movs	r3, #0
 80083f2:	6063      	str	r3, [r4, #4]
 80083f4:	6923      	ldr	r3, [r4, #16]
 80083f6:	6023      	str	r3, [r4, #0]
 80083f8:	2308      	movs	r3, #8
 80083fa:	89a2      	ldrh	r2, [r4, #12]
 80083fc:	4313      	orrs	r3, r2
 80083fe:	81a3      	strh	r3, [r4, #12]
 8008400:	6923      	ldr	r3, [r4, #16]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d10b      	bne.n	800841e <__swsetup_r+0xa6>
 8008406:	21a0      	movs	r1, #160	; 0xa0
 8008408:	2280      	movs	r2, #128	; 0x80
 800840a:	89a3      	ldrh	r3, [r4, #12]
 800840c:	0089      	lsls	r1, r1, #2
 800840e:	0092      	lsls	r2, r2, #2
 8008410:	400b      	ands	r3, r1
 8008412:	4293      	cmp	r3, r2
 8008414:	d003      	beq.n	800841e <__swsetup_r+0xa6>
 8008416:	0021      	movs	r1, r4
 8008418:	0030      	movs	r0, r6
 800841a:	f000 f873 	bl	8008504 <__smakebuf_r>
 800841e:	220c      	movs	r2, #12
 8008420:	5ea3      	ldrsh	r3, [r4, r2]
 8008422:	2001      	movs	r0, #1
 8008424:	001a      	movs	r2, r3
 8008426:	b299      	uxth	r1, r3
 8008428:	4002      	ands	r2, r0
 800842a:	4203      	tst	r3, r0
 800842c:	d00f      	beq.n	800844e <__swsetup_r+0xd6>
 800842e:	2200      	movs	r2, #0
 8008430:	60a2      	str	r2, [r4, #8]
 8008432:	6962      	ldr	r2, [r4, #20]
 8008434:	4252      	negs	r2, r2
 8008436:	61a2      	str	r2, [r4, #24]
 8008438:	2000      	movs	r0, #0
 800843a:	6922      	ldr	r2, [r4, #16]
 800843c:	4282      	cmp	r2, r0
 800843e:	d1ba      	bne.n	80083b6 <__swsetup_r+0x3e>
 8008440:	060a      	lsls	r2, r1, #24
 8008442:	d5b8      	bpl.n	80083b6 <__swsetup_r+0x3e>
 8008444:	2240      	movs	r2, #64	; 0x40
 8008446:	4313      	orrs	r3, r2
 8008448:	81a3      	strh	r3, [r4, #12]
 800844a:	3801      	subs	r0, #1
 800844c:	e7b3      	b.n	80083b6 <__swsetup_r+0x3e>
 800844e:	0788      	lsls	r0, r1, #30
 8008450:	d400      	bmi.n	8008454 <__swsetup_r+0xdc>
 8008452:	6962      	ldr	r2, [r4, #20]
 8008454:	60a2      	str	r2, [r4, #8]
 8008456:	e7ef      	b.n	8008438 <__swsetup_r+0xc0>
 8008458:	20000018 	.word	0x20000018
 800845c:	0800f3c8 	.word	0x0800f3c8
 8008460:	0800f3e8 	.word	0x0800f3e8
 8008464:	0800f3a8 	.word	0x0800f3a8

08008468 <_close_r>:
 8008468:	2300      	movs	r3, #0
 800846a:	b570      	push	{r4, r5, r6, lr}
 800846c:	4d06      	ldr	r5, [pc, #24]	; (8008488 <_close_r+0x20>)
 800846e:	0004      	movs	r4, r0
 8008470:	0008      	movs	r0, r1
 8008472:	602b      	str	r3, [r5, #0]
 8008474:	f7fd fedf 	bl	8006236 <_close>
 8008478:	1c43      	adds	r3, r0, #1
 800847a:	d103      	bne.n	8008484 <_close_r+0x1c>
 800847c:	682b      	ldr	r3, [r5, #0]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d000      	beq.n	8008484 <_close_r+0x1c>
 8008482:	6023      	str	r3, [r4, #0]
 8008484:	bd70      	pop	{r4, r5, r6, pc}
 8008486:	46c0      	nop			; (mov r8, r8)
 8008488:	200003f0 	.word	0x200003f0

0800848c <_lseek_r>:
 800848c:	b570      	push	{r4, r5, r6, lr}
 800848e:	0004      	movs	r4, r0
 8008490:	0008      	movs	r0, r1
 8008492:	0011      	movs	r1, r2
 8008494:	001a      	movs	r2, r3
 8008496:	2300      	movs	r3, #0
 8008498:	4d05      	ldr	r5, [pc, #20]	; (80084b0 <_lseek_r+0x24>)
 800849a:	602b      	str	r3, [r5, #0]
 800849c:	f7fd feec 	bl	8006278 <_lseek>
 80084a0:	1c43      	adds	r3, r0, #1
 80084a2:	d103      	bne.n	80084ac <_lseek_r+0x20>
 80084a4:	682b      	ldr	r3, [r5, #0]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d000      	beq.n	80084ac <_lseek_r+0x20>
 80084aa:	6023      	str	r3, [r4, #0]
 80084ac:	bd70      	pop	{r4, r5, r6, pc}
 80084ae:	46c0      	nop			; (mov r8, r8)
 80084b0:	200003f0 	.word	0x200003f0

080084b4 <__swhatbuf_r>:
 80084b4:	b570      	push	{r4, r5, r6, lr}
 80084b6:	000e      	movs	r6, r1
 80084b8:	001d      	movs	r5, r3
 80084ba:	230e      	movs	r3, #14
 80084bc:	5ec9      	ldrsh	r1, [r1, r3]
 80084be:	0014      	movs	r4, r2
 80084c0:	b096      	sub	sp, #88	; 0x58
 80084c2:	2900      	cmp	r1, #0
 80084c4:	da07      	bge.n	80084d6 <__swhatbuf_r+0x22>
 80084c6:	2300      	movs	r3, #0
 80084c8:	602b      	str	r3, [r5, #0]
 80084ca:	89b3      	ldrh	r3, [r6, #12]
 80084cc:	061b      	lsls	r3, r3, #24
 80084ce:	d411      	bmi.n	80084f4 <__swhatbuf_r+0x40>
 80084d0:	2380      	movs	r3, #128	; 0x80
 80084d2:	00db      	lsls	r3, r3, #3
 80084d4:	e00f      	b.n	80084f6 <__swhatbuf_r+0x42>
 80084d6:	466a      	mov	r2, sp
 80084d8:	f000 fcc2 	bl	8008e60 <_fstat_r>
 80084dc:	2800      	cmp	r0, #0
 80084de:	dbf2      	blt.n	80084c6 <__swhatbuf_r+0x12>
 80084e0:	23f0      	movs	r3, #240	; 0xf0
 80084e2:	9901      	ldr	r1, [sp, #4]
 80084e4:	021b      	lsls	r3, r3, #8
 80084e6:	4019      	ands	r1, r3
 80084e8:	4b05      	ldr	r3, [pc, #20]	; (8008500 <__swhatbuf_r+0x4c>)
 80084ea:	18c9      	adds	r1, r1, r3
 80084ec:	424b      	negs	r3, r1
 80084ee:	4159      	adcs	r1, r3
 80084f0:	6029      	str	r1, [r5, #0]
 80084f2:	e7ed      	b.n	80084d0 <__swhatbuf_r+0x1c>
 80084f4:	2340      	movs	r3, #64	; 0x40
 80084f6:	2000      	movs	r0, #0
 80084f8:	6023      	str	r3, [r4, #0]
 80084fa:	b016      	add	sp, #88	; 0x58
 80084fc:	bd70      	pop	{r4, r5, r6, pc}
 80084fe:	46c0      	nop			; (mov r8, r8)
 8008500:	ffffe000 	.word	0xffffe000

08008504 <__smakebuf_r>:
 8008504:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008506:	2602      	movs	r6, #2
 8008508:	898b      	ldrh	r3, [r1, #12]
 800850a:	0005      	movs	r5, r0
 800850c:	000c      	movs	r4, r1
 800850e:	4233      	tst	r3, r6
 8008510:	d006      	beq.n	8008520 <__smakebuf_r+0x1c>
 8008512:	0023      	movs	r3, r4
 8008514:	3347      	adds	r3, #71	; 0x47
 8008516:	6023      	str	r3, [r4, #0]
 8008518:	6123      	str	r3, [r4, #16]
 800851a:	2301      	movs	r3, #1
 800851c:	6163      	str	r3, [r4, #20]
 800851e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8008520:	466a      	mov	r2, sp
 8008522:	ab01      	add	r3, sp, #4
 8008524:	f7ff ffc6 	bl	80084b4 <__swhatbuf_r>
 8008528:	9900      	ldr	r1, [sp, #0]
 800852a:	0007      	movs	r7, r0
 800852c:	0028      	movs	r0, r5
 800852e:	f7ff fd3d 	bl	8007fac <_malloc_r>
 8008532:	2800      	cmp	r0, #0
 8008534:	d108      	bne.n	8008548 <__smakebuf_r+0x44>
 8008536:	220c      	movs	r2, #12
 8008538:	5ea3      	ldrsh	r3, [r4, r2]
 800853a:	059a      	lsls	r2, r3, #22
 800853c:	d4ef      	bmi.n	800851e <__smakebuf_r+0x1a>
 800853e:	2203      	movs	r2, #3
 8008540:	4393      	bics	r3, r2
 8008542:	431e      	orrs	r6, r3
 8008544:	81a6      	strh	r6, [r4, #12]
 8008546:	e7e4      	b.n	8008512 <__smakebuf_r+0xe>
 8008548:	4b0f      	ldr	r3, [pc, #60]	; (8008588 <__smakebuf_r+0x84>)
 800854a:	62ab      	str	r3, [r5, #40]	; 0x28
 800854c:	2380      	movs	r3, #128	; 0x80
 800854e:	89a2      	ldrh	r2, [r4, #12]
 8008550:	6020      	str	r0, [r4, #0]
 8008552:	4313      	orrs	r3, r2
 8008554:	81a3      	strh	r3, [r4, #12]
 8008556:	9b00      	ldr	r3, [sp, #0]
 8008558:	6120      	str	r0, [r4, #16]
 800855a:	6163      	str	r3, [r4, #20]
 800855c:	9b01      	ldr	r3, [sp, #4]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d00d      	beq.n	800857e <__smakebuf_r+0x7a>
 8008562:	0028      	movs	r0, r5
 8008564:	230e      	movs	r3, #14
 8008566:	5ee1      	ldrsh	r1, [r4, r3]
 8008568:	f000 fc8c 	bl	8008e84 <_isatty_r>
 800856c:	2800      	cmp	r0, #0
 800856e:	d006      	beq.n	800857e <__smakebuf_r+0x7a>
 8008570:	2203      	movs	r2, #3
 8008572:	89a3      	ldrh	r3, [r4, #12]
 8008574:	4393      	bics	r3, r2
 8008576:	001a      	movs	r2, r3
 8008578:	2301      	movs	r3, #1
 800857a:	4313      	orrs	r3, r2
 800857c:	81a3      	strh	r3, [r4, #12]
 800857e:	89a0      	ldrh	r0, [r4, #12]
 8008580:	4307      	orrs	r7, r0
 8008582:	81a7      	strh	r7, [r4, #12]
 8008584:	e7cb      	b.n	800851e <__smakebuf_r+0x1a>
 8008586:	46c0      	nop			; (mov r8, r8)
 8008588:	08007cb9 	.word	0x08007cb9

0800858c <__malloc_lock>:
 800858c:	b510      	push	{r4, lr}
 800858e:	4802      	ldr	r0, [pc, #8]	; (8008598 <__malloc_lock+0xc>)
 8008590:	f7ff fc95 	bl	8007ebe <__retarget_lock_acquire_recursive>
 8008594:	bd10      	pop	{r4, pc}
 8008596:	46c0      	nop			; (mov r8, r8)
 8008598:	200003e8 	.word	0x200003e8

0800859c <__malloc_unlock>:
 800859c:	b510      	push	{r4, lr}
 800859e:	4802      	ldr	r0, [pc, #8]	; (80085a8 <__malloc_unlock+0xc>)
 80085a0:	f7ff fc8e 	bl	8007ec0 <__retarget_lock_release_recursive>
 80085a4:	bd10      	pop	{r4, pc}
 80085a6:	46c0      	nop			; (mov r8, r8)
 80085a8:	200003e8 	.word	0x200003e8

080085ac <__ssputs_r>:
 80085ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085ae:	688e      	ldr	r6, [r1, #8]
 80085b0:	b085      	sub	sp, #20
 80085b2:	0007      	movs	r7, r0
 80085b4:	000c      	movs	r4, r1
 80085b6:	9203      	str	r2, [sp, #12]
 80085b8:	9301      	str	r3, [sp, #4]
 80085ba:	429e      	cmp	r6, r3
 80085bc:	d83c      	bhi.n	8008638 <__ssputs_r+0x8c>
 80085be:	2390      	movs	r3, #144	; 0x90
 80085c0:	898a      	ldrh	r2, [r1, #12]
 80085c2:	00db      	lsls	r3, r3, #3
 80085c4:	421a      	tst	r2, r3
 80085c6:	d034      	beq.n	8008632 <__ssputs_r+0x86>
 80085c8:	2503      	movs	r5, #3
 80085ca:	6909      	ldr	r1, [r1, #16]
 80085cc:	6823      	ldr	r3, [r4, #0]
 80085ce:	1a5b      	subs	r3, r3, r1
 80085d0:	9302      	str	r3, [sp, #8]
 80085d2:	6963      	ldr	r3, [r4, #20]
 80085d4:	9802      	ldr	r0, [sp, #8]
 80085d6:	435d      	muls	r5, r3
 80085d8:	0feb      	lsrs	r3, r5, #31
 80085da:	195d      	adds	r5, r3, r5
 80085dc:	9b01      	ldr	r3, [sp, #4]
 80085de:	106d      	asrs	r5, r5, #1
 80085e0:	3301      	adds	r3, #1
 80085e2:	181b      	adds	r3, r3, r0
 80085e4:	42ab      	cmp	r3, r5
 80085e6:	d900      	bls.n	80085ea <__ssputs_r+0x3e>
 80085e8:	001d      	movs	r5, r3
 80085ea:	0553      	lsls	r3, r2, #21
 80085ec:	d532      	bpl.n	8008654 <__ssputs_r+0xa8>
 80085ee:	0029      	movs	r1, r5
 80085f0:	0038      	movs	r0, r7
 80085f2:	f7ff fcdb 	bl	8007fac <_malloc_r>
 80085f6:	1e06      	subs	r6, r0, #0
 80085f8:	d109      	bne.n	800860e <__ssputs_r+0x62>
 80085fa:	230c      	movs	r3, #12
 80085fc:	603b      	str	r3, [r7, #0]
 80085fe:	2340      	movs	r3, #64	; 0x40
 8008600:	2001      	movs	r0, #1
 8008602:	89a2      	ldrh	r2, [r4, #12]
 8008604:	4240      	negs	r0, r0
 8008606:	4313      	orrs	r3, r2
 8008608:	81a3      	strh	r3, [r4, #12]
 800860a:	b005      	add	sp, #20
 800860c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800860e:	9a02      	ldr	r2, [sp, #8]
 8008610:	6921      	ldr	r1, [r4, #16]
 8008612:	f7ff fc61 	bl	8007ed8 <memcpy>
 8008616:	89a3      	ldrh	r3, [r4, #12]
 8008618:	4a14      	ldr	r2, [pc, #80]	; (800866c <__ssputs_r+0xc0>)
 800861a:	401a      	ands	r2, r3
 800861c:	2380      	movs	r3, #128	; 0x80
 800861e:	4313      	orrs	r3, r2
 8008620:	81a3      	strh	r3, [r4, #12]
 8008622:	9b02      	ldr	r3, [sp, #8]
 8008624:	6126      	str	r6, [r4, #16]
 8008626:	18f6      	adds	r6, r6, r3
 8008628:	6026      	str	r6, [r4, #0]
 800862a:	6165      	str	r5, [r4, #20]
 800862c:	9e01      	ldr	r6, [sp, #4]
 800862e:	1aed      	subs	r5, r5, r3
 8008630:	60a5      	str	r5, [r4, #8]
 8008632:	9b01      	ldr	r3, [sp, #4]
 8008634:	429e      	cmp	r6, r3
 8008636:	d900      	bls.n	800863a <__ssputs_r+0x8e>
 8008638:	9e01      	ldr	r6, [sp, #4]
 800863a:	0032      	movs	r2, r6
 800863c:	9903      	ldr	r1, [sp, #12]
 800863e:	6820      	ldr	r0, [r4, #0]
 8008640:	f000 fc3d 	bl	8008ebe <memmove>
 8008644:	68a3      	ldr	r3, [r4, #8]
 8008646:	2000      	movs	r0, #0
 8008648:	1b9b      	subs	r3, r3, r6
 800864a:	60a3      	str	r3, [r4, #8]
 800864c:	6823      	ldr	r3, [r4, #0]
 800864e:	199e      	adds	r6, r3, r6
 8008650:	6026      	str	r6, [r4, #0]
 8008652:	e7da      	b.n	800860a <__ssputs_r+0x5e>
 8008654:	002a      	movs	r2, r5
 8008656:	0038      	movs	r0, r7
 8008658:	f000 fc44 	bl	8008ee4 <_realloc_r>
 800865c:	1e06      	subs	r6, r0, #0
 800865e:	d1e0      	bne.n	8008622 <__ssputs_r+0x76>
 8008660:	0038      	movs	r0, r7
 8008662:	6921      	ldr	r1, [r4, #16]
 8008664:	f7ff fc58 	bl	8007f18 <_free_r>
 8008668:	e7c7      	b.n	80085fa <__ssputs_r+0x4e>
 800866a:	46c0      	nop			; (mov r8, r8)
 800866c:	fffffb7f 	.word	0xfffffb7f

08008670 <_svfiprintf_r>:
 8008670:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008672:	b0a1      	sub	sp, #132	; 0x84
 8008674:	9003      	str	r0, [sp, #12]
 8008676:	001d      	movs	r5, r3
 8008678:	898b      	ldrh	r3, [r1, #12]
 800867a:	000f      	movs	r7, r1
 800867c:	0016      	movs	r6, r2
 800867e:	061b      	lsls	r3, r3, #24
 8008680:	d511      	bpl.n	80086a6 <_svfiprintf_r+0x36>
 8008682:	690b      	ldr	r3, [r1, #16]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d10e      	bne.n	80086a6 <_svfiprintf_r+0x36>
 8008688:	2140      	movs	r1, #64	; 0x40
 800868a:	f7ff fc8f 	bl	8007fac <_malloc_r>
 800868e:	6038      	str	r0, [r7, #0]
 8008690:	6138      	str	r0, [r7, #16]
 8008692:	2800      	cmp	r0, #0
 8008694:	d105      	bne.n	80086a2 <_svfiprintf_r+0x32>
 8008696:	230c      	movs	r3, #12
 8008698:	9a03      	ldr	r2, [sp, #12]
 800869a:	3801      	subs	r0, #1
 800869c:	6013      	str	r3, [r2, #0]
 800869e:	b021      	add	sp, #132	; 0x84
 80086a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086a2:	2340      	movs	r3, #64	; 0x40
 80086a4:	617b      	str	r3, [r7, #20]
 80086a6:	2300      	movs	r3, #0
 80086a8:	ac08      	add	r4, sp, #32
 80086aa:	6163      	str	r3, [r4, #20]
 80086ac:	3320      	adds	r3, #32
 80086ae:	7663      	strb	r3, [r4, #25]
 80086b0:	3310      	adds	r3, #16
 80086b2:	76a3      	strb	r3, [r4, #26]
 80086b4:	9507      	str	r5, [sp, #28]
 80086b6:	0035      	movs	r5, r6
 80086b8:	782b      	ldrb	r3, [r5, #0]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d001      	beq.n	80086c2 <_svfiprintf_r+0x52>
 80086be:	2b25      	cmp	r3, #37	; 0x25
 80086c0:	d147      	bne.n	8008752 <_svfiprintf_r+0xe2>
 80086c2:	1bab      	subs	r3, r5, r6
 80086c4:	9305      	str	r3, [sp, #20]
 80086c6:	42b5      	cmp	r5, r6
 80086c8:	d00c      	beq.n	80086e4 <_svfiprintf_r+0x74>
 80086ca:	0032      	movs	r2, r6
 80086cc:	0039      	movs	r1, r7
 80086ce:	9803      	ldr	r0, [sp, #12]
 80086d0:	f7ff ff6c 	bl	80085ac <__ssputs_r>
 80086d4:	1c43      	adds	r3, r0, #1
 80086d6:	d100      	bne.n	80086da <_svfiprintf_r+0x6a>
 80086d8:	e0ae      	b.n	8008838 <_svfiprintf_r+0x1c8>
 80086da:	6962      	ldr	r2, [r4, #20]
 80086dc:	9b05      	ldr	r3, [sp, #20]
 80086de:	4694      	mov	ip, r2
 80086e0:	4463      	add	r3, ip
 80086e2:	6163      	str	r3, [r4, #20]
 80086e4:	782b      	ldrb	r3, [r5, #0]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d100      	bne.n	80086ec <_svfiprintf_r+0x7c>
 80086ea:	e0a5      	b.n	8008838 <_svfiprintf_r+0x1c8>
 80086ec:	2201      	movs	r2, #1
 80086ee:	2300      	movs	r3, #0
 80086f0:	4252      	negs	r2, r2
 80086f2:	6062      	str	r2, [r4, #4]
 80086f4:	a904      	add	r1, sp, #16
 80086f6:	3254      	adds	r2, #84	; 0x54
 80086f8:	1852      	adds	r2, r2, r1
 80086fa:	1c6e      	adds	r6, r5, #1
 80086fc:	6023      	str	r3, [r4, #0]
 80086fe:	60e3      	str	r3, [r4, #12]
 8008700:	60a3      	str	r3, [r4, #8]
 8008702:	7013      	strb	r3, [r2, #0]
 8008704:	65a3      	str	r3, [r4, #88]	; 0x58
 8008706:	2205      	movs	r2, #5
 8008708:	7831      	ldrb	r1, [r6, #0]
 800870a:	4854      	ldr	r0, [pc, #336]	; (800885c <_svfiprintf_r+0x1ec>)
 800870c:	f000 fbcc 	bl	8008ea8 <memchr>
 8008710:	1c75      	adds	r5, r6, #1
 8008712:	2800      	cmp	r0, #0
 8008714:	d11f      	bne.n	8008756 <_svfiprintf_r+0xe6>
 8008716:	6822      	ldr	r2, [r4, #0]
 8008718:	06d3      	lsls	r3, r2, #27
 800871a:	d504      	bpl.n	8008726 <_svfiprintf_r+0xb6>
 800871c:	2353      	movs	r3, #83	; 0x53
 800871e:	a904      	add	r1, sp, #16
 8008720:	185b      	adds	r3, r3, r1
 8008722:	2120      	movs	r1, #32
 8008724:	7019      	strb	r1, [r3, #0]
 8008726:	0713      	lsls	r3, r2, #28
 8008728:	d504      	bpl.n	8008734 <_svfiprintf_r+0xc4>
 800872a:	2353      	movs	r3, #83	; 0x53
 800872c:	a904      	add	r1, sp, #16
 800872e:	185b      	adds	r3, r3, r1
 8008730:	212b      	movs	r1, #43	; 0x2b
 8008732:	7019      	strb	r1, [r3, #0]
 8008734:	7833      	ldrb	r3, [r6, #0]
 8008736:	2b2a      	cmp	r3, #42	; 0x2a
 8008738:	d016      	beq.n	8008768 <_svfiprintf_r+0xf8>
 800873a:	0035      	movs	r5, r6
 800873c:	2100      	movs	r1, #0
 800873e:	200a      	movs	r0, #10
 8008740:	68e3      	ldr	r3, [r4, #12]
 8008742:	782a      	ldrb	r2, [r5, #0]
 8008744:	1c6e      	adds	r6, r5, #1
 8008746:	3a30      	subs	r2, #48	; 0x30
 8008748:	2a09      	cmp	r2, #9
 800874a:	d94e      	bls.n	80087ea <_svfiprintf_r+0x17a>
 800874c:	2900      	cmp	r1, #0
 800874e:	d111      	bne.n	8008774 <_svfiprintf_r+0x104>
 8008750:	e017      	b.n	8008782 <_svfiprintf_r+0x112>
 8008752:	3501      	adds	r5, #1
 8008754:	e7b0      	b.n	80086b8 <_svfiprintf_r+0x48>
 8008756:	4b41      	ldr	r3, [pc, #260]	; (800885c <_svfiprintf_r+0x1ec>)
 8008758:	6822      	ldr	r2, [r4, #0]
 800875a:	1ac0      	subs	r0, r0, r3
 800875c:	2301      	movs	r3, #1
 800875e:	4083      	lsls	r3, r0
 8008760:	4313      	orrs	r3, r2
 8008762:	002e      	movs	r6, r5
 8008764:	6023      	str	r3, [r4, #0]
 8008766:	e7ce      	b.n	8008706 <_svfiprintf_r+0x96>
 8008768:	9b07      	ldr	r3, [sp, #28]
 800876a:	1d19      	adds	r1, r3, #4
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	9107      	str	r1, [sp, #28]
 8008770:	2b00      	cmp	r3, #0
 8008772:	db01      	blt.n	8008778 <_svfiprintf_r+0x108>
 8008774:	930b      	str	r3, [sp, #44]	; 0x2c
 8008776:	e004      	b.n	8008782 <_svfiprintf_r+0x112>
 8008778:	425b      	negs	r3, r3
 800877a:	60e3      	str	r3, [r4, #12]
 800877c:	2302      	movs	r3, #2
 800877e:	4313      	orrs	r3, r2
 8008780:	6023      	str	r3, [r4, #0]
 8008782:	782b      	ldrb	r3, [r5, #0]
 8008784:	2b2e      	cmp	r3, #46	; 0x2e
 8008786:	d10a      	bne.n	800879e <_svfiprintf_r+0x12e>
 8008788:	786b      	ldrb	r3, [r5, #1]
 800878a:	2b2a      	cmp	r3, #42	; 0x2a
 800878c:	d135      	bne.n	80087fa <_svfiprintf_r+0x18a>
 800878e:	9b07      	ldr	r3, [sp, #28]
 8008790:	3502      	adds	r5, #2
 8008792:	1d1a      	adds	r2, r3, #4
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	9207      	str	r2, [sp, #28]
 8008798:	2b00      	cmp	r3, #0
 800879a:	db2b      	blt.n	80087f4 <_svfiprintf_r+0x184>
 800879c:	9309      	str	r3, [sp, #36]	; 0x24
 800879e:	4e30      	ldr	r6, [pc, #192]	; (8008860 <_svfiprintf_r+0x1f0>)
 80087a0:	2203      	movs	r2, #3
 80087a2:	0030      	movs	r0, r6
 80087a4:	7829      	ldrb	r1, [r5, #0]
 80087a6:	f000 fb7f 	bl	8008ea8 <memchr>
 80087aa:	2800      	cmp	r0, #0
 80087ac:	d006      	beq.n	80087bc <_svfiprintf_r+0x14c>
 80087ae:	2340      	movs	r3, #64	; 0x40
 80087b0:	1b80      	subs	r0, r0, r6
 80087b2:	4083      	lsls	r3, r0
 80087b4:	6822      	ldr	r2, [r4, #0]
 80087b6:	3501      	adds	r5, #1
 80087b8:	4313      	orrs	r3, r2
 80087ba:	6023      	str	r3, [r4, #0]
 80087bc:	7829      	ldrb	r1, [r5, #0]
 80087be:	2206      	movs	r2, #6
 80087c0:	4828      	ldr	r0, [pc, #160]	; (8008864 <_svfiprintf_r+0x1f4>)
 80087c2:	1c6e      	adds	r6, r5, #1
 80087c4:	7621      	strb	r1, [r4, #24]
 80087c6:	f000 fb6f 	bl	8008ea8 <memchr>
 80087ca:	2800      	cmp	r0, #0
 80087cc:	d03c      	beq.n	8008848 <_svfiprintf_r+0x1d8>
 80087ce:	4b26      	ldr	r3, [pc, #152]	; (8008868 <_svfiprintf_r+0x1f8>)
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d125      	bne.n	8008820 <_svfiprintf_r+0x1b0>
 80087d4:	2207      	movs	r2, #7
 80087d6:	9b07      	ldr	r3, [sp, #28]
 80087d8:	3307      	adds	r3, #7
 80087da:	4393      	bics	r3, r2
 80087dc:	3308      	adds	r3, #8
 80087de:	9307      	str	r3, [sp, #28]
 80087e0:	6963      	ldr	r3, [r4, #20]
 80087e2:	9a04      	ldr	r2, [sp, #16]
 80087e4:	189b      	adds	r3, r3, r2
 80087e6:	6163      	str	r3, [r4, #20]
 80087e8:	e765      	b.n	80086b6 <_svfiprintf_r+0x46>
 80087ea:	4343      	muls	r3, r0
 80087ec:	0035      	movs	r5, r6
 80087ee:	2101      	movs	r1, #1
 80087f0:	189b      	adds	r3, r3, r2
 80087f2:	e7a6      	b.n	8008742 <_svfiprintf_r+0xd2>
 80087f4:	2301      	movs	r3, #1
 80087f6:	425b      	negs	r3, r3
 80087f8:	e7d0      	b.n	800879c <_svfiprintf_r+0x12c>
 80087fa:	2300      	movs	r3, #0
 80087fc:	200a      	movs	r0, #10
 80087fe:	001a      	movs	r2, r3
 8008800:	3501      	adds	r5, #1
 8008802:	6063      	str	r3, [r4, #4]
 8008804:	7829      	ldrb	r1, [r5, #0]
 8008806:	1c6e      	adds	r6, r5, #1
 8008808:	3930      	subs	r1, #48	; 0x30
 800880a:	2909      	cmp	r1, #9
 800880c:	d903      	bls.n	8008816 <_svfiprintf_r+0x1a6>
 800880e:	2b00      	cmp	r3, #0
 8008810:	d0c5      	beq.n	800879e <_svfiprintf_r+0x12e>
 8008812:	9209      	str	r2, [sp, #36]	; 0x24
 8008814:	e7c3      	b.n	800879e <_svfiprintf_r+0x12e>
 8008816:	4342      	muls	r2, r0
 8008818:	0035      	movs	r5, r6
 800881a:	2301      	movs	r3, #1
 800881c:	1852      	adds	r2, r2, r1
 800881e:	e7f1      	b.n	8008804 <_svfiprintf_r+0x194>
 8008820:	ab07      	add	r3, sp, #28
 8008822:	9300      	str	r3, [sp, #0]
 8008824:	003a      	movs	r2, r7
 8008826:	0021      	movs	r1, r4
 8008828:	4b10      	ldr	r3, [pc, #64]	; (800886c <_svfiprintf_r+0x1fc>)
 800882a:	9803      	ldr	r0, [sp, #12]
 800882c:	e000      	b.n	8008830 <_svfiprintf_r+0x1c0>
 800882e:	bf00      	nop
 8008830:	9004      	str	r0, [sp, #16]
 8008832:	9b04      	ldr	r3, [sp, #16]
 8008834:	3301      	adds	r3, #1
 8008836:	d1d3      	bne.n	80087e0 <_svfiprintf_r+0x170>
 8008838:	89bb      	ldrh	r3, [r7, #12]
 800883a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800883c:	065b      	lsls	r3, r3, #25
 800883e:	d400      	bmi.n	8008842 <_svfiprintf_r+0x1d2>
 8008840:	e72d      	b.n	800869e <_svfiprintf_r+0x2e>
 8008842:	2001      	movs	r0, #1
 8008844:	4240      	negs	r0, r0
 8008846:	e72a      	b.n	800869e <_svfiprintf_r+0x2e>
 8008848:	ab07      	add	r3, sp, #28
 800884a:	9300      	str	r3, [sp, #0]
 800884c:	003a      	movs	r2, r7
 800884e:	0021      	movs	r1, r4
 8008850:	4b06      	ldr	r3, [pc, #24]	; (800886c <_svfiprintf_r+0x1fc>)
 8008852:	9803      	ldr	r0, [sp, #12]
 8008854:	f000 f9de 	bl	8008c14 <_printf_i>
 8008858:	e7ea      	b.n	8008830 <_svfiprintf_r+0x1c0>
 800885a:	46c0      	nop			; (mov r8, r8)
 800885c:	0800f40c 	.word	0x0800f40c
 8008860:	0800f412 	.word	0x0800f412
 8008864:	0800f416 	.word	0x0800f416
 8008868:	00000000 	.word	0x00000000
 800886c:	080085ad 	.word	0x080085ad

08008870 <__sfputc_r>:
 8008870:	6893      	ldr	r3, [r2, #8]
 8008872:	b510      	push	{r4, lr}
 8008874:	3b01      	subs	r3, #1
 8008876:	6093      	str	r3, [r2, #8]
 8008878:	2b00      	cmp	r3, #0
 800887a:	da04      	bge.n	8008886 <__sfputc_r+0x16>
 800887c:	6994      	ldr	r4, [r2, #24]
 800887e:	42a3      	cmp	r3, r4
 8008880:	db07      	blt.n	8008892 <__sfputc_r+0x22>
 8008882:	290a      	cmp	r1, #10
 8008884:	d005      	beq.n	8008892 <__sfputc_r+0x22>
 8008886:	6813      	ldr	r3, [r2, #0]
 8008888:	1c58      	adds	r0, r3, #1
 800888a:	6010      	str	r0, [r2, #0]
 800888c:	7019      	strb	r1, [r3, #0]
 800888e:	0008      	movs	r0, r1
 8008890:	bd10      	pop	{r4, pc}
 8008892:	f7ff fd07 	bl	80082a4 <__swbuf_r>
 8008896:	0001      	movs	r1, r0
 8008898:	e7f9      	b.n	800888e <__sfputc_r+0x1e>

0800889a <__sfputs_r>:
 800889a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800889c:	0006      	movs	r6, r0
 800889e:	000f      	movs	r7, r1
 80088a0:	0014      	movs	r4, r2
 80088a2:	18d5      	adds	r5, r2, r3
 80088a4:	42ac      	cmp	r4, r5
 80088a6:	d101      	bne.n	80088ac <__sfputs_r+0x12>
 80088a8:	2000      	movs	r0, #0
 80088aa:	e007      	b.n	80088bc <__sfputs_r+0x22>
 80088ac:	7821      	ldrb	r1, [r4, #0]
 80088ae:	003a      	movs	r2, r7
 80088b0:	0030      	movs	r0, r6
 80088b2:	f7ff ffdd 	bl	8008870 <__sfputc_r>
 80088b6:	3401      	adds	r4, #1
 80088b8:	1c43      	adds	r3, r0, #1
 80088ba:	d1f3      	bne.n	80088a4 <__sfputs_r+0xa>
 80088bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080088c0 <_vfiprintf_r>:
 80088c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088c2:	b0a1      	sub	sp, #132	; 0x84
 80088c4:	0006      	movs	r6, r0
 80088c6:	000c      	movs	r4, r1
 80088c8:	001f      	movs	r7, r3
 80088ca:	9203      	str	r2, [sp, #12]
 80088cc:	2800      	cmp	r0, #0
 80088ce:	d004      	beq.n	80088da <_vfiprintf_r+0x1a>
 80088d0:	6983      	ldr	r3, [r0, #24]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d101      	bne.n	80088da <_vfiprintf_r+0x1a>
 80088d6:	f7ff fa2d 	bl	8007d34 <__sinit>
 80088da:	4b8e      	ldr	r3, [pc, #568]	; (8008b14 <_vfiprintf_r+0x254>)
 80088dc:	429c      	cmp	r4, r3
 80088de:	d11c      	bne.n	800891a <_vfiprintf_r+0x5a>
 80088e0:	6874      	ldr	r4, [r6, #4]
 80088e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80088e4:	07db      	lsls	r3, r3, #31
 80088e6:	d405      	bmi.n	80088f4 <_vfiprintf_r+0x34>
 80088e8:	89a3      	ldrh	r3, [r4, #12]
 80088ea:	059b      	lsls	r3, r3, #22
 80088ec:	d402      	bmi.n	80088f4 <_vfiprintf_r+0x34>
 80088ee:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80088f0:	f7ff fae5 	bl	8007ebe <__retarget_lock_acquire_recursive>
 80088f4:	89a3      	ldrh	r3, [r4, #12]
 80088f6:	071b      	lsls	r3, r3, #28
 80088f8:	d502      	bpl.n	8008900 <_vfiprintf_r+0x40>
 80088fa:	6923      	ldr	r3, [r4, #16]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d11d      	bne.n	800893c <_vfiprintf_r+0x7c>
 8008900:	0021      	movs	r1, r4
 8008902:	0030      	movs	r0, r6
 8008904:	f7ff fd38 	bl	8008378 <__swsetup_r>
 8008908:	2800      	cmp	r0, #0
 800890a:	d017      	beq.n	800893c <_vfiprintf_r+0x7c>
 800890c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800890e:	07db      	lsls	r3, r3, #31
 8008910:	d50d      	bpl.n	800892e <_vfiprintf_r+0x6e>
 8008912:	2001      	movs	r0, #1
 8008914:	4240      	negs	r0, r0
 8008916:	b021      	add	sp, #132	; 0x84
 8008918:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800891a:	4b7f      	ldr	r3, [pc, #508]	; (8008b18 <_vfiprintf_r+0x258>)
 800891c:	429c      	cmp	r4, r3
 800891e:	d101      	bne.n	8008924 <_vfiprintf_r+0x64>
 8008920:	68b4      	ldr	r4, [r6, #8]
 8008922:	e7de      	b.n	80088e2 <_vfiprintf_r+0x22>
 8008924:	4b7d      	ldr	r3, [pc, #500]	; (8008b1c <_vfiprintf_r+0x25c>)
 8008926:	429c      	cmp	r4, r3
 8008928:	d1db      	bne.n	80088e2 <_vfiprintf_r+0x22>
 800892a:	68f4      	ldr	r4, [r6, #12]
 800892c:	e7d9      	b.n	80088e2 <_vfiprintf_r+0x22>
 800892e:	89a3      	ldrh	r3, [r4, #12]
 8008930:	059b      	lsls	r3, r3, #22
 8008932:	d4ee      	bmi.n	8008912 <_vfiprintf_r+0x52>
 8008934:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008936:	f7ff fac3 	bl	8007ec0 <__retarget_lock_release_recursive>
 800893a:	e7ea      	b.n	8008912 <_vfiprintf_r+0x52>
 800893c:	2300      	movs	r3, #0
 800893e:	ad08      	add	r5, sp, #32
 8008940:	616b      	str	r3, [r5, #20]
 8008942:	3320      	adds	r3, #32
 8008944:	766b      	strb	r3, [r5, #25]
 8008946:	3310      	adds	r3, #16
 8008948:	76ab      	strb	r3, [r5, #26]
 800894a:	9707      	str	r7, [sp, #28]
 800894c:	9f03      	ldr	r7, [sp, #12]
 800894e:	783b      	ldrb	r3, [r7, #0]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d001      	beq.n	8008958 <_vfiprintf_r+0x98>
 8008954:	2b25      	cmp	r3, #37	; 0x25
 8008956:	d14e      	bne.n	80089f6 <_vfiprintf_r+0x136>
 8008958:	9b03      	ldr	r3, [sp, #12]
 800895a:	1afb      	subs	r3, r7, r3
 800895c:	9305      	str	r3, [sp, #20]
 800895e:	9b03      	ldr	r3, [sp, #12]
 8008960:	429f      	cmp	r7, r3
 8008962:	d00d      	beq.n	8008980 <_vfiprintf_r+0xc0>
 8008964:	9b05      	ldr	r3, [sp, #20]
 8008966:	0021      	movs	r1, r4
 8008968:	0030      	movs	r0, r6
 800896a:	9a03      	ldr	r2, [sp, #12]
 800896c:	f7ff ff95 	bl	800889a <__sfputs_r>
 8008970:	1c43      	adds	r3, r0, #1
 8008972:	d100      	bne.n	8008976 <_vfiprintf_r+0xb6>
 8008974:	e0b5      	b.n	8008ae2 <_vfiprintf_r+0x222>
 8008976:	696a      	ldr	r2, [r5, #20]
 8008978:	9b05      	ldr	r3, [sp, #20]
 800897a:	4694      	mov	ip, r2
 800897c:	4463      	add	r3, ip
 800897e:	616b      	str	r3, [r5, #20]
 8008980:	783b      	ldrb	r3, [r7, #0]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d100      	bne.n	8008988 <_vfiprintf_r+0xc8>
 8008986:	e0ac      	b.n	8008ae2 <_vfiprintf_r+0x222>
 8008988:	2201      	movs	r2, #1
 800898a:	1c7b      	adds	r3, r7, #1
 800898c:	9303      	str	r3, [sp, #12]
 800898e:	2300      	movs	r3, #0
 8008990:	4252      	negs	r2, r2
 8008992:	606a      	str	r2, [r5, #4]
 8008994:	a904      	add	r1, sp, #16
 8008996:	3254      	adds	r2, #84	; 0x54
 8008998:	1852      	adds	r2, r2, r1
 800899a:	602b      	str	r3, [r5, #0]
 800899c:	60eb      	str	r3, [r5, #12]
 800899e:	60ab      	str	r3, [r5, #8]
 80089a0:	7013      	strb	r3, [r2, #0]
 80089a2:	65ab      	str	r3, [r5, #88]	; 0x58
 80089a4:	9b03      	ldr	r3, [sp, #12]
 80089a6:	2205      	movs	r2, #5
 80089a8:	7819      	ldrb	r1, [r3, #0]
 80089aa:	485d      	ldr	r0, [pc, #372]	; (8008b20 <_vfiprintf_r+0x260>)
 80089ac:	f000 fa7c 	bl	8008ea8 <memchr>
 80089b0:	9b03      	ldr	r3, [sp, #12]
 80089b2:	1c5f      	adds	r7, r3, #1
 80089b4:	2800      	cmp	r0, #0
 80089b6:	d120      	bne.n	80089fa <_vfiprintf_r+0x13a>
 80089b8:	682a      	ldr	r2, [r5, #0]
 80089ba:	06d3      	lsls	r3, r2, #27
 80089bc:	d504      	bpl.n	80089c8 <_vfiprintf_r+0x108>
 80089be:	2353      	movs	r3, #83	; 0x53
 80089c0:	a904      	add	r1, sp, #16
 80089c2:	185b      	adds	r3, r3, r1
 80089c4:	2120      	movs	r1, #32
 80089c6:	7019      	strb	r1, [r3, #0]
 80089c8:	0713      	lsls	r3, r2, #28
 80089ca:	d504      	bpl.n	80089d6 <_vfiprintf_r+0x116>
 80089cc:	2353      	movs	r3, #83	; 0x53
 80089ce:	a904      	add	r1, sp, #16
 80089d0:	185b      	adds	r3, r3, r1
 80089d2:	212b      	movs	r1, #43	; 0x2b
 80089d4:	7019      	strb	r1, [r3, #0]
 80089d6:	9b03      	ldr	r3, [sp, #12]
 80089d8:	781b      	ldrb	r3, [r3, #0]
 80089da:	2b2a      	cmp	r3, #42	; 0x2a
 80089dc:	d016      	beq.n	8008a0c <_vfiprintf_r+0x14c>
 80089de:	2100      	movs	r1, #0
 80089e0:	68eb      	ldr	r3, [r5, #12]
 80089e2:	9f03      	ldr	r7, [sp, #12]
 80089e4:	783a      	ldrb	r2, [r7, #0]
 80089e6:	1c78      	adds	r0, r7, #1
 80089e8:	3a30      	subs	r2, #48	; 0x30
 80089ea:	4684      	mov	ip, r0
 80089ec:	2a09      	cmp	r2, #9
 80089ee:	d94f      	bls.n	8008a90 <_vfiprintf_r+0x1d0>
 80089f0:	2900      	cmp	r1, #0
 80089f2:	d111      	bne.n	8008a18 <_vfiprintf_r+0x158>
 80089f4:	e017      	b.n	8008a26 <_vfiprintf_r+0x166>
 80089f6:	3701      	adds	r7, #1
 80089f8:	e7a9      	b.n	800894e <_vfiprintf_r+0x8e>
 80089fa:	4b49      	ldr	r3, [pc, #292]	; (8008b20 <_vfiprintf_r+0x260>)
 80089fc:	682a      	ldr	r2, [r5, #0]
 80089fe:	1ac0      	subs	r0, r0, r3
 8008a00:	2301      	movs	r3, #1
 8008a02:	4083      	lsls	r3, r0
 8008a04:	4313      	orrs	r3, r2
 8008a06:	602b      	str	r3, [r5, #0]
 8008a08:	9703      	str	r7, [sp, #12]
 8008a0a:	e7cb      	b.n	80089a4 <_vfiprintf_r+0xe4>
 8008a0c:	9b07      	ldr	r3, [sp, #28]
 8008a0e:	1d19      	adds	r1, r3, #4
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	9107      	str	r1, [sp, #28]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	db01      	blt.n	8008a1c <_vfiprintf_r+0x15c>
 8008a18:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a1a:	e004      	b.n	8008a26 <_vfiprintf_r+0x166>
 8008a1c:	425b      	negs	r3, r3
 8008a1e:	60eb      	str	r3, [r5, #12]
 8008a20:	2302      	movs	r3, #2
 8008a22:	4313      	orrs	r3, r2
 8008a24:	602b      	str	r3, [r5, #0]
 8008a26:	783b      	ldrb	r3, [r7, #0]
 8008a28:	2b2e      	cmp	r3, #46	; 0x2e
 8008a2a:	d10a      	bne.n	8008a42 <_vfiprintf_r+0x182>
 8008a2c:	787b      	ldrb	r3, [r7, #1]
 8008a2e:	2b2a      	cmp	r3, #42	; 0x2a
 8008a30:	d137      	bne.n	8008aa2 <_vfiprintf_r+0x1e2>
 8008a32:	9b07      	ldr	r3, [sp, #28]
 8008a34:	3702      	adds	r7, #2
 8008a36:	1d1a      	adds	r2, r3, #4
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	9207      	str	r2, [sp, #28]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	db2d      	blt.n	8008a9c <_vfiprintf_r+0x1dc>
 8008a40:	9309      	str	r3, [sp, #36]	; 0x24
 8008a42:	2203      	movs	r2, #3
 8008a44:	7839      	ldrb	r1, [r7, #0]
 8008a46:	4837      	ldr	r0, [pc, #220]	; (8008b24 <_vfiprintf_r+0x264>)
 8008a48:	f000 fa2e 	bl	8008ea8 <memchr>
 8008a4c:	2800      	cmp	r0, #0
 8008a4e:	d007      	beq.n	8008a60 <_vfiprintf_r+0x1a0>
 8008a50:	4b34      	ldr	r3, [pc, #208]	; (8008b24 <_vfiprintf_r+0x264>)
 8008a52:	682a      	ldr	r2, [r5, #0]
 8008a54:	1ac0      	subs	r0, r0, r3
 8008a56:	2340      	movs	r3, #64	; 0x40
 8008a58:	4083      	lsls	r3, r0
 8008a5a:	4313      	orrs	r3, r2
 8008a5c:	3701      	adds	r7, #1
 8008a5e:	602b      	str	r3, [r5, #0]
 8008a60:	7839      	ldrb	r1, [r7, #0]
 8008a62:	1c7b      	adds	r3, r7, #1
 8008a64:	2206      	movs	r2, #6
 8008a66:	4830      	ldr	r0, [pc, #192]	; (8008b28 <_vfiprintf_r+0x268>)
 8008a68:	9303      	str	r3, [sp, #12]
 8008a6a:	7629      	strb	r1, [r5, #24]
 8008a6c:	f000 fa1c 	bl	8008ea8 <memchr>
 8008a70:	2800      	cmp	r0, #0
 8008a72:	d045      	beq.n	8008b00 <_vfiprintf_r+0x240>
 8008a74:	4b2d      	ldr	r3, [pc, #180]	; (8008b2c <_vfiprintf_r+0x26c>)
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d127      	bne.n	8008aca <_vfiprintf_r+0x20a>
 8008a7a:	2207      	movs	r2, #7
 8008a7c:	9b07      	ldr	r3, [sp, #28]
 8008a7e:	3307      	adds	r3, #7
 8008a80:	4393      	bics	r3, r2
 8008a82:	3308      	adds	r3, #8
 8008a84:	9307      	str	r3, [sp, #28]
 8008a86:	696b      	ldr	r3, [r5, #20]
 8008a88:	9a04      	ldr	r2, [sp, #16]
 8008a8a:	189b      	adds	r3, r3, r2
 8008a8c:	616b      	str	r3, [r5, #20]
 8008a8e:	e75d      	b.n	800894c <_vfiprintf_r+0x8c>
 8008a90:	210a      	movs	r1, #10
 8008a92:	434b      	muls	r3, r1
 8008a94:	4667      	mov	r7, ip
 8008a96:	189b      	adds	r3, r3, r2
 8008a98:	3909      	subs	r1, #9
 8008a9a:	e7a3      	b.n	80089e4 <_vfiprintf_r+0x124>
 8008a9c:	2301      	movs	r3, #1
 8008a9e:	425b      	negs	r3, r3
 8008aa0:	e7ce      	b.n	8008a40 <_vfiprintf_r+0x180>
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	001a      	movs	r2, r3
 8008aa6:	3701      	adds	r7, #1
 8008aa8:	606b      	str	r3, [r5, #4]
 8008aaa:	7839      	ldrb	r1, [r7, #0]
 8008aac:	1c78      	adds	r0, r7, #1
 8008aae:	3930      	subs	r1, #48	; 0x30
 8008ab0:	4684      	mov	ip, r0
 8008ab2:	2909      	cmp	r1, #9
 8008ab4:	d903      	bls.n	8008abe <_vfiprintf_r+0x1fe>
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d0c3      	beq.n	8008a42 <_vfiprintf_r+0x182>
 8008aba:	9209      	str	r2, [sp, #36]	; 0x24
 8008abc:	e7c1      	b.n	8008a42 <_vfiprintf_r+0x182>
 8008abe:	230a      	movs	r3, #10
 8008ac0:	435a      	muls	r2, r3
 8008ac2:	4667      	mov	r7, ip
 8008ac4:	1852      	adds	r2, r2, r1
 8008ac6:	3b09      	subs	r3, #9
 8008ac8:	e7ef      	b.n	8008aaa <_vfiprintf_r+0x1ea>
 8008aca:	ab07      	add	r3, sp, #28
 8008acc:	9300      	str	r3, [sp, #0]
 8008ace:	0022      	movs	r2, r4
 8008ad0:	0029      	movs	r1, r5
 8008ad2:	0030      	movs	r0, r6
 8008ad4:	4b16      	ldr	r3, [pc, #88]	; (8008b30 <_vfiprintf_r+0x270>)
 8008ad6:	e000      	b.n	8008ada <_vfiprintf_r+0x21a>
 8008ad8:	bf00      	nop
 8008ada:	9004      	str	r0, [sp, #16]
 8008adc:	9b04      	ldr	r3, [sp, #16]
 8008ade:	3301      	adds	r3, #1
 8008ae0:	d1d1      	bne.n	8008a86 <_vfiprintf_r+0x1c6>
 8008ae2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ae4:	07db      	lsls	r3, r3, #31
 8008ae6:	d405      	bmi.n	8008af4 <_vfiprintf_r+0x234>
 8008ae8:	89a3      	ldrh	r3, [r4, #12]
 8008aea:	059b      	lsls	r3, r3, #22
 8008aec:	d402      	bmi.n	8008af4 <_vfiprintf_r+0x234>
 8008aee:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008af0:	f7ff f9e6 	bl	8007ec0 <__retarget_lock_release_recursive>
 8008af4:	89a3      	ldrh	r3, [r4, #12]
 8008af6:	065b      	lsls	r3, r3, #25
 8008af8:	d500      	bpl.n	8008afc <_vfiprintf_r+0x23c>
 8008afa:	e70a      	b.n	8008912 <_vfiprintf_r+0x52>
 8008afc:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008afe:	e70a      	b.n	8008916 <_vfiprintf_r+0x56>
 8008b00:	ab07      	add	r3, sp, #28
 8008b02:	9300      	str	r3, [sp, #0]
 8008b04:	0022      	movs	r2, r4
 8008b06:	0029      	movs	r1, r5
 8008b08:	0030      	movs	r0, r6
 8008b0a:	4b09      	ldr	r3, [pc, #36]	; (8008b30 <_vfiprintf_r+0x270>)
 8008b0c:	f000 f882 	bl	8008c14 <_printf_i>
 8008b10:	e7e3      	b.n	8008ada <_vfiprintf_r+0x21a>
 8008b12:	46c0      	nop			; (mov r8, r8)
 8008b14:	0800f3c8 	.word	0x0800f3c8
 8008b18:	0800f3e8 	.word	0x0800f3e8
 8008b1c:	0800f3a8 	.word	0x0800f3a8
 8008b20:	0800f40c 	.word	0x0800f40c
 8008b24:	0800f412 	.word	0x0800f412
 8008b28:	0800f416 	.word	0x0800f416
 8008b2c:	00000000 	.word	0x00000000
 8008b30:	0800889b 	.word	0x0800889b

08008b34 <_printf_common>:
 8008b34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b36:	0015      	movs	r5, r2
 8008b38:	9301      	str	r3, [sp, #4]
 8008b3a:	688a      	ldr	r2, [r1, #8]
 8008b3c:	690b      	ldr	r3, [r1, #16]
 8008b3e:	000c      	movs	r4, r1
 8008b40:	9000      	str	r0, [sp, #0]
 8008b42:	4293      	cmp	r3, r2
 8008b44:	da00      	bge.n	8008b48 <_printf_common+0x14>
 8008b46:	0013      	movs	r3, r2
 8008b48:	0022      	movs	r2, r4
 8008b4a:	602b      	str	r3, [r5, #0]
 8008b4c:	3243      	adds	r2, #67	; 0x43
 8008b4e:	7812      	ldrb	r2, [r2, #0]
 8008b50:	2a00      	cmp	r2, #0
 8008b52:	d001      	beq.n	8008b58 <_printf_common+0x24>
 8008b54:	3301      	adds	r3, #1
 8008b56:	602b      	str	r3, [r5, #0]
 8008b58:	6823      	ldr	r3, [r4, #0]
 8008b5a:	069b      	lsls	r3, r3, #26
 8008b5c:	d502      	bpl.n	8008b64 <_printf_common+0x30>
 8008b5e:	682b      	ldr	r3, [r5, #0]
 8008b60:	3302      	adds	r3, #2
 8008b62:	602b      	str	r3, [r5, #0]
 8008b64:	6822      	ldr	r2, [r4, #0]
 8008b66:	2306      	movs	r3, #6
 8008b68:	0017      	movs	r7, r2
 8008b6a:	401f      	ands	r7, r3
 8008b6c:	421a      	tst	r2, r3
 8008b6e:	d027      	beq.n	8008bc0 <_printf_common+0x8c>
 8008b70:	0023      	movs	r3, r4
 8008b72:	3343      	adds	r3, #67	; 0x43
 8008b74:	781b      	ldrb	r3, [r3, #0]
 8008b76:	1e5a      	subs	r2, r3, #1
 8008b78:	4193      	sbcs	r3, r2
 8008b7a:	6822      	ldr	r2, [r4, #0]
 8008b7c:	0692      	lsls	r2, r2, #26
 8008b7e:	d430      	bmi.n	8008be2 <_printf_common+0xae>
 8008b80:	0022      	movs	r2, r4
 8008b82:	9901      	ldr	r1, [sp, #4]
 8008b84:	9800      	ldr	r0, [sp, #0]
 8008b86:	9e08      	ldr	r6, [sp, #32]
 8008b88:	3243      	adds	r2, #67	; 0x43
 8008b8a:	47b0      	blx	r6
 8008b8c:	1c43      	adds	r3, r0, #1
 8008b8e:	d025      	beq.n	8008bdc <_printf_common+0xa8>
 8008b90:	2306      	movs	r3, #6
 8008b92:	6820      	ldr	r0, [r4, #0]
 8008b94:	682a      	ldr	r2, [r5, #0]
 8008b96:	68e1      	ldr	r1, [r4, #12]
 8008b98:	2500      	movs	r5, #0
 8008b9a:	4003      	ands	r3, r0
 8008b9c:	2b04      	cmp	r3, #4
 8008b9e:	d103      	bne.n	8008ba8 <_printf_common+0x74>
 8008ba0:	1a8d      	subs	r5, r1, r2
 8008ba2:	43eb      	mvns	r3, r5
 8008ba4:	17db      	asrs	r3, r3, #31
 8008ba6:	401d      	ands	r5, r3
 8008ba8:	68a3      	ldr	r3, [r4, #8]
 8008baa:	6922      	ldr	r2, [r4, #16]
 8008bac:	4293      	cmp	r3, r2
 8008bae:	dd01      	ble.n	8008bb4 <_printf_common+0x80>
 8008bb0:	1a9b      	subs	r3, r3, r2
 8008bb2:	18ed      	adds	r5, r5, r3
 8008bb4:	2700      	movs	r7, #0
 8008bb6:	42bd      	cmp	r5, r7
 8008bb8:	d120      	bne.n	8008bfc <_printf_common+0xc8>
 8008bba:	2000      	movs	r0, #0
 8008bbc:	e010      	b.n	8008be0 <_printf_common+0xac>
 8008bbe:	3701      	adds	r7, #1
 8008bc0:	68e3      	ldr	r3, [r4, #12]
 8008bc2:	682a      	ldr	r2, [r5, #0]
 8008bc4:	1a9b      	subs	r3, r3, r2
 8008bc6:	42bb      	cmp	r3, r7
 8008bc8:	ddd2      	ble.n	8008b70 <_printf_common+0x3c>
 8008bca:	0022      	movs	r2, r4
 8008bcc:	2301      	movs	r3, #1
 8008bce:	9901      	ldr	r1, [sp, #4]
 8008bd0:	9800      	ldr	r0, [sp, #0]
 8008bd2:	9e08      	ldr	r6, [sp, #32]
 8008bd4:	3219      	adds	r2, #25
 8008bd6:	47b0      	blx	r6
 8008bd8:	1c43      	adds	r3, r0, #1
 8008bda:	d1f0      	bne.n	8008bbe <_printf_common+0x8a>
 8008bdc:	2001      	movs	r0, #1
 8008bde:	4240      	negs	r0, r0
 8008be0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008be2:	2030      	movs	r0, #48	; 0x30
 8008be4:	18e1      	adds	r1, r4, r3
 8008be6:	3143      	adds	r1, #67	; 0x43
 8008be8:	7008      	strb	r0, [r1, #0]
 8008bea:	0021      	movs	r1, r4
 8008bec:	1c5a      	adds	r2, r3, #1
 8008bee:	3145      	adds	r1, #69	; 0x45
 8008bf0:	7809      	ldrb	r1, [r1, #0]
 8008bf2:	18a2      	adds	r2, r4, r2
 8008bf4:	3243      	adds	r2, #67	; 0x43
 8008bf6:	3302      	adds	r3, #2
 8008bf8:	7011      	strb	r1, [r2, #0]
 8008bfa:	e7c1      	b.n	8008b80 <_printf_common+0x4c>
 8008bfc:	0022      	movs	r2, r4
 8008bfe:	2301      	movs	r3, #1
 8008c00:	9901      	ldr	r1, [sp, #4]
 8008c02:	9800      	ldr	r0, [sp, #0]
 8008c04:	9e08      	ldr	r6, [sp, #32]
 8008c06:	321a      	adds	r2, #26
 8008c08:	47b0      	blx	r6
 8008c0a:	1c43      	adds	r3, r0, #1
 8008c0c:	d0e6      	beq.n	8008bdc <_printf_common+0xa8>
 8008c0e:	3701      	adds	r7, #1
 8008c10:	e7d1      	b.n	8008bb6 <_printf_common+0x82>
	...

08008c14 <_printf_i>:
 8008c14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c16:	b08b      	sub	sp, #44	; 0x2c
 8008c18:	9206      	str	r2, [sp, #24]
 8008c1a:	000a      	movs	r2, r1
 8008c1c:	3243      	adds	r2, #67	; 0x43
 8008c1e:	9307      	str	r3, [sp, #28]
 8008c20:	9005      	str	r0, [sp, #20]
 8008c22:	9204      	str	r2, [sp, #16]
 8008c24:	7e0a      	ldrb	r2, [r1, #24]
 8008c26:	000c      	movs	r4, r1
 8008c28:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008c2a:	2a78      	cmp	r2, #120	; 0x78
 8008c2c:	d806      	bhi.n	8008c3c <_printf_i+0x28>
 8008c2e:	2a62      	cmp	r2, #98	; 0x62
 8008c30:	d808      	bhi.n	8008c44 <_printf_i+0x30>
 8008c32:	2a00      	cmp	r2, #0
 8008c34:	d100      	bne.n	8008c38 <_printf_i+0x24>
 8008c36:	e0c0      	b.n	8008dba <_printf_i+0x1a6>
 8008c38:	2a58      	cmp	r2, #88	; 0x58
 8008c3a:	d052      	beq.n	8008ce2 <_printf_i+0xce>
 8008c3c:	0026      	movs	r6, r4
 8008c3e:	3642      	adds	r6, #66	; 0x42
 8008c40:	7032      	strb	r2, [r6, #0]
 8008c42:	e022      	b.n	8008c8a <_printf_i+0x76>
 8008c44:	0010      	movs	r0, r2
 8008c46:	3863      	subs	r0, #99	; 0x63
 8008c48:	2815      	cmp	r0, #21
 8008c4a:	d8f7      	bhi.n	8008c3c <_printf_i+0x28>
 8008c4c:	f7f7 fa64 	bl	8000118 <__gnu_thumb1_case_shi>
 8008c50:	001f0016 	.word	0x001f0016
 8008c54:	fff6fff6 	.word	0xfff6fff6
 8008c58:	fff6fff6 	.word	0xfff6fff6
 8008c5c:	fff6001f 	.word	0xfff6001f
 8008c60:	fff6fff6 	.word	0xfff6fff6
 8008c64:	00a8fff6 	.word	0x00a8fff6
 8008c68:	009a0036 	.word	0x009a0036
 8008c6c:	fff6fff6 	.word	0xfff6fff6
 8008c70:	fff600b9 	.word	0xfff600b9
 8008c74:	fff60036 	.word	0xfff60036
 8008c78:	009efff6 	.word	0x009efff6
 8008c7c:	0026      	movs	r6, r4
 8008c7e:	681a      	ldr	r2, [r3, #0]
 8008c80:	3642      	adds	r6, #66	; 0x42
 8008c82:	1d11      	adds	r1, r2, #4
 8008c84:	6019      	str	r1, [r3, #0]
 8008c86:	6813      	ldr	r3, [r2, #0]
 8008c88:	7033      	strb	r3, [r6, #0]
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	e0a7      	b.n	8008dde <_printf_i+0x1ca>
 8008c8e:	6808      	ldr	r0, [r1, #0]
 8008c90:	6819      	ldr	r1, [r3, #0]
 8008c92:	1d0a      	adds	r2, r1, #4
 8008c94:	0605      	lsls	r5, r0, #24
 8008c96:	d50b      	bpl.n	8008cb0 <_printf_i+0x9c>
 8008c98:	680d      	ldr	r5, [r1, #0]
 8008c9a:	601a      	str	r2, [r3, #0]
 8008c9c:	2d00      	cmp	r5, #0
 8008c9e:	da03      	bge.n	8008ca8 <_printf_i+0x94>
 8008ca0:	232d      	movs	r3, #45	; 0x2d
 8008ca2:	9a04      	ldr	r2, [sp, #16]
 8008ca4:	426d      	negs	r5, r5
 8008ca6:	7013      	strb	r3, [r2, #0]
 8008ca8:	4b61      	ldr	r3, [pc, #388]	; (8008e30 <_printf_i+0x21c>)
 8008caa:	270a      	movs	r7, #10
 8008cac:	9303      	str	r3, [sp, #12]
 8008cae:	e032      	b.n	8008d16 <_printf_i+0x102>
 8008cb0:	680d      	ldr	r5, [r1, #0]
 8008cb2:	601a      	str	r2, [r3, #0]
 8008cb4:	0641      	lsls	r1, r0, #25
 8008cb6:	d5f1      	bpl.n	8008c9c <_printf_i+0x88>
 8008cb8:	b22d      	sxth	r5, r5
 8008cba:	e7ef      	b.n	8008c9c <_printf_i+0x88>
 8008cbc:	680d      	ldr	r5, [r1, #0]
 8008cbe:	6819      	ldr	r1, [r3, #0]
 8008cc0:	1d08      	adds	r0, r1, #4
 8008cc2:	6018      	str	r0, [r3, #0]
 8008cc4:	062e      	lsls	r6, r5, #24
 8008cc6:	d501      	bpl.n	8008ccc <_printf_i+0xb8>
 8008cc8:	680d      	ldr	r5, [r1, #0]
 8008cca:	e003      	b.n	8008cd4 <_printf_i+0xc0>
 8008ccc:	066d      	lsls	r5, r5, #25
 8008cce:	d5fb      	bpl.n	8008cc8 <_printf_i+0xb4>
 8008cd0:	680d      	ldr	r5, [r1, #0]
 8008cd2:	b2ad      	uxth	r5, r5
 8008cd4:	4b56      	ldr	r3, [pc, #344]	; (8008e30 <_printf_i+0x21c>)
 8008cd6:	270a      	movs	r7, #10
 8008cd8:	9303      	str	r3, [sp, #12]
 8008cda:	2a6f      	cmp	r2, #111	; 0x6f
 8008cdc:	d117      	bne.n	8008d0e <_printf_i+0xfa>
 8008cde:	2708      	movs	r7, #8
 8008ce0:	e015      	b.n	8008d0e <_printf_i+0xfa>
 8008ce2:	3145      	adds	r1, #69	; 0x45
 8008ce4:	700a      	strb	r2, [r1, #0]
 8008ce6:	4a52      	ldr	r2, [pc, #328]	; (8008e30 <_printf_i+0x21c>)
 8008ce8:	9203      	str	r2, [sp, #12]
 8008cea:	681a      	ldr	r2, [r3, #0]
 8008cec:	6821      	ldr	r1, [r4, #0]
 8008cee:	ca20      	ldmia	r2!, {r5}
 8008cf0:	601a      	str	r2, [r3, #0]
 8008cf2:	0608      	lsls	r0, r1, #24
 8008cf4:	d550      	bpl.n	8008d98 <_printf_i+0x184>
 8008cf6:	07cb      	lsls	r3, r1, #31
 8008cf8:	d502      	bpl.n	8008d00 <_printf_i+0xec>
 8008cfa:	2320      	movs	r3, #32
 8008cfc:	4319      	orrs	r1, r3
 8008cfe:	6021      	str	r1, [r4, #0]
 8008d00:	2710      	movs	r7, #16
 8008d02:	2d00      	cmp	r5, #0
 8008d04:	d103      	bne.n	8008d0e <_printf_i+0xfa>
 8008d06:	2320      	movs	r3, #32
 8008d08:	6822      	ldr	r2, [r4, #0]
 8008d0a:	439a      	bics	r2, r3
 8008d0c:	6022      	str	r2, [r4, #0]
 8008d0e:	0023      	movs	r3, r4
 8008d10:	2200      	movs	r2, #0
 8008d12:	3343      	adds	r3, #67	; 0x43
 8008d14:	701a      	strb	r2, [r3, #0]
 8008d16:	6863      	ldr	r3, [r4, #4]
 8008d18:	60a3      	str	r3, [r4, #8]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	db03      	blt.n	8008d26 <_printf_i+0x112>
 8008d1e:	2204      	movs	r2, #4
 8008d20:	6821      	ldr	r1, [r4, #0]
 8008d22:	4391      	bics	r1, r2
 8008d24:	6021      	str	r1, [r4, #0]
 8008d26:	2d00      	cmp	r5, #0
 8008d28:	d102      	bne.n	8008d30 <_printf_i+0x11c>
 8008d2a:	9e04      	ldr	r6, [sp, #16]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d00c      	beq.n	8008d4a <_printf_i+0x136>
 8008d30:	9e04      	ldr	r6, [sp, #16]
 8008d32:	0028      	movs	r0, r5
 8008d34:	0039      	movs	r1, r7
 8008d36:	f7f7 fa7f 	bl	8000238 <__aeabi_uidivmod>
 8008d3a:	9b03      	ldr	r3, [sp, #12]
 8008d3c:	3e01      	subs	r6, #1
 8008d3e:	5c5b      	ldrb	r3, [r3, r1]
 8008d40:	7033      	strb	r3, [r6, #0]
 8008d42:	002b      	movs	r3, r5
 8008d44:	0005      	movs	r5, r0
 8008d46:	429f      	cmp	r7, r3
 8008d48:	d9f3      	bls.n	8008d32 <_printf_i+0x11e>
 8008d4a:	2f08      	cmp	r7, #8
 8008d4c:	d109      	bne.n	8008d62 <_printf_i+0x14e>
 8008d4e:	6823      	ldr	r3, [r4, #0]
 8008d50:	07db      	lsls	r3, r3, #31
 8008d52:	d506      	bpl.n	8008d62 <_printf_i+0x14e>
 8008d54:	6863      	ldr	r3, [r4, #4]
 8008d56:	6922      	ldr	r2, [r4, #16]
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	dc02      	bgt.n	8008d62 <_printf_i+0x14e>
 8008d5c:	2330      	movs	r3, #48	; 0x30
 8008d5e:	3e01      	subs	r6, #1
 8008d60:	7033      	strb	r3, [r6, #0]
 8008d62:	9b04      	ldr	r3, [sp, #16]
 8008d64:	1b9b      	subs	r3, r3, r6
 8008d66:	6123      	str	r3, [r4, #16]
 8008d68:	9b07      	ldr	r3, [sp, #28]
 8008d6a:	0021      	movs	r1, r4
 8008d6c:	9300      	str	r3, [sp, #0]
 8008d6e:	9805      	ldr	r0, [sp, #20]
 8008d70:	9b06      	ldr	r3, [sp, #24]
 8008d72:	aa09      	add	r2, sp, #36	; 0x24
 8008d74:	f7ff fede 	bl	8008b34 <_printf_common>
 8008d78:	1c43      	adds	r3, r0, #1
 8008d7a:	d135      	bne.n	8008de8 <_printf_i+0x1d4>
 8008d7c:	2001      	movs	r0, #1
 8008d7e:	4240      	negs	r0, r0
 8008d80:	b00b      	add	sp, #44	; 0x2c
 8008d82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d84:	2220      	movs	r2, #32
 8008d86:	6809      	ldr	r1, [r1, #0]
 8008d88:	430a      	orrs	r2, r1
 8008d8a:	6022      	str	r2, [r4, #0]
 8008d8c:	0022      	movs	r2, r4
 8008d8e:	2178      	movs	r1, #120	; 0x78
 8008d90:	3245      	adds	r2, #69	; 0x45
 8008d92:	7011      	strb	r1, [r2, #0]
 8008d94:	4a27      	ldr	r2, [pc, #156]	; (8008e34 <_printf_i+0x220>)
 8008d96:	e7a7      	b.n	8008ce8 <_printf_i+0xd4>
 8008d98:	0648      	lsls	r0, r1, #25
 8008d9a:	d5ac      	bpl.n	8008cf6 <_printf_i+0xe2>
 8008d9c:	b2ad      	uxth	r5, r5
 8008d9e:	e7aa      	b.n	8008cf6 <_printf_i+0xe2>
 8008da0:	681a      	ldr	r2, [r3, #0]
 8008da2:	680d      	ldr	r5, [r1, #0]
 8008da4:	1d10      	adds	r0, r2, #4
 8008da6:	6949      	ldr	r1, [r1, #20]
 8008da8:	6018      	str	r0, [r3, #0]
 8008daa:	6813      	ldr	r3, [r2, #0]
 8008dac:	062e      	lsls	r6, r5, #24
 8008dae:	d501      	bpl.n	8008db4 <_printf_i+0x1a0>
 8008db0:	6019      	str	r1, [r3, #0]
 8008db2:	e002      	b.n	8008dba <_printf_i+0x1a6>
 8008db4:	066d      	lsls	r5, r5, #25
 8008db6:	d5fb      	bpl.n	8008db0 <_printf_i+0x19c>
 8008db8:	8019      	strh	r1, [r3, #0]
 8008dba:	2300      	movs	r3, #0
 8008dbc:	9e04      	ldr	r6, [sp, #16]
 8008dbe:	6123      	str	r3, [r4, #16]
 8008dc0:	e7d2      	b.n	8008d68 <_printf_i+0x154>
 8008dc2:	681a      	ldr	r2, [r3, #0]
 8008dc4:	1d11      	adds	r1, r2, #4
 8008dc6:	6019      	str	r1, [r3, #0]
 8008dc8:	6816      	ldr	r6, [r2, #0]
 8008dca:	2100      	movs	r1, #0
 8008dcc:	0030      	movs	r0, r6
 8008dce:	6862      	ldr	r2, [r4, #4]
 8008dd0:	f000 f86a 	bl	8008ea8 <memchr>
 8008dd4:	2800      	cmp	r0, #0
 8008dd6:	d001      	beq.n	8008ddc <_printf_i+0x1c8>
 8008dd8:	1b80      	subs	r0, r0, r6
 8008dda:	6060      	str	r0, [r4, #4]
 8008ddc:	6863      	ldr	r3, [r4, #4]
 8008dde:	6123      	str	r3, [r4, #16]
 8008de0:	2300      	movs	r3, #0
 8008de2:	9a04      	ldr	r2, [sp, #16]
 8008de4:	7013      	strb	r3, [r2, #0]
 8008de6:	e7bf      	b.n	8008d68 <_printf_i+0x154>
 8008de8:	6923      	ldr	r3, [r4, #16]
 8008dea:	0032      	movs	r2, r6
 8008dec:	9906      	ldr	r1, [sp, #24]
 8008dee:	9805      	ldr	r0, [sp, #20]
 8008df0:	9d07      	ldr	r5, [sp, #28]
 8008df2:	47a8      	blx	r5
 8008df4:	1c43      	adds	r3, r0, #1
 8008df6:	d0c1      	beq.n	8008d7c <_printf_i+0x168>
 8008df8:	6823      	ldr	r3, [r4, #0]
 8008dfa:	079b      	lsls	r3, r3, #30
 8008dfc:	d415      	bmi.n	8008e2a <_printf_i+0x216>
 8008dfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e00:	68e0      	ldr	r0, [r4, #12]
 8008e02:	4298      	cmp	r0, r3
 8008e04:	dabc      	bge.n	8008d80 <_printf_i+0x16c>
 8008e06:	0018      	movs	r0, r3
 8008e08:	e7ba      	b.n	8008d80 <_printf_i+0x16c>
 8008e0a:	0022      	movs	r2, r4
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	9906      	ldr	r1, [sp, #24]
 8008e10:	9805      	ldr	r0, [sp, #20]
 8008e12:	9e07      	ldr	r6, [sp, #28]
 8008e14:	3219      	adds	r2, #25
 8008e16:	47b0      	blx	r6
 8008e18:	1c43      	adds	r3, r0, #1
 8008e1a:	d0af      	beq.n	8008d7c <_printf_i+0x168>
 8008e1c:	3501      	adds	r5, #1
 8008e1e:	68e3      	ldr	r3, [r4, #12]
 8008e20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e22:	1a9b      	subs	r3, r3, r2
 8008e24:	42ab      	cmp	r3, r5
 8008e26:	dcf0      	bgt.n	8008e0a <_printf_i+0x1f6>
 8008e28:	e7e9      	b.n	8008dfe <_printf_i+0x1ea>
 8008e2a:	2500      	movs	r5, #0
 8008e2c:	e7f7      	b.n	8008e1e <_printf_i+0x20a>
 8008e2e:	46c0      	nop			; (mov r8, r8)
 8008e30:	0800f41d 	.word	0x0800f41d
 8008e34:	0800f42e 	.word	0x0800f42e

08008e38 <_read_r>:
 8008e38:	b570      	push	{r4, r5, r6, lr}
 8008e3a:	0004      	movs	r4, r0
 8008e3c:	0008      	movs	r0, r1
 8008e3e:	0011      	movs	r1, r2
 8008e40:	001a      	movs	r2, r3
 8008e42:	2300      	movs	r3, #0
 8008e44:	4d05      	ldr	r5, [pc, #20]	; (8008e5c <_read_r+0x24>)
 8008e46:	602b      	str	r3, [r5, #0]
 8008e48:	f7fd f9bc 	bl	80061c4 <_read>
 8008e4c:	1c43      	adds	r3, r0, #1
 8008e4e:	d103      	bne.n	8008e58 <_read_r+0x20>
 8008e50:	682b      	ldr	r3, [r5, #0]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d000      	beq.n	8008e58 <_read_r+0x20>
 8008e56:	6023      	str	r3, [r4, #0]
 8008e58:	bd70      	pop	{r4, r5, r6, pc}
 8008e5a:	46c0      	nop			; (mov r8, r8)
 8008e5c:	200003f0 	.word	0x200003f0

08008e60 <_fstat_r>:
 8008e60:	2300      	movs	r3, #0
 8008e62:	b570      	push	{r4, r5, r6, lr}
 8008e64:	4d06      	ldr	r5, [pc, #24]	; (8008e80 <_fstat_r+0x20>)
 8008e66:	0004      	movs	r4, r0
 8008e68:	0008      	movs	r0, r1
 8008e6a:	0011      	movs	r1, r2
 8008e6c:	602b      	str	r3, [r5, #0]
 8008e6e:	f7fd f9ec 	bl	800624a <_fstat>
 8008e72:	1c43      	adds	r3, r0, #1
 8008e74:	d103      	bne.n	8008e7e <_fstat_r+0x1e>
 8008e76:	682b      	ldr	r3, [r5, #0]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d000      	beq.n	8008e7e <_fstat_r+0x1e>
 8008e7c:	6023      	str	r3, [r4, #0]
 8008e7e:	bd70      	pop	{r4, r5, r6, pc}
 8008e80:	200003f0 	.word	0x200003f0

08008e84 <_isatty_r>:
 8008e84:	2300      	movs	r3, #0
 8008e86:	b570      	push	{r4, r5, r6, lr}
 8008e88:	4d06      	ldr	r5, [pc, #24]	; (8008ea4 <_isatty_r+0x20>)
 8008e8a:	0004      	movs	r4, r0
 8008e8c:	0008      	movs	r0, r1
 8008e8e:	602b      	str	r3, [r5, #0]
 8008e90:	f7fd f9e9 	bl	8006266 <_isatty>
 8008e94:	1c43      	adds	r3, r0, #1
 8008e96:	d103      	bne.n	8008ea0 <_isatty_r+0x1c>
 8008e98:	682b      	ldr	r3, [r5, #0]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d000      	beq.n	8008ea0 <_isatty_r+0x1c>
 8008e9e:	6023      	str	r3, [r4, #0]
 8008ea0:	bd70      	pop	{r4, r5, r6, pc}
 8008ea2:	46c0      	nop			; (mov r8, r8)
 8008ea4:	200003f0 	.word	0x200003f0

08008ea8 <memchr>:
 8008ea8:	b2c9      	uxtb	r1, r1
 8008eaa:	1882      	adds	r2, r0, r2
 8008eac:	4290      	cmp	r0, r2
 8008eae:	d101      	bne.n	8008eb4 <memchr+0xc>
 8008eb0:	2000      	movs	r0, #0
 8008eb2:	4770      	bx	lr
 8008eb4:	7803      	ldrb	r3, [r0, #0]
 8008eb6:	428b      	cmp	r3, r1
 8008eb8:	d0fb      	beq.n	8008eb2 <memchr+0xa>
 8008eba:	3001      	adds	r0, #1
 8008ebc:	e7f6      	b.n	8008eac <memchr+0x4>

08008ebe <memmove>:
 8008ebe:	b510      	push	{r4, lr}
 8008ec0:	4288      	cmp	r0, r1
 8008ec2:	d902      	bls.n	8008eca <memmove+0xc>
 8008ec4:	188b      	adds	r3, r1, r2
 8008ec6:	4298      	cmp	r0, r3
 8008ec8:	d303      	bcc.n	8008ed2 <memmove+0x14>
 8008eca:	2300      	movs	r3, #0
 8008ecc:	e007      	b.n	8008ede <memmove+0x20>
 8008ece:	5c8b      	ldrb	r3, [r1, r2]
 8008ed0:	5483      	strb	r3, [r0, r2]
 8008ed2:	3a01      	subs	r2, #1
 8008ed4:	d2fb      	bcs.n	8008ece <memmove+0x10>
 8008ed6:	bd10      	pop	{r4, pc}
 8008ed8:	5ccc      	ldrb	r4, [r1, r3]
 8008eda:	54c4      	strb	r4, [r0, r3]
 8008edc:	3301      	adds	r3, #1
 8008ede:	429a      	cmp	r2, r3
 8008ee0:	d1fa      	bne.n	8008ed8 <memmove+0x1a>
 8008ee2:	e7f8      	b.n	8008ed6 <memmove+0x18>

08008ee4 <_realloc_r>:
 8008ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ee6:	0007      	movs	r7, r0
 8008ee8:	000d      	movs	r5, r1
 8008eea:	0016      	movs	r6, r2
 8008eec:	2900      	cmp	r1, #0
 8008eee:	d105      	bne.n	8008efc <_realloc_r+0x18>
 8008ef0:	0011      	movs	r1, r2
 8008ef2:	f7ff f85b 	bl	8007fac <_malloc_r>
 8008ef6:	0004      	movs	r4, r0
 8008ef8:	0020      	movs	r0, r4
 8008efa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008efc:	2a00      	cmp	r2, #0
 8008efe:	d103      	bne.n	8008f08 <_realloc_r+0x24>
 8008f00:	f7ff f80a 	bl	8007f18 <_free_r>
 8008f04:	0034      	movs	r4, r6
 8008f06:	e7f7      	b.n	8008ef8 <_realloc_r+0x14>
 8008f08:	f000 f812 	bl	8008f30 <_malloc_usable_size_r>
 8008f0c:	002c      	movs	r4, r5
 8008f0e:	42b0      	cmp	r0, r6
 8008f10:	d2f2      	bcs.n	8008ef8 <_realloc_r+0x14>
 8008f12:	0031      	movs	r1, r6
 8008f14:	0038      	movs	r0, r7
 8008f16:	f7ff f849 	bl	8007fac <_malloc_r>
 8008f1a:	1e04      	subs	r4, r0, #0
 8008f1c:	d0ec      	beq.n	8008ef8 <_realloc_r+0x14>
 8008f1e:	0029      	movs	r1, r5
 8008f20:	0032      	movs	r2, r6
 8008f22:	f7fe ffd9 	bl	8007ed8 <memcpy>
 8008f26:	0029      	movs	r1, r5
 8008f28:	0038      	movs	r0, r7
 8008f2a:	f7fe fff5 	bl	8007f18 <_free_r>
 8008f2e:	e7e3      	b.n	8008ef8 <_realloc_r+0x14>

08008f30 <_malloc_usable_size_r>:
 8008f30:	1f0b      	subs	r3, r1, #4
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	1f18      	subs	r0, r3, #4
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	da01      	bge.n	8008f3e <_malloc_usable_size_r+0xe>
 8008f3a:	580b      	ldr	r3, [r1, r0]
 8008f3c:	18c0      	adds	r0, r0, r3
 8008f3e:	4770      	bx	lr

08008f40 <_init>:
 8008f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f42:	46c0      	nop			; (mov r8, r8)
 8008f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f46:	bc08      	pop	{r3}
 8008f48:	469e      	mov	lr, r3
 8008f4a:	4770      	bx	lr

08008f4c <_fini>:
 8008f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f4e:	46c0      	nop			; (mov r8, r8)
 8008f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f52:	bc08      	pop	{r3}
 8008f54:	469e      	mov	lr, r3
 8008f56:	4770      	bx	lr
